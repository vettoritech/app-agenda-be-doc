{
  "openapi": "3.0.1",
  "info": {
    "title": "Agenda API",
    "description": "Agenda Application",
    "version": "v0.0.*"
  },
  "servers": [
    {
      "url": "http://ec2-54-159-12-88.compute-1.amazonaws.com",
      "description": "Deploy"
    }
  ],
  "security": [{ "bearer-key": [] }],
  "paths": {
    "/api/{establishmentId}/user/{userId}/userEstablishment/{userEstablishmentId}": {
      "get": {
        "tags": ["User Establishment"],
        "summary": "Search for details of the user's relationship with the establishment",
        "operationId": "findById",
        "parameters": [
          {
            "name": "establishmentId",
            "in": "path",
            "description": "Establishment Id",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          },
          {
            "name": "userId",
            "in": "path",
            "description": "User Id",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          },
          {
            "name": "userEstablishmentId",
            "in": "path",
            "description": "User Establishment Id",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          }
        ],
        "responses": {
          "200": {
            "description": "User Establishment found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/UserEstablishment" }
              }
            }
          },
          "404": {
            "description": "User Establishment not found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/UserEstablishment" }
              }
            }
          }
        }
      },
      "put": {
        "tags": ["User Establishment"],
        "summary": "Update user link with establishment",
        "operationId": "update",
        "parameters": [
          {
            "name": "establishmentId",
            "in": "path",
            "description": "Establishment Id",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          },
          {
            "name": "userId",
            "in": "path",
            "description": "User Id",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          },
          {
            "name": "userEstablishmentId",
            "in": "path",
            "description": "User Establishment Id",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          }
        ],
        "requestBody": {
          "description": "User establishment to update",
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/UserEstablishmentDto" }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Link updated",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/UserEstablishment" }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["User Establishment"],
        "summary": "Remove user link with establishment",
        "operationId": "delete",
        "parameters": [
          {
            "name": "establishmentId",
            "in": "path",
            "description": "Establishment Id",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          },
          {
            "name": "userId",
            "in": "path",
            "description": "User Id",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          },
          {
            "name": "userEstablishmentId",
            "in": "path",
            "description": "User Establishment Id",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          }
        ],
        "responses": { "200": { "description": "Link removed" } }
      }
    },
    "/api/wa/{establishmentId}/account/{waAccountId}": {
      "get": {
        "tags": ["Whatsapp Account"],
        "summary": "Return a unique user whatsapp account",
        "operationId": "findById_1",
        "parameters": [
          {
            "name": "establishmentId",
            "in": "path",
            "description": "Establishment Id",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          },
          {
            "name": "waAccountId",
            "in": "path",
            "description": "Whatsapp Account Id",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          }
        ],
        "responses": {
          "200": {
            "description": "User whatsapp account data found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/WaAccount" }
              }
            }
          },
          "404": {
            "description": "User whatsapp account data not found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/WaAccount" }
              }
            }
          }
        }
      },
      "put": {
        "tags": ["Whatsapp Account"],
        "summary": "Update existing whatsapp account",
        "operationId": "update_1",
        "parameters": [
          {
            "name": "establishmentId",
            "in": "path",
            "description": "Establishment Id",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          },
          {
            "name": "waAccountId",
            "in": "path",
            "description": "Whatsapp Account Id",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          }
        ],
        "requestBody": {
          "description": "Account data to update",
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/WaAccountDto" }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Whatsapp account updated",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/WaAccount" }
              }
            }
          }
        }
      }
    },
    "/api/wa/{establishmentId}/account/{waAccountId}/unblock": {
      "put": {
        "tags": ["Whatsapp Account"],
        "summary": "Unblock an existing whatsapp account",
        "operationId": "unblock",
        "parameters": [
          {
            "name": "establishmentId",
            "in": "path",
            "description": "Establishment Id",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          },
          {
            "name": "waAccountId",
            "in": "path",
            "description": "Whatsapp Account Id",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          }
        ],
        "responses": {
          "200": {
            "description": "Whatsapp account unblocked",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/WaAccount" }
              }
            }
          }
        }
      }
    },
    "/api/wa/{establishmentId}/account/{waAccountId}/cancel": {
      "put": {
        "tags": ["Whatsapp Account"],
        "summary": "Cancel an existing whatsapp account",
        "operationId": "cancel",
        "parameters": [
          {
            "name": "establishmentId",
            "in": "path",
            "description": "Establishment Id",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          },
          {
            "name": "waAccountId",
            "in": "path",
            "description": "Whatsapp Account Id",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          }
        ],
        "responses": {
          "200": {
            "description": "Whatsapp account canceled",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/WaAccount" }
              }
            }
          }
        }
      }
    },
    "/api/wa/{establishmentId}/account/{waAccountId}/block": {
      "put": {
        "tags": ["Whatsapp Account"],
        "summary": "Block an existing whatsapp account",
        "operationId": "block",
        "parameters": [
          {
            "name": "establishmentId",
            "in": "path",
            "description": "Establishment Id",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          },
          {
            "name": "waAccountId",
            "in": "path",
            "description": "Whatsapp Account Id",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          }
        ],
        "responses": {
          "200": {
            "description": "Whatsapp account blocked",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/WaAccount" }
              }
            }
          }
        }
      }
    },
    "/api/wa/{establishmentId}/account/msg/list/{waMsgListAccountId}": {
      "get": {
        "tags": ["Whatsapp Msg List Account"],
        "summary": "Return a unique whatsapp msg list account",
        "operationId": "findById_3",
        "parameters": [
          {
            "name": "establishmentId",
            "in": "path",
            "description": "Establishment Id",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          },
          {
            "name": "waMsgListAccountId",
            "in": "path",
            "description": "Whatsapp msg list account id",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          }
        ],
        "responses": {
          "200": {
            "description": "Whatsapp msg list account found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/WaMsgListAccount" }
              }
            }
          },
          "404": {
            "description": "Whatsapp msg list account not found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/WaMsgListAccount" }
              }
            }
          }
        }
      },
      "put": {
        "tags": ["Whatsapp Msg List Account"],
        "summary": "Update an existing whatsapp msg list account",
        "operationId": "update_2",
        "parameters": [
          {
            "name": "establishmentId",
            "in": "path",
            "description": "Establishment Id",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          },
          {
            "name": "waMsgListAccountId",
            "in": "path",
            "description": "Whatsapp msg list account id",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/WaMsgListAccountDto" }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Whatsapp msg list account updated",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/WaMsgListAccount" }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["Whatsapp Msg List Account"],
        "summary": "Delete an existing whatsapp msg list account",
        "operationId": "delete_1",
        "parameters": [
          {
            "name": "establishmentId",
            "in": "path",
            "description": "Establishment Id",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          },
          {
            "name": "waMsgListAccountId",
            "in": "path",
            "description": "Whatsapp msg list account id",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          }
        ],
        "responses": {
          "204": { "description": "Whatsapp msg list account deleted" }
        }
      }
    },
    "/api/wa/{establishmentId}/account/msg/button/{waMsgButtonAccountId}": {
      "get": {
        "tags": ["Whatsapp Msg Button Account"],
        "summary": "Return a unique whatsapp msg button account",
        "operationId": "findById_5",
        "parameters": [
          {
            "name": "establishmentId",
            "in": "path",
            "description": "Establishment Id",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          },
          {
            "name": "waMsgButtonAccountId",
            "in": "path",
            "description": "Whatsapp msg button account id",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          }
        ],
        "responses": {
          "200": {
            "description": "Whatsapp msg button account found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/WaMsgButtonAccount" }
              }
            }
          },
          "404": {
            "description": "Whatsapp msg button account not found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/WaMsgButtonAccount" }
              }
            }
          }
        }
      },
      "put": {
        "tags": ["Whatsapp Msg Button Account"],
        "summary": "Update an existing whatsapp msg button account",
        "operationId": "update_3",
        "parameters": [
          {
            "name": "establishmentId",
            "in": "path",
            "description": "Establishment Id",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          },
          {
            "name": "waMsgButtonAccountId",
            "in": "path",
            "description": "Whatsapp msg button account id",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/WaMsgButtonAccountDto" }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Whatsapp msg button account updated",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/WaMsgButtonAccount" }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["Whatsapp Msg Button Account"],
        "summary": "Delete an existing whatsapp msg button account",
        "operationId": "delete_2",
        "parameters": [
          {
            "name": "establishmentId",
            "in": "path",
            "description": "Establishment Id",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          },
          {
            "name": "waMsgButtonAccountId",
            "in": "path",
            "description": "Whatsapp msg button account id",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          }
        ],
        "responses": {
          "204": { "description": "Whatsapp msg button account deleted" }
        }
      }
    },
    "/api/user/{userId}/{establishmentId}/workDay/{workDayId}": {
      "get": {
        "tags": ["Workday"],
        "summary": "Return an unique user workday",
        "operationId": "findByIdWorkDay",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "User Id",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          },
          {
            "name": "establishmentId",
            "in": "path",
            "description": "Establishment Id",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          },
          {
            "name": "workDayId",
            "in": "path",
            "description": "Work Day Id",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          }
        ],
        "responses": {
          "200": {
            "description": "User address found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/WorkDay" }
              }
            }
          },
          "404": {
            "description": "User address not found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/WorkDay" }
              }
            }
          }
        }
      },
      "put": {
        "tags": ["Workday"],
        "summary": "Update user workday",
        "operationId": "updateWorkDay",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "User Id",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          },
          {
            "name": "establishmentId",
            "in": "path",
            "description": "Establishment Id",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          },
          {
            "name": "workDayId",
            "in": "path",
            "description": "Work Day Id",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          }
        ],
        "requestBody": {
          "description": "Workday to update",
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/WorkDayDto" }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Workday updated",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/WorkDay" }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["Workday"],
        "summary": "Delete user workday",
        "operationId": "deleteWorkDay",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "User Id",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          },
          {
            "name": "establishmentId",
            "in": "path",
            "description": "Establishment Id",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          },
          {
            "name": "workDayId",
            "in": "path",
            "description": "Work Day Id",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          }
        ],
        "responses": { "200": { "description": "User workday deleted" } }
      }
    },
    "/api/user/{userId}/address/{addressId}": {
      "get": {
        "tags": ["User Address"],
        "summary": "Return an unique user address",
        "operationId": "findByIdAddress",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "User Id",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          },
          {
            "name": "addressId",
            "in": "path",
            "description": "Address Id",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          }
        ],
        "responses": {
          "200": {
            "description": "User address found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Address" }
              }
            }
          },
          "404": {
            "description": "User address not found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Address" }
              }
            }
          }
        }
      },
      "put": {
        "tags": ["User Address"],
        "summary": "Update the user address",
        "operationId": "updateAddress",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "User Id",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          },
          {
            "name": "addressId",
            "in": "path",
            "description": "Address Id",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          }
        ],
        "requestBody": {
          "description": "Address to update",
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/AddressDto" }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Address updated",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Address" }
              }
            }
          }
        }
      }
    },
    "/api/user/{establishmentId}/{userId}": {
      "get": {
        "tags": ["User"],
        "summary": "Return a unique user",
        "operationId": "findById_11",
        "parameters": [
          {
            "name": "establishmentId",
            "in": "path",
            "description": "Establishment Id",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          },
          {
            "name": "userId",
            "in": "path",
            "description": "User Id",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          }
        ],
        "responses": {
          "200": {
            "description": "User found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/UserProjection" }
              }
            }
          },
          "404": {
            "description": "User not found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/UserProjection" }
              }
            }
          }
        }
      },
      "put": {
        "tags": ["User"],
        "summary": "Update an existing user",
        "operationId": "update_4",
        "parameters": [
          {
            "name": "establishmentId",
            "in": "path",
            "description": "Establishment Id",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          },
          {
            "name": "userId",
            "in": "path",
            "description": "User Id",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          }
        ],
        "requestBody": {
          "description": "User to update",
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/UserDto" }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "User updated",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/User" }
              }
            }
          }
        }
      }
    },
    "/api/user/{establishmentId}/{userId}/telephone/{userTelephoneId}/cancel": {
      "put": {
        "tags": ["User Telephone"],
        "summary": "Cancel a user telephone",
        "operationId": "cancel_1",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "User Id",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          },
          {
            "name": "establishmentId",
            "in": "path",
            "description": "Establishment Id",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          },
          {
            "name": "userTelephoneId",
            "in": "path",
            "description": "User Telephone Id",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          }
        ],
        "responses": {
          "201": {
            "description": "Telephone canceled",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/UserTelephone" }
              }
            }
          }
        }
      }
    },
    "/api/user/{establishmentId}/{userId}/password": {
      "put": {
        "tags": ["User"],
        "summary": "Update User Password",
        "operationId": "updateUserPassword",
        "parameters": [
          {
            "name": "establishmentId",
            "in": "path",
            "description": "Establishment Id",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          },
          {
            "name": "userId",
            "in": "path",
            "description": "User Id",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          }
        ],
        "requestBody": {
          "description": "User Password to update",
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/UserPasswordDto" }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "User Password updated",
            "content": {
              "application/json": { "schema": { "type": "object" } }
            }
          }
        }
      }
    },
    "/api/user/{establishmentId}/{userId}/lock/{userLockId}/unlock": {
      "put": {
        "tags": ["User Lock"],
        "summary": "Unlock user at an establishment",
        "operationId": "unlock",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "User Id",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          },
          {
            "name": "establishmentId",
            "in": "path",
            "description": "Establishment Id",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          },
          {
            "name": "userLockId",
            "in": "path",
            "description": "User Lock Id",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          }
        ],
        "responses": {
          "200": {
            "description": "User unlocked",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/UserLock" }
              }
            }
          }
        }
      }
    },
    "/api/service/{serviceId}/serviceValue/{serviceValueId}": {
      "get": {
        "tags": ["Service Value"],
        "summary": "Return an unique service value",
        "operationId": "findByIdServiceValue",
        "parameters": [
          {
            "name": "serviceId",
            "in": "path",
            "description": "Service Id",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          },
          {
            "name": "serviceValueId",
            "in": "path",
            "description": "Service Value Id",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          }
        ],
        "responses": {
          "200": {
            "description": "Service found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ServiceValue" }
              }
            }
          },
          "404": {
            "description": "Service not found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ServiceValue" }
              }
            }
          }
        }
      },
      "put": {
        "tags": ["Service Value"],
        "summary": "Update the value of a service",
        "operationId": "updateServiceValue",
        "parameters": [
          {
            "name": "serviceId",
            "in": "path",
            "description": "Service Id",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          },
          {
            "name": "serviceValueId",
            "in": "path",
            "description": "Service Value Id",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          }
        ],
        "requestBody": {
          "description": "Value to update",
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/ServiceValueDto" }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Value updated",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ServiceValue" }
              }
            }
          }
        }
      }
    },
    "/api/service/{serviceId}/serviceValue/{serviceValueId}/cancel": {
      "put": {
        "tags": ["Service Value"],
        "summary": "Cancel value of a service",
        "operationId": "cancelServiceValue",
        "parameters": [
          {
            "name": "serviceId",
            "in": "path",
            "description": "Service Id",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          },
          {
            "name": "serviceValueId",
            "in": "path",
            "description": "Service Value Id",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          }
        ],
        "responses": {
          "200": {
            "description": "Value canceled",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ServiceValue" }
              }
            }
          }
        }
      }
    },
    "/api/service/{serviceId}/serviceLink/{serviceLinkId}": {
      "get": {
        "tags": ["Service Link"],
        "summary": "Return an unique service link",
        "operationId": "findByIdServiceLink",
        "parameters": [
          {
            "name": "serviceId",
            "in": "path",
            "description": "Service Id",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          },
          {
            "name": "serviceLinkId",
            "in": "path",
            "description": "Service Link Id",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          }
        ],
        "responses": {
          "200": {
            "description": "Service found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ServiceLink" }
              }
            }
          },
          "404": {
            "description": "Service not found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ServiceLink" }
              }
            }
          }
        }
      },
      "put": {
        "tags": ["Service Link"],
        "summary": "Update link between services",
        "operationId": "updateServiceLink",
        "parameters": [
          {
            "name": "serviceId",
            "in": "path",
            "description": "Service Id",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          },
          {
            "name": "serviceLinkId",
            "in": "path",
            "description": "Service Link Id",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          }
        ],
        "requestBody": {
          "description": "Service link to update",
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/ServiceLinkDto" }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Link created",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ServiceLink" }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["Service Link"],
        "summary": "Remove link between services",
        "operationId": "deleteServiceLink",
        "parameters": [
          {
            "name": "serviceId",
            "in": "path",
            "description": "Service Id",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          },
          {
            "name": "serviceLinkId",
            "in": "path",
            "description": "Service Link Id",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          }
        ],
        "responses": { "200": { "description": "Link deleted" } }
      }
    },
    "/api/service/{establishmentId}/{serviceId}": {
      "get": {
        "tags": ["Service"],
        "summary": "Return a unique service",
        "operationId": "findById_14",
        "parameters": [
          {
            "name": "establishmentId",
            "in": "path",
            "description": "Establishment Id",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          },
          {
            "name": "serviceId",
            "in": "path",
            "description": "Service Id",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          }
        ],
        "responses": {
          "200": {
            "description": "Service found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ServiceDomain" }
              }
            }
          },
          "404": {
            "description": "Service not found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ServiceDomain" }
              }
            }
          }
        }
      },
      "put": {
        "tags": ["Service"],
        "summary": "Update an existing service",
        "operationId": "update_5",
        "parameters": [
          {
            "name": "establishmentId",
            "in": "path",
            "description": "Establishment Id",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          },
          {
            "name": "serviceId",
            "in": "path",
            "description": "Service Id",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          }
        ],
        "requestBody": {
          "description": "Service to update",
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/ServiceDomainDto" }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Service updated",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ServiceDomain" }
              }
            }
          }
        }
      }
    },
    "/api/service/{establishmentId}/{serviceId}/cancel": {
      "put": {
        "tags": ["Service"],
        "summary": "cancel an active service",
        "operationId": "cancelService",
        "parameters": [
          {
            "name": "establishmentId",
            "in": "path",
            "description": "Establishment Id",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          },
          {
            "name": "serviceId",
            "in": "path",
            "description": "Service Id",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          }
        ],
        "responses": {
          "200": {
            "description": "Service canceled",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ServiceDomain" }
              }
            }
          }
        }
      }
    },
    "/api/service/{establishmentId}/category/{categoryId}": {
      "get": {
        "tags": ["Service Category"],
        "summary": "Return an unique service category",
        "operationId": "findByIdCategory",
        "parameters": [
          {
            "name": "establishmentId",
            "in": "path",
            "description": "Establishment Id",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          },
          {
            "name": "categoryId",
            "in": "path",
            "description": "Category Id",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          }
        ],
        "responses": {
          "200": {
            "description": "Service found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Category" }
              }
            }
          },
          "404": {
            "description": "Service not found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Category" }
              }
            }
          }
        }
      },
      "put": {
        "tags": ["Service Category"],
        "summary": "Update an existing category",
        "operationId": "updateCategory",
        "parameters": [
          {
            "name": "establishmentId",
            "in": "path",
            "description": "Establishment Id",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          },
          {
            "name": "categoryId",
            "in": "path",
            "description": "Category Id",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          }
        ],
        "requestBody": {
          "description": "Category to update",
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/CategoryDto" }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Category updated",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Category" }
              }
            }
          }
        }
      }
    },
    "/api/scheduling/{schedulingId}/service/{schedulingServiceId}": {
      "get": {
        "tags": ["Scheduling Service"],
        "summary": "Return a unique schedule service",
        "operationId": "findById_15",
        "parameters": [
          {
            "name": "schedulingId",
            "in": "path",
            "description": "Scheduling Id",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          },
          {
            "name": "schedulingServiceId",
            "in": "path",
            "description": "Scheduling Service Id",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          }
        ],
        "responses": {
          "200": {
            "description": "Scheduling service found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SchedulingServiceDomain"
                }
              }
            }
          },
          "404": {
            "description": "Scheduling service not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SchedulingServiceDomain"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": ["Scheduling Service"],
        "summary": "Update a service of a scheduling",
        "operationId": "update_6",
        "parameters": [
          {
            "name": "schedulingId",
            "in": "path",
            "description": "Scheduling Id",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          },
          {
            "name": "schedulingServiceId",
            "in": "path",
            "description": "Scheduling Service Id",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          }
        ],
        "requestBody": {
          "description": "Service to update",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SchedulingServiceDomainDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Service updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SchedulingServiceDomain"
                }
              }
            }
          }
        }
      }
    },
    "/api/scheduling/{schedulingId}/service/cancel/{schedulingServiceId}": {
      "put": {
        "tags": ["Scheduling Service"],
        "summary": "Cancel a service of a scheduling",
        "operationId": "cancel_2",
        "parameters": [
          {
            "name": "schedulingId",
            "in": "path",
            "description": "Scheduling Id",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          },
          {
            "name": "schedulingServiceId",
            "in": "path",
            "description": "Scheduling Service Id",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          }
        ],
        "responses": {
          "200": {
            "description": "Canceled",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SchedulingServiceDomain"
                }
              }
            }
          },
          "400": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SchedulingServiceDomain"
                }
              }
            }
          }
        }
      }
    },
    "/api/scheduling/{establishmentId}/{schedulingId}": {
      "get": {
        "tags": ["Scheduling"],
        "summary": "Return a unique schedule",
        "operationId": "findById_16",
        "parameters": [
          {
            "name": "establishmentId",
            "in": "path",
            "description": "Establishment Id",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          },
          {
            "name": "schedulingId",
            "in": "path",
            "description": "Scheduling Id",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          }
        ],
        "responses": {
          "200": {
            "description": "Scheduling found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/SchedulingDomain" }
              }
            }
          },
          "404": {
            "description": "Scheduling not found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/SchedulingDomain" }
              }
            }
          }
        }
      },
      "put": {
        "tags": ["Scheduling"],
        "summary": "Update an existing scheduling",
        "operationId": "update_7",
        "parameters": [
          {
            "name": "establishmentId",
            "in": "path",
            "description": "Establishment Id",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          },
          {
            "name": "schedulingId",
            "in": "path",
            "description": "Scheduling Id",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          }
        ],
        "requestBody": {
          "description": "Scheduling to update",
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/SchedulingDomainDto" }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Scheduling updated",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/SchedulingDomain" }
              }
            }
          }
        }
      }
    },
    "/api/scheduling/{establishmentId}/{schedulingId}/refuse": {
      "put": {
        "tags": ["Scheduling"],
        "summary": "Refuse a scheduling",
        "operationId": "refuseScheduled",
        "parameters": [
          {
            "name": "establishmentId",
            "in": "path",
            "description": "Establishment Id",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          },
          {
            "name": "schedulingId",
            "in": "path",
            "description": "Scheduling Id",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          }
        ],
        "responses": {
          "200": {
            "description": "Refused",
            "content": {
              "application/json": { "schema": { "type": "object" } }
            }
          },
          "400": {
            "description": "Validation error",
            "content": {
              "application/json": { "schema": { "type": "object" } }
            }
          }
        }
      }
    },
    "/api/scheduling/{establishmentId}/{schedulingId}/confirm": {
      "put": {
        "tags": ["Scheduling"],
        "summary": "Confirm a scheduling",
        "operationId": "confirmScheduled",
        "parameters": [
          {
            "name": "establishmentId",
            "in": "path",
            "description": "Establishment Id",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          },
          {
            "name": "schedulingId",
            "in": "path",
            "description": "Scheduling Id",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          }
        ],
        "responses": {
          "200": {
            "description": "Confirmed",
            "content": {
              "application/json": { "schema": { "type": "object" } }
            }
          },
          "400": {
            "description": "Validation error",
            "content": {
              "application/json": { "schema": { "type": "object" } }
            }
          }
        }
      }
    },
    "/api/scheduling/{establishmentId}/{schedulingId}/cancel": {
      "put": {
        "tags": ["Scheduling"],
        "summary": "Cancel a scheduling",
        "operationId": "cancelScheduled",
        "parameters": [
          {
            "name": "establishmentId",
            "in": "path",
            "description": "Establishment Id",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          },
          {
            "name": "schedulingId",
            "in": "path",
            "description": "Scheduling Id",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          }
        ],
        "responses": {
          "200": {
            "description": "Canceled",
            "content": {
              "application/json": { "schema": { "type": "object" } }
            }
          },
          "400": {
            "description": "Validation error",
            "content": {
              "application/json": { "schema": { "type": "object" } }
            }
          }
        }
      }
    },
    "/api/establishment/{establishmentId}": {
      "get": {
        "tags": ["Establishment"],
        "summary": "Return a unique establishment",
        "operationId": "findById_17",
        "parameters": [
          {
            "name": "establishmentId",
            "in": "path",
            "description": "Establishment Id",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          }
        ],
        "responses": {
          "200": {
            "description": "Establishment found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Establishment" }
              }
            }
          },
          "404": {
            "description": "Establishment not found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Establishment" }
              }
            }
          }
        }
      },
      "put": {
        "tags": ["Establishment"],
        "summary": "Update an existing establishment",
        "operationId": "update_8",
        "parameters": [
          {
            "name": "establishmentId",
            "in": "path",
            "description": "Establishment Id",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          }
        ],
        "requestBody": {
          "description": "Establishment to update",
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/EstablishmentDto" }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Establishment updated",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Establishment" }
              }
            }
          }
        }
      }
    },
    "/api/establishment/{establishmentId}/workDayDefault/{workDayDefaultId}": {
      "get": {
        "tags": ["Work Day Default"],
        "summary": "Return an unique work day default",
        "operationId": "findById_18",
        "parameters": [
          {
            "name": "establishmentId",
            "in": "path",
            "description": "Establishment Id",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          },
          {
            "name": "workDayDefaultId",
            "in": "path",
            "description": "Work Day Default Id",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/WorkDayDefault" }
              }
            }
          }
        }
      },
      "put": {
        "tags": ["Work Day Default"],
        "summary": "Update an existing default workday into establishment",
        "operationId": "update_9",
        "parameters": [
          {
            "name": "establishmentId",
            "in": "path",
            "description": "Establishment Id",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          },
          {
            "name": "workDayDefaultId",
            "in": "path",
            "description": "Work Day Default Id",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          }
        ],
        "requestBody": {
          "description": "Workday to update",
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/WorkDayDefaultDto" }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Workday updated",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/WorkDayDefault" }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["Work Day Default"],
        "summary": "Delete an existing default workday into establishment",
        "operationId": "delete_4",
        "parameters": [
          {
            "name": "establishmentId",
            "in": "path",
            "description": "Establishment Id",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          },
          {
            "name": "workDayDefaultId",
            "in": "path",
            "description": "Work Day Default Id",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          }
        ],
        "responses": {
          "200": {
            "description": "Default workday deleted",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/WorkDayDefault" }
              }
            }
          }
        }
      }
    },
    "/api/establishment/{establishmentId}/config/{establishmentConfigId}": {
      "get": {
        "tags": ["Establishment Config"],
        "summary": "Return an establishment config",
        "operationId": "findByIdEstablishmentConfig",
        "parameters": [
          {
            "name": "establishmentId",
            "in": "path",
            "description": "Establishment Id",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          },
          {
            "name": "establishmentConfigId",
            "in": "path",
            "description": "Establishment Config Id",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          }
        ],
        "responses": {
          "200": {
            "description": "Config of establishment found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/EstablishmentConfig" }
              }
            }
          },
          "404": {
            "description": "Config of establishment not found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/EstablishmentConfig" }
              }
            }
          }
        }
      },
      "put": {
        "tags": ["Establishment Config"],
        "summary": "Update config of establishment",
        "operationId": "updateEstablishmentConfig",
        "parameters": [
          {
            "name": "establishmentId",
            "in": "path",
            "description": "Establishment Id",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          },
          {
            "name": "establishmentConfigId",
            "in": "path",
            "description": "Establishment Config Id",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          }
        ],
        "requestBody": {
          "description": "Config of establishment to update",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EstablishmentConfigDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Config updated",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/EstablishmentConfig" }
              }
            }
          }
        }
      }
    },
    "/api/establishment/{establishmentId}/address/{addressId}": {
      "get": {
        "tags": ["Establishment Address"],
        "summary": "Return a unique address of establishment",
        "operationId": "findByIdAddress_1",
        "parameters": [
          {
            "name": "establishmentId",
            "in": "path",
            "description": "Establishment Id",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          },
          {
            "name": "addressId",
            "in": "path",
            "description": "Address Id",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          }
        ],
        "responses": {
          "200": {
            "description": "Address of establishment found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Address" }
              }
            }
          },
          "404": {
            "description": "Address of establishment not found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Address" }
              }
            }
          }
        }
      },
      "put": {
        "tags": ["Establishment Address"],
        "summary": "Update address of establishment",
        "operationId": "updateAddress_1",
        "parameters": [
          {
            "name": "establishmentId",
            "in": "path",
            "description": "Establishment Id",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          },
          {
            "name": "addressId",
            "in": "path",
            "description": "Address Id",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          }
        ],
        "requestBody": {
          "description": "Address of establishment to update",
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/AddressDto" }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Address updated",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Address" }
              }
            }
          }
        }
      }
    },
    "/api/attendance/{establishmentId}/{attendanceId}": {
      "get": {
        "tags": ["Attendance"],
        "summary": "Return a unique attendance",
        "operationId": "findById_19",
        "parameters": [
          {
            "name": "establishmentId",
            "in": "path",
            "description": "Logged Establishment Id",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          },
          {
            "name": "attendanceId",
            "in": "path",
            "description": "Attendance Id",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          }
        ],
        "responses": {
          "200": {
            "description": "Attendance found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/AttendanceDomain" }
              }
            }
          },
          "404": {
            "description": "Attendance not found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/AttendanceDomain" }
              }
            }
          }
        }
      },
      "put": {
        "tags": ["Attendance"],
        "summary": "Update an existing attendance",
        "operationId": "update_10",
        "parameters": [
          {
            "name": "establishmentId",
            "in": "path",
            "description": "Logged Establishment Id",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          },
          {
            "name": "attendanceId",
            "in": "path",
            "description": "Attendance Id To Update",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          }
        ],
        "requestBody": {
          "description": "Attendance to update",
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/AttendanceDomainDto" }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Attendance updated",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/AttendanceDomain" }
              }
            }
          }
        }
      }
    },
    "/api/attendance/{establishmentId}/finish/{attendanceId}": {
      "put": {
        "tags": ["Attendance"],
        "summary": "Mark an attendance as finished",
        "operationId": "finishAttendance",
        "parameters": [
          {
            "name": "establishmentId",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          },
          {
            "name": "attendanceId",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/AttendanceFinishDto" }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Attendance marked as finished",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/AttendanceDomain" }
              }
            }
          }
        }
      }
    },
    "/api/attendance/{establishmentId}/cancel/{attendanceId}": {
      "put": {
        "tags": ["Attendance"],
        "summary": "Cancel an attendance",
        "operationId": "cancelAttendance",
        "parameters": [
          {
            "name": "establishmentId",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          },
          {
            "name": "attendanceId",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          }
        ],
        "responses": {
          "200": {
            "description": "Attendance cancelled",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/AttendanceDomain" }
              }
            }
          }
        }
      }
    },
    "/api/attendance/{establishmentId}/absent/{attendanceId}": {
      "put": {
        "tags": ["Attendance"],
        "summary": "Mark an attendance as absent",
        "operationId": "absentAttendance",
        "parameters": [
          {
            "name": "establishmentId",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          },
          {
            "name": "attendanceId",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          }
        ],
        "responses": {
          "200": {
            "description": "Attendance marked as absent",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/AttendanceDomain" }
              }
            }
          }
        }
      }
    },
    "/api/attendance/{attendanceId}/service/{attendanceServiceId}": {
      "get": {
        "tags": ["Attendance Service"],
        "summary": "Return a unique service of an attendance",
        "operationId": "findByIdAttendanceService",
        "parameters": [
          {
            "name": "attendanceId",
            "in": "path",
            "description": "Attendance Id",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          },
          {
            "name": "attendanceServiceId",
            "in": "path",
            "description": "Attendance Service Id",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          }
        ],
        "responses": {
          "200": {
            "description": "Service of attendance found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AttendanceServiceDomain"
                }
              }
            }
          },
          "404": {
            "description": "Service of attendance not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AttendanceServiceDomain"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": ["Attendance Service"],
        "summary": "Update an existing service in an attendance",
        "operationId": "updateAttendanceService",
        "parameters": [
          {
            "name": "attendanceId",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          },
          {
            "name": "attendanceServiceId",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AttendanceServiceDomainDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Service updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AttendanceServiceDomain"
                }
              }
            }
          }
        }
      }
    },
    "/api/attendance/{attendanceId}/service/cancel/{attendanceServiceId}": {
      "put": {
        "tags": ["Attendance Service"],
        "summary": "Cancel a service of an attendance",
        "operationId": "cancelAttendanceService",
        "parameters": [
          {
            "name": "attendanceId",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          },
          {
            "name": "attendanceServiceId",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          }
        ],
        "responses": {
          "200": {
            "description": "Service cancelled",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AttendanceServiceDomain"
                }
              }
            }
          }
        }
      }
    },
    "/api/{establishmentId}/user/{userId}/userEstablishment": {
      "get": {
        "tags": ["User Establishment"],
        "summary": "Search establishments linked to the user",
        "operationId": "findList",
        "parameters": [
          {
            "name": "userEstablishmentId",
            "in": "query",
            "description": "User Establishment Id (Equal)"
          },
          {
            "name": "nickname",
            "in": "query",
            "description": "Nickname (LikeIgnoreCase)"
          },
          {
            "name": "establishmentId",
            "in": "path",
            "description": "Establishment Id",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          },
          {
            "name": "userId",
            "in": "path",
            "description": "User Id",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Zero-based page index (0..N)",
            "required": false,
            "schema": { "minimum": 0, "type": "integer", "default": 0 }
          },
          {
            "name": "size",
            "in": "query",
            "description": "The size of the page to be returned",
            "required": false,
            "schema": { "minimum": 1, "type": "integer", "default": 20 }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
            "required": false,
            "schema": { "type": "array", "items": { "type": "string" } }
          }
        ],
        "responses": {
          "200": {
            "description": "Found zero or more results",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PageUserEstablishment"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["User Establishment"],
        "summary": "Link user with establishment",
        "operationId": "insert",
        "parameters": [
          {
            "name": "establishmentId",
            "in": "path",
            "description": "Establishment Id",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          },
          {
            "name": "userId",
            "in": "path",
            "description": "User Id",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          }
        ],
        "requestBody": {
          "description": "User establishment to insert",
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/UserEstablishmentDto" }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Link created",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/UserEstablishment" }
              }
            }
          }
        }
      }
    },
    "/api/webhook/whatsapp": {
      "post": {
        "tags": ["Public"],
        "summary": "Whatsapp token validation",
        "description": "When generating a new webhook on the 'developers.facebook.com' page, a token must be inserted that must also be saved with the account.\n This token will be validated when trying to save the webhook url, so it must already exist in the database",
        "operationId": "whatsapp",
        "requestBody": {
          "description": "Webhook validation data",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/WhatsappWebhookValidationDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Token validated and user is ok",
            "content": {
              "application/json": { "schema": { "type": "object" } }
            }
          },
          "404": {
            "description": "Token not found linked in an active whatsapp account",
            "content": {
              "application/json": { "schema": { "type": "object" } }
            }
          }
        },
        "security": []
      }
    },
    "/api/wa/{establishmentId}/account": {
      "get": {
        "tags": ["Whatsapp Account"],
        "summary": "Return a list of user whatsapp account by establishment",
        "operationId": "findList_1",
        "parameters": [
          {
            "name": "waAccountId",
            "in": "query",
            "description": "Whatsapp Account Id (Equal)"
          },
          {
            "name": "telephone",
            "in": "query",
            "description": "Telephone (Like)"
          },
          { "name": "wabaId", "in": "query", "description": "Waba Id (Equal)" },
          {
            "name": "situationType",
            "in": "query",
            "description": "Situation Type (In)",
            "schema": {
              "type": "string",
              "enum": ["ACTIVE", "BLOCKED", "CANCELED"]
            }
          },
          {
            "name": "phoneNumberId",
            "in": "query",
            "description": "phoneNumberId (Equal)"
          },
          {
            "name": "phoneNumberId#NULL",
            "in": "query",
            "description": "Phone Number Id Is Null (Null)"
          },
          {
            "name": "webhookUserToken",
            "in": "query",
            "description": "Webhook User Token (Equal)"
          },
          {
            "name": "establishmentId",
            "in": "path",
            "description": "Establishment Id",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Zero-based page index (0..N)",
            "required": false,
            "schema": { "minimum": 0, "type": "integer", "default": 0 }
          },
          {
            "name": "size",
            "in": "query",
            "description": "The size of the page to be returned",
            "required": false,
            "schema": { "minimum": 1, "type": "integer", "default": 20 }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
            "required": false,
            "schema": { "type": "array", "items": { "type": "string" } }
          }
        ],
        "responses": {
          "200": {
            "description": "Found zero or more results",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/PageWaAccount" }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["Whatsapp Account"],
        "summary": "Insert new whatsapp account",
        "operationId": "insert_1",
        "parameters": [
          {
            "name": "establishmentId",
            "in": "path",
            "description": "Establishment Id",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          }
        ],
        "requestBody": {
          "description": "Account data to insert",
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/WaAccountDto" }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Whatsapp account inserted",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/WaAccount" }
              }
            }
          }
        }
      }
    },
    "/api/wa/{establishmentId}/account/msg/model/binding/{waMsgModelId}": {
      "post": {
        "tags": ["Wa Msg Model Account"],
        "summary": "Binding model message with establishment account",
        "operationId": "bindingMsgToAccount",
        "parameters": [
          {
            "name": "establishmentId",
            "in": "path",
            "description": "Establishment Id",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          },
          {
            "name": "waMsgModelId",
            "in": "path",
            "description": "Wa Msg Model Id",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/WaMsgModelAccount" }
              }
            }
          }
        }
      }
    },
    "/api/wa/{establishmentId}/account/msg/interactive/binding/{waMsgInteractiveId}": {
      "post": {
        "tags": ["Wa Msg Interactive Account"],
        "summary": "Binding interactive message with establishment account",
        "operationId": "bindingMsgToAccount_1",
        "parameters": [
          {
            "name": "establishmentId",
            "in": "path",
            "description": "Establishment Id",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          },
          {
            "name": "waMsgInteractiveId",
            "in": "path",
            "description": "Wa Msg Interactive Id",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WaMsgInteractiveAccount"
                }
              }
            }
          }
        }
      }
    },
    "/api/user/{userId}/{establishmentId}/workHourSchedException": {
      "get": {
        "tags": ["Work Hour Schedule Exception"],
        "summary": "Return a list of Work Hour Schedule Exception",
        "operationId": "findListWorkHourSchedException",
        "parameters": [
          {
            "name": "workHourSchedExceptionId",
            "in": "query",
            "description": "Work Hour Schedule Exception Id (Equal)"
          },
          {
            "name": "dayExceptionGreater",
            "in": "query",
            "description": "Day Exception Greater (GreaterThanOrEqual)"
          },
          {
            "name": "dayExceptionLess",
            "in": "query",
            "description": "Day Exception Less (LessThanOrEqual)"
          },
          {
            "name": "userId",
            "in": "path",
            "description": "User Id",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          },
          {
            "name": "establishmentId",
            "in": "path",
            "description": "Establishment Id",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Zero-based page index (0..N)",
            "required": false,
            "schema": { "minimum": 0, "type": "integer", "default": 0 }
          },
          {
            "name": "size",
            "in": "query",
            "description": "The size of the page to be returned",
            "required": false,
            "schema": { "minimum": 1, "type": "integer", "default": 20 }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
            "required": false,
            "schema": { "type": "array", "items": { "type": "string" } }
          }
        ],
        "responses": {
          "200": {
            "description": "Found zero or more results",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PageWorkHourSchedException"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["Work Hour Schedule Exception"],
        "summary": "Insert Work Hour Schedule Exception",
        "operationId": "insertWorkHourSchedException",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "User Id",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          },
          {
            "name": "establishmentId",
            "in": "path",
            "description": "Establishment Id",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          }
        ],
        "requestBody": {
          "description": "Work hour schedule exception to insert",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/WorkHourSchedExceptionDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Service inserted",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WorkHourSchedException"
                }
              }
            }
          }
        }
      }
    },
    "/api/user/{userId}/{establishmentId}/workDay": {
      "get": {
        "tags": ["Workday"],
        "summary": "Return a list of user workday by establishment",
        "operationId": "findListWorkDay",
        "parameters": [
          {
            "name": "workDayId",
            "in": "query",
            "description": "Work Day Id (Equal)"
          },
          {
            "name": "dayWeek",
            "in": "query",
            "description": "Day of Week (In)",
            "schema": {
              "type": "string",
              "enum": [
                "SUNDAY",
                "MONDAY",
                "TUESDAY",
                "WEDNESDAY",
                "THURSDAY",
                "FRIDAY",
                "SATURDAY"
              ]
            }
          },
          {
            "name": "userEmployeeId",
            "in": "query",
            "description": "User Employee Id (Equal)"
          },
          {
            "name": "userId",
            "in": "path",
            "description": "User Id",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          },
          {
            "name": "establishmentId",
            "in": "path",
            "description": "Establishment Id",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Zero-based page index (0..N)",
            "required": false,
            "schema": { "minimum": 0, "type": "integer", "default": 0 }
          },
          {
            "name": "size",
            "in": "query",
            "description": "The size of the page to be returned",
            "required": false,
            "schema": { "minimum": 1, "type": "integer", "default": 20 }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
            "required": false,
            "schema": { "type": "array", "items": { "type": "string" } }
          }
        ],
        "responses": {
          "200": {
            "description": "Found zero or more results",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/PageWorkDay" }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["Workday"],
        "summary": "Insert new workday to user",
        "operationId": "insertWorkDay",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "User Id",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          },
          {
            "name": "establishmentId",
            "in": "path",
            "description": "Establishment Id",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          }
        ],
        "requestBody": {
          "description": "Workday to insert",
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/WorkDayDto" }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Workday inserted",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/WorkDay" }
              }
            }
          }
        }
      }
    },
    "/api/user/{userId}/{establishmentId}/workDay/establishmentDefault": {
      "post": {
        "tags": ["Workday"],
        "summary": "Generates default working hours by establishment for the user",
        "operationId": "insertByEstablishmentDefault",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "User Id",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          },
          {
            "name": "establishmentId",
            "in": "path",
            "description": "Establishment Id",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          }
        ],
        "responses": {
          "201": {
            "description": "default workday generated",
            "content": {
              "application/json": { "schema": { "type": "object" } }
            }
          }
        }
      }
    },
    "/api/user/{userId}/{establishmentId}/userPermission": {
      "get": {
        "tags": ["User Permission"],
        "summary": "Return a list of users permissions",
        "operationId": "findListUserPermission",
        "parameters": [
          {
            "name": "userPermissionId",
            "in": "query",
            "description": "User Permission Id (Equal)"
          },
          {
            "name": "userId",
            "in": "path",
            "description": "User Id",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          },
          {
            "name": "establishmentId",
            "in": "path",
            "description": "Establishment Id",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Zero-based page index (0..N)",
            "required": false,
            "schema": { "minimum": 0, "type": "integer", "default": 0 }
          },
          {
            "name": "size",
            "in": "query",
            "description": "The size of the page to be returned",
            "required": false,
            "schema": { "minimum": 1, "type": "integer", "default": 20 }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
            "required": false,
            "schema": { "type": "array", "items": { "type": "string" } }
          }
        ],
        "responses": {
          "200": {
            "description": "Found zero or more results",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/PageUserPermission" }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["User Permission"],
        "summary": "Insert new permission to user",
        "operationId": "insertUserPermission",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "User Id",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          },
          {
            "name": "establishmentId",
            "in": "path",
            "description": "Establishment Id",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          }
        ],
        "requestBody": {
          "description": "User permission to insert",
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/UserPermissionDto" }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "User permission inserted",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/UserPermission" }
              }
            }
          }
        }
      }
    },
    "/api/user/{userId}/{establishmentId}/monthWorkDay": {
      "get": {
        "tags": ["Month Work Day"],
        "summary": "Return a list of month work day",
        "operationId": "findList_10",
        "parameters": [
          {
            "name": "monthWorkDayId",
            "in": "query",
            "description": "Month Work Day Id (Equal)"
          },
          {
            "name": "userEmployeeId",
            "in": "query",
            "description": "User Employee Id (Equal)"
          },
          { "name": "day", "in": "query", "description": "Day (Equal)" },
          {
            "name": "dayGreater",
            "in": "query",
            "description": "Day (GreaterThanOrEqual)"
          },
          {
            "name": "dayLess",
            "in": "query",
            "description": "Day (LessThanOrEqual)"
          },
          {
            "name": "userId",
            "in": "path",
            "description": "User Id (Equal)",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          },
          {
            "name": "establishmentId",
            "in": "path",
            "description": "Establishment Id (Equal)",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Zero-based page index (0..N)",
            "required": false,
            "schema": { "minimum": 0, "type": "integer", "default": 0 }
          },
          {
            "name": "size",
            "in": "query",
            "description": "The size of the page to be returned",
            "required": false,
            "schema": { "minimum": 1, "type": "integer", "default": 20 }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
            "required": false,
            "schema": { "type": "array", "items": { "type": "string" } }
          }
        ],
        "responses": {
          "200": {
            "description": "Found zero or more results",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/PageMonthWorkDay" }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["Month Work Day"],
        "summary": "Create new month work day",
        "operationId": "insert_2",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "User Id",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          },
          {
            "name": "establishmentId",
            "in": "path",
            "description": "Establishment Id",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          }
        ],
        "requestBody": {
          "description": "Month work day to create",
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/MonthWorkDayDto" }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Month work day created",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/MonthWorkDay" }
              }
            }
          }
        }
      }
    },
    "/api/user/{userId}/{establishmentId}/monthWorkDay/replicate/{yearMonth}/{userIdDestination}": {
      "post": {
        "tags": ["Month Work Day"],
        "summary": "Replicate configuration between users",
        "description": "Replicate configuration from one user to another. Will remove old configuration if any, for given month",
        "operationId": "replicateConfigurationByUser",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "User Id",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          },
          {
            "name": "establishmentId",
            "in": "path",
            "description": "Establishment Id",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          },
          {
            "name": "userIdDestination",
            "in": "path",
            "description": "User Id Destination",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          },
          {
            "name": "yearMonth",
            "in": "path",
            "description": "Year Month",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "User calendar replicated",
            "content": {
              "application/json": { "schema": { "type": "object" } }
            }
          }
        }
      }
    },
    "/api/user/{userId}/{establishmentId}/monthWorkDay/defaultWorkDay/{yearMonth}": {
      "post": {
        "tags": ["Month Work Day"],
        "summary": "Release schedule for user, for the month informed",
        "description": "From the month/year sent by parameter, it will generate the user's working days\n\n- Deletes the sent month/year configuration;\n- Search the working hours of the establishment;\n- Regenerates the user's working days for the month/year in question",
        "operationId": "insertDefaultMonthWork",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "User Id",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          },
          {
            "name": "establishmentId",
            "in": "path",
            "description": "Establishment Id",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          },
          {
            "name": "yearMonth",
            "in": "path",
            "description": "Year Month",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "201": {
            "description": "Default Month work day regenerated",
            "content": {
              "application/json": { "schema": { "type": "object" } }
            }
          }
        }
      }
    },
    "/api/user/{userId}/{establishmentId}/monthWorkDay/defaultWorkDay/{initDate}/{finishDate}": {
      "post": {
        "tags": ["Month Work Day"],
        "summary": "Release schedule for user, for the date range informed",
        "description": "From the initial/final date sent by parameter, it generates the user's working days that are missing (not yet generated)\n\n- Search the working hours of the establishment;\n- Generates the user's remaining working days for the submitted date range",
        "operationId": "insertDefaultMonthWork_1",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "User Id",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          },
          {
            "name": "establishmentId",
            "in": "path",
            "description": "Establishment Id",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          },
          {
            "name": "initDate",
            "in": "path",
            "description": "Init Date",
            "required": true,
            "schema": { "type": "string", "format": "date" }
          },
          {
            "name": "finishDate",
            "in": "path",
            "description": "Finish Date",
            "required": true,
            "schema": { "type": "string", "format": "date" }
          }
        ],
        "responses": {
          "201": {
            "description": "Default Month work day created",
            "content": {
              "application/json": { "schema": { "type": "object" } }
            }
          }
        }
      }
    },
    "/api/user/{userId}/{establishmentId}/monthWorkDay/block/{yearMonth}": {
      "post": {
        "tags": ["Month Work Day"],
        "summary": "Block user calendar release by month/year",
        "description": "Block working days released for the user from the month/year sent by parameter",
        "operationId": "blockMonthWork",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "User Id",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          },
          {
            "name": "establishmentId",
            "in": "path",
            "description": "Establishment Id",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          },
          {
            "name": "yearMonth",
            "in": "path",
            "description": "Year Month",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "User calendar release",
            "content": {
              "application/json": { "schema": { "type": "object" } }
            }
          }
        }
      }
    },
    "/api/user/{userId}/{establishmentId}/monthWorkDay/block/{initDate}/{finishDate}": {
      "post": {
        "tags": ["Month Work Day"],
        "summary": "Block user calendar release by range date",
        "description": "Block working days released for the user from the range date sent by parameter",
        "operationId": "blockMonthWorkByRangeDate",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "User Id",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          },
          {
            "name": "establishmentId",
            "in": "path",
            "description": "Establishment Id",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          },
          {
            "name": "initDate",
            "in": "path",
            "description": "Init Date",
            "required": true,
            "schema": { "type": "string", "format": "date" }
          },
          {
            "name": "finishDate",
            "in": "path",
            "description": "Finish Date",
            "required": true,
            "schema": { "type": "string", "format": "date" }
          }
        ],
        "responses": {
          "200": {
            "description": "User calendar release",
            "content": {
              "application/json": { "schema": { "type": "object" } }
            }
          }
        }
      }
    },
    "/api/user/{userId}/{establishmentId}/defaultWorkSched": {
      "post": {
        "tags": ["Work Hour Schedule Info"],
        "summary": "Generate Employee Work Time",
        "description": "Cancel all work time existing of the user and generate new, based on establishment work hour",
        "operationId": "generateEmployeeWorkTime",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "User Id",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          },
          {
            "name": "establishmentId",
            "in": "path",
            "description": "Establishment Id",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          }
        ],
        "responses": { "200": { "description": "Generated successfully" } }
      }
    },
    "/api/user/{userId}/userService": {
      "get": {
        "tags": ["User Service"],
        "summary": "List user services related an establishment",
        "operationId": "findListUserServiceDomain",
        "parameters": [
          {
            "name": "serviceId",
            "in": "query",
            "description": "Service Id (Equal)"
          },
          {
            "name": "name",
            "in": "query",
            "description": "Name (LikeIgnoreCase)"
          },
          {
            "name": "situationType",
            "in": "query",
            "description": "Situation Type (In)",
            "schema": { "type": "string", "enum": ["ACTIVE", "CANCELED"] }
          },
          {
            "name": "categoryId",
            "in": "query",
            "description": "Category Id (Equal)"
          },
          {
            "name": "userId",
            "in": "path",
            "description": "User Id",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Zero-based page index (0..N)",
            "required": false,
            "schema": { "minimum": 0, "type": "integer", "default": 0 }
          },
          {
            "name": "size",
            "in": "query",
            "description": "The size of the page to be returned",
            "required": false,
            "schema": { "minimum": 1, "type": "integer", "default": 20 }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
            "required": false,
            "schema": { "type": "array", "items": { "type": "string" } }
          }
        ],
        "responses": {
          "200": {
            "description": "Found zero or more results",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PageUserServiceDomain"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["User Service"],
        "summary": "Add new service to a user",
        "operationId": "insertUserServiceDomain",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "User Id",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          }
        ],
        "requestBody": {
          "description": "Service to insert",
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/UserServiceDomainDto" }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Service inserted",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/UserServiceDomain" }
              }
            }
          }
        }
      }
    },
    "/api/user/{establishmentId}/{userId}/telephone": {
      "get": {
        "tags": ["User Telephone"],
        "summary": "Return a list of user telephone",
        "operationId": "findList_12",
        "parameters": [
          {
            "name": "userTelephoneId",
            "in": "query",
            "description": "User Telephone Id (Equal)"
          },
          {
            "name": "telephone",
            "in": "query",
            "description": "telephone (Like)"
          },
          {
            "name": "situationType",
            "in": "query",
            "description": "Situation Type (In)",
            "schema": { "type": "string", "enum": ["ACTIVE", "CANCELED"] }
          },
          {
            "name": "verificationType",
            "in": "query",
            "description": "Verification Type (In)",
            "schema": { "type": "string", "enum": ["NOT_VERIFIED", "VERIFIED"] }
          },
          {
            "name": "userId",
            "in": "path",
            "description": "User Id",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          },
          {
            "name": "establishmentId",
            "in": "path",
            "description": "Establishment Id",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Zero-based page index (0..N)",
            "required": false,
            "schema": { "minimum": 0, "type": "integer", "default": 0 }
          },
          {
            "name": "size",
            "in": "query",
            "description": "The size of the page to be returned",
            "required": false,
            "schema": { "minimum": 1, "type": "integer", "default": 20 }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
            "required": false,
            "schema": { "type": "array", "items": { "type": "string" } }
          }
        ],
        "responses": {
          "200": {
            "description": "Found zero or more results",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/PageUserTelephone" }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["User Telephone"],
        "summary": "insert new telephone to a user",
        "operationId": "insert_3",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "User Id",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          },
          {
            "name": "establishmentId",
            "in": "path",
            "description": "Establishment Id",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          }
        ],
        "requestBody": {
          "description": "Telephone to insert",
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/UserTelephoneDto" }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Telephone inserted",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/UserTelephone" }
              }
            }
          }
        }
      }
    },
    "/api/user/{establishmentId}/{userId}/lock": {
      "get": {
        "tags": ["User Lock"],
        "summary": "Return a list of user lock by establishment",
        "operationId": "findList_13",
        "parameters": [
          {
            "name": "userLockId",
            "in": "query",
            "description": "User Lock Id (Equal)"
          },
          {
            "name": "lockedUserId",
            "in": "query",
            "description": "Locked User Id (Equal)"
          },
          {
            "name": "manualLockUserId",
            "in": "query",
            "description": "Manual Lock User Id (Equal)"
          },
          {
            "name": "lockedAtGreater",
            "in": "query",
            "description": "Locked At Greater (GreaterThanOrEqual)"
          },
          {
            "name": "lockedAtLess",
            "in": "query",
            "description": "Locked At Less (LessThanOrEqual)"
          },
          {
            "name": "situationType",
            "in": "query",
            "description": "Situation Type (In)",
            "schema": { "type": "string", "enum": ["BLOCKED", "UNLOCKED"] }
          },
          {
            "name": "unlockUserId",
            "in": "query",
            "description": "Unlock User Id (Equal)"
          },
          {
            "name": "unlockAtGreater",
            "in": "query",
            "description": "Unlock At Greater (GreaterThanOrEqual)"
          },
          {
            "name": "unlockAtLess",
            "in": "query",
            "description": "Unlock At Less (LessThanOrEqual)"
          },
          {
            "name": "userId",
            "in": "path",
            "description": "User Id",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          },
          {
            "name": "establishmentId",
            "in": "path",
            "description": "Establishment Id",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Zero-based page index (0..N)",
            "required": false,
            "schema": { "minimum": 0, "type": "integer", "default": 0 }
          },
          {
            "name": "size",
            "in": "query",
            "description": "The size of the page to be returned",
            "required": false,
            "schema": { "minimum": 1, "type": "integer", "default": 20 }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
            "required": false,
            "schema": { "type": "array", "items": { "type": "string" } }
          }
        ],
        "responses": {
          "200": {
            "description": "Found zero or more results",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/PageUserLock" }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["User Lock"],
        "summary": "Block a user in an establishment",
        "operationId": "insert_4",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "User Id",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          },
          {
            "name": "establishmentId",
            "in": "path",
            "description": "Establishment Id",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          }
        ],
        "requestBody": {
          "description": "Lock to insert",
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/UserLockDto" }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Lock inserted",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/UserLock" }
              }
            }
          }
        }
      }
    },
    "/api/user/": {
      "post": {
        "tags": ["User"],
        "summary": "Insert new user",
        "operationId": "insert_5",
        "parameters": [],
        "requestBody": {
          "description": "User to insert",
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/UserDto" }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "User inserted",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/User" }
              }
            }
          }
        }
      }
    },
    "/api/user/{establishmentId}": {
      "get": {
        "tags": ["User"],
        "summary": "Return a list of users",
        "operationId": "findList_11",
        "parameters": [
          { "name": "userId", "in": "query", "description": "User Id (Equal)" },
          {
            "name": "name",
            "in": "query",
            "description": "Name (LikeIgnoreCase)"
          },
          {
            "name": "email",
            "in": "query",
            "description": "Email (LikeIgnoreCase)"
          },
          {
            "name": "telephone",
            "in": "query",
            "description": "Telephone (LikeIgnoreCase)"
          },
          {
            "name": "situationType",
            "in": "query",
            "description": "Situation Type (In)",
            "schema": {
              "type": "string",
              "enum": ["IN_REGISTRATION", "ACTIVE", "CANCELED"]
            }
          },
          {
            "name": "establishmentId",
            "in": "path",
            "description": "Establishment Id",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Zero-based page index (0..N)",
            "required": false,
            "schema": { "minimum": 0, "type": "integer", "default": 0 }
          },
          {
            "name": "size",
            "in": "query",
            "description": "The size of the page to be returned",
            "required": false,
            "schema": { "minimum": 1, "type": "integer", "default": 20 }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
            "required": false,
            "schema": { "type": "array", "items": { "type": "string" } }
          }
        ],
        "responses": {
          "200": {
            "description": "Found zero or more results",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/PageUser" }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["User"],
        "summary": "Insert new user",
        "operationId": "insert_6",
        "parameters": [
          {
            "name": "establishmentId",
            "in": "path",
            "description": "Establishment Id",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          }
        ],
        "requestBody": {
          "description": "User to insert",
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/UserDto" }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "User inserted",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/User" }
              }
            }
          }
        }
      }
    },
    "/api/service/{serviceId}/serviceValue": {
      "get": {
        "tags": ["Service Value"],
        "summary": "Return a list of service values",
        "operationId": "findListServiceValue",
        "parameters": [
          {
            "name": "serviceValueId",
            "in": "query",
            "description": "Service Value Id (Equal)"
          },
          {
            "name": "situationType",
            "in": "query",
            "description": "Situation Type (In)",
            "schema": { "type": "string", "enum": ["ACTIVE", "CANCELED"] }
          },
          {
            "name": "serviceId",
            "in": "path",
            "description": "Service Id",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Zero-based page index (0..N)",
            "required": false,
            "schema": { "minimum": 0, "type": "integer", "default": 0 }
          },
          {
            "name": "size",
            "in": "query",
            "description": "The size of the page to be returned",
            "required": false,
            "schema": { "minimum": 1, "type": "integer", "default": 20 }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
            "required": false,
            "schema": { "type": "array", "items": { "type": "string" } }
          }
        ],
        "responses": {
          "200": {
            "description": "Found zero or more results",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/PageServiceValue" }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["Service Value"],
        "summary": "Add value to a service",
        "operationId": "insertServiceValue",
        "parameters": [
          {
            "name": "serviceId",
            "in": "path",
            "description": "Service Id",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          }
        ],
        "requestBody": {
          "description": "Value to add",
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/ServiceValueDto" }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Value added",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ServiceValue" }
              }
            }
          }
        }
      }
    },
    "/api/service/{serviceId}/serviceLink": {
      "get": {
        "tags": ["Service Link"],
        "summary": "Return a list of service links",
        "operationId": "findListServiceLink",
        "parameters": [
          {
            "name": "serviceLinkId",
            "in": "query",
            "description": "Service Link Id (Equal)"
          },
          {
            "name": "serviceId",
            "in": "path",
            "description": "Service Id",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Zero-based page index (0..N)",
            "required": false,
            "schema": { "minimum": 0, "type": "integer", "default": 0 }
          },
          {
            "name": "size",
            "in": "query",
            "description": "The size of the page to be returned",
            "required": false,
            "schema": { "minimum": 1, "type": "integer", "default": 20 }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
            "required": false,
            "schema": { "type": "array", "items": { "type": "string" } }
          }
        ],
        "responses": {
          "200": {
            "description": "Found zero or more results",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/PageServiceLink" }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["Service Link"],
        "summary": "Create a link between services",
        "operationId": "insertServiceLink",
        "parameters": [
          {
            "name": "serviceId",
            "in": "path",
            "description": "Service Id",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          }
        ],
        "requestBody": {
          "description": "Services to link",
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/ServiceLinkDto" }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Link created",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ServiceLink" }
              }
            }
          }
        }
      }
    },
    "/api/service/{establishmentId}": {
      "get": {
        "tags": ["Service"],
        "summary": "Return a list of services",
        "operationId": "findList_14",
        "parameters": [
          {
            "name": "serviceId",
            "in": "query",
            "description": "Service Id (Equal)"
          },
          {
            "name": "name",
            "in": "query",
            "description": "Name (LikeIgnoreCase)"
          },
          {
            "name": "situationType",
            "in": "query",
            "description": "Situation Type (In)",
            "schema": { "type": "string", "enum": ["ACTIVE", "CANCELED"] }
          },
          {
            "name": "categoryId",
            "in": "query",
            "description": "Category Id (Equal)"
          },
          {
            "name": "establishmentId",
            "in": "path",
            "description": "Establishment Id",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Zero-based page index (0..N)",
            "required": false,
            "schema": { "minimum": 0, "type": "integer", "default": 0 }
          },
          {
            "name": "size",
            "in": "query",
            "description": "The size of the page to be returned",
            "required": false,
            "schema": { "minimum": 1, "type": "integer", "default": 20 }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
            "required": false,
            "schema": { "type": "array", "items": { "type": "string" } }
          }
        ],
        "responses": {
          "200": {
            "description": "Found zero or more results",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/PageServiceDomain" }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["Service"],
        "summary": "Insert new service",
        "operationId": "insert_7",
        "parameters": [
          {
            "name": "establishmentId",
            "in": "path",
            "description": "Establishment Id",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          }
        ],
        "requestBody": {
          "description": "Service to insert",
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/ServiceDomainDto" }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Service inserted",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ServiceDomain" }
              }
            }
          }
        }
      }
    },
    "/api/service/{establishmentId}/category": {
      "get": {
        "tags": ["Service Category"],
        "summary": "Return a list of service category",
        "operationId": "findListCategory",
        "parameters": [
          {
            "name": "categoryId",
            "in": "query",
            "description": "Category Id (Equal)"
          },
          {
            "name": "situationType",
            "in": "query",
            "description": "Situation Type (In)",
            "schema": { "type": "string", "enum": ["ACTIVE", "CANCELED"] }
          },
          {
            "name": "establishmentId",
            "in": "path",
            "description": "Establishment Id",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Zero-based page index (0..N)",
            "required": false,
            "schema": { "minimum": 0, "type": "integer", "default": 0 }
          },
          {
            "name": "size",
            "in": "query",
            "description": "The size of the page to be returned",
            "required": false,
            "schema": { "minimum": 1, "type": "integer", "default": 20 }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
            "required": false,
            "schema": { "type": "array", "items": { "type": "string" } }
          }
        ],
        "responses": {
          "200": {
            "description": "Found zero or more results",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/PageCategory" }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["Service Category"],
        "summary": "Insert new category of services",
        "operationId": "insertCategory",
        "parameters": [
          {
            "name": "establishmentId",
            "in": "path",
            "description": "Establishment Id",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          }
        ],
        "requestBody": {
          "description": "Category to insert",
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/CategoryDto" }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Category inserted",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Category" }
              }
            }
          }
        }
      }
    },
    "/api/scheduling/{schedulingId}/service": {
      "get": {
        "tags": ["Scheduling Service"],
        "summary": "Return a list of services of a schedules",
        "operationId": "findList_15",
        "parameters": [
          {
            "name": "schedulingServiceId",
            "in": "query",
            "description": "Scheduling Service Id (Equal)"
          },
          {
            "name": "serviceId",
            "in": "query",
            "description": "Service Id (Equal)"
          },
          {
            "name": "serviceName",
            "in": "query",
            "description": "Service Name (LikeIgnoreCase)"
          },
          {
            "name": "situationType",
            "in": "query",
            "description": "Situation Type (In)",
            "schema": { "type": "string", "enum": ["ACTIVE", "CANCELED"] }
          },
          {
            "name": "schedulingId",
            "in": "path",
            "description": "Scheduling Id",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Zero-based page index (0..N)",
            "required": false,
            "schema": { "minimum": 0, "type": "integer", "default": 0 }
          },
          {
            "name": "size",
            "in": "query",
            "description": "The size of the page to be returned",
            "required": false,
            "schema": { "minimum": 1, "type": "integer", "default": 20 }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
            "required": false,
            "schema": { "type": "array", "items": { "type": "string" } }
          }
        ],
        "responses": {
          "200": {
            "description": "Found zero or more results",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PageSchedulingServiceDomain"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["Scheduling Service"],
        "summary": "Add a service at a scheduling",
        "operationId": "insert_8",
        "parameters": [
          {
            "name": "schedulingId",
            "in": "path",
            "description": "Scheduling Id",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          }
        ],
        "requestBody": {
          "description": "Service to add at a scheduling",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SchedulingServiceDomainDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Service added",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SchedulingServiceDomain"
                }
              }
            }
          }
        }
      }
    },
    "/api/scheduling/{establishmentId}": {
      "get": {
        "tags": ["Scheduling"],
        "summary": "Return a list of Schedules",
        "operationId": "findList_16",
        "parameters": [
          {
            "name": "schedulingId",
            "in": "query",
            "description": "Scheduling Id (Equal)"
          },
          {
            "name": "createdAt",
            "in": "query",
            "description": "Created At (Equal)"
          },
          {
            "name": "createdAtGreater",
            "in": "query",
            "description": "Created At (GreaterThanOrEqual)"
          },
          {
            "name": "createdAtLess",
            "in": "query",
            "description": "Created At (LessThanOrEqual)"
          },
          {
            "name": "beginIn",
            "in": "query",
            "description": "Begin In (Equal)"
          },
          {
            "name": "beginInGreater",
            "in": "query",
            "description": "Begin In (GreaterThanOrEqual)"
          },
          {
            "name": "beginInLess",
            "in": "query",
            "description": "Begin In (LessThanOrEqual)"
          },
          { "name": "endIn", "in": "query", "description": "End In (Equal)" },
          {
            "name": "endInGreater",
            "in": "query",
            "description": "End In (GreaterThanOrEqual)"
          },
          {
            "name": "endInLess",
            "in": "query",
            "description": "End In (LessThanOrEqual)"
          },
          {
            "name": "attendantUserId",
            "in": "query",
            "description": "Attendant User Id (Equal)"
          },
          {
            "name": "clientUserId",
            "in": "query",
            "description": "Client User Id (Equal)"
          },
          {
            "name": "clientName",
            "in": "query",
            "description": "Client Name (LikeIgnoreCase)"
          },
          {
            "name": "situationType",
            "in": "query",
            "description": "Situation Type (In)",
            "schema": {
              "type": "string",
              "enum": ["PRE_SCHEDULED", "SCHEDULED", "REFUSED", "CANCELED"]
            }
          },
          {
            "name": "observation",
            "in": "query",
            "description": "Observation (LikeIgnoreCase)"
          },
          {
            "name": "establishmentId",
            "in": "path",
            "description": "Establishment Id",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Zero-based page index (0..N)",
            "required": false,
            "schema": { "minimum": 0, "type": "integer", "default": 0 }
          },
          {
            "name": "size",
            "in": "query",
            "description": "The size of the page to be returned",
            "required": false,
            "schema": { "minimum": 1, "type": "integer", "default": 20 }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
            "required": false,
            "schema": { "type": "array", "items": { "type": "string" } }
          }
        ],
        "responses": {
          "200": {
            "description": "Found zero or more results",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PageSchedulingDomain"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["Scheduling"],
        "summary": "Insert new scheduling",
        "operationId": "insert_9",
        "parameters": [
          {
            "name": "establishmentId",
            "in": "path",
            "description": "Establishment Id",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          }
        ],
        "requestBody": {
          "description": "Scheduling to insert",
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/SchedulingDomainDto" }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Scheduling created",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/SchedulingDomain" }
              }
            }
          }
        }
      }
    },
    "/api/public/establishment/scheduling/{establishmentId}": {
      "post": {
        "tags": ["Public"],
        "summary": "Schedule new service",
        "operationId": "addScheduling",
        "parameters": [
          {
            "name": "establishmentId",
            "in": "path",
            "description": "Establishment Id",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          }
        ],
        "requestBody": {
          "description": "Schedule to create",
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/PublicSchedulingDto" }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Schedule created",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/SchedulingDomain" }
              }
            }
          }
        },
        "security": []
      }
    },
    "/api/establishment": {
      "get": {
        "tags": ["Establishment"],
        "summary": "Return a list of establishments",
        "operationId": "findList_17",
        "parameters": [
          {
            "name": "establishmentId",
            "in": "query",
            "description": "Establishment Id (Equal)"
          },
          {
            "name": "name",
            "in": "query",
            "description": "Name (LikeIgnoreCase)"
          },
          {
            "name": "publicIdentifier",
            "in": "query",
            "description": "Public Identifier (LikeIgnoreCase)"
          },
          {
            "name": "clientName",
            "in": "query",
            "description": "Client Name (LikeIgnoreCase)"
          },
          {
            "name": "responsibleUserId",
            "in": "query",
            "description": "Responsible User Id (Equal)"
          },
          {
            "name": "responsibleUserName",
            "in": "query",
            "description": "Responsible User Name (LikeIgnoreCase)"
          },
          {
            "name": "situationType",
            "in": "query",
            "description": "Situation Type (In)",
            "schema": { "type": "string", "enum": ["ACTIVE", "CANCELED"] }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Zero-based page index (0..N)",
            "required": false,
            "schema": { "minimum": 0, "type": "integer", "default": 0 }
          },
          {
            "name": "size",
            "in": "query",
            "description": "The size of the page to be returned",
            "required": false,
            "schema": { "minimum": 1, "type": "integer", "default": 20 }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
            "required": false,
            "schema": { "type": "array", "items": { "type": "string" } }
          }
        ],
        "responses": {
          "200": {
            "description": "Found zero or more results",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/PageEstablishment" }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["Establishment"],
        "summary": "Create new establishment",
        "operationId": "insert_10",
        "requestBody": {
          "description": "Establishment to create",
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/EstablishmentDto" }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Establishment created",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Establishment" }
              }
            }
          }
        }
      }
    },
    "/api/establishment/{establishmentId}/workDayDefault": {
      "get": {
        "tags": ["Work Day Default"],
        "summary": "Return a list of work day default of establishment",
        "operationId": "findList_18",
        "parameters": [
          {
            "name": "establishmentId",
            "in": "path",
            "description": "Establishment Id",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          }
        ],
        "responses": {
          "200": {
            "description": "Found zero or more results",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/WorkDayDefaultProjection"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["Work Day Default"],
        "summary": "Insert new default workday to establishment",
        "operationId": "insert_11",
        "parameters": [
          {
            "name": "establishmentId",
            "in": "path",
            "description": "Establishment Id",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          }
        ],
        "requestBody": {
          "description": "Workday to insert",
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/WorkDayDefaultDto" }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Workday inserted",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/WorkDayDefault" }
              }
            }
          }
        }
      }
    },
    "/api/auth/newUser": {
      "post": {
        "tags": ["Auth"],
        "summary": "Create new user",
        "operationId": "newUser",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/UserCredentialsDto" }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "New user created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserAuthenticatedResponseDto"
                }
              }
            }
          }
        },
        "security": []
      }
    },
    "/api/auth/login": {
      "post": {
        "tags": ["Auth"],
        "summary": "Login",
        "operationId": "login",
        "requestBody": {
          "description": "Login",
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/UserCredentialsDto" }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Logged with success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserAuthenticatedResponseDto"
                }
              }
            }
          },
          "401": {
            "description": "Bad Credentials",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserAuthenticatedResponseDto"
                }
              }
            }
          }
        },
        "security": []
      }
    },
    "/api/attendance/{establishmentId}": {
      "get": {
        "tags": ["Attendance"],
        "summary": "Return a list of attendance",
        "operationId": "findList_19",
        "parameters": [
          {
            "name": "attendanceId",
            "in": "query",
            "description": "Attendance Id (Equal)"
          },
          {
            "name": "clientId",
            "in": "query",
            "description": "Client Id (Equal)"
          },
          {
            "name": "clientName",
            "in": "query",
            "description": "Client Name (LikeIgnoreCase)"
          },
          {
            "name": "situationType",
            "in": "query",
            "description": "Situation Type (In)",
            "schema": {
              "type": "string",
              "enum": [
                "ACTIVE",
                "PARTIALLY_ANSWERED",
                "CONCLUDED",
                "ABSENT",
                "CANCELED"
              ]
            }
          },
          {
            "name": "beginInGreater",
            "in": "query",
            "description": "Begin In (GreaterThanOrEqual)"
          },
          {
            "name": "beginInLess",
            "in": "query",
            "description": "Begin In (LessThanOrEqual)"
          },
          {
            "name": "endInGreater",
            "in": "query",
            "description": "End In (GreaterThanOrEqual)"
          },
          {
            "name": "endInLess",
            "in": "query",
            "description": "End In (LessThanOrEqual)"
          },
          {
            "name": "establishmentId",
            "in": "path",
            "description": "Logged Establishment Id (Equal)",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Zero-based page index (0..N)",
            "required": false,
            "schema": { "minimum": 0, "type": "integer", "default": 0 }
          },
          {
            "name": "size",
            "in": "query",
            "description": "The size of the page to be returned",
            "required": false,
            "schema": { "minimum": 1, "type": "integer", "default": 20 }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
            "required": false,
            "schema": { "type": "array", "items": { "type": "string" } }
          }
        ],
        "responses": {
          "200": {
            "description": "Found zero or more results",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PageAttendanceDomain"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["Attendance"],
        "summary": "Create new attendance",
        "operationId": "insert_12",
        "parameters": [
          {
            "name": "establishmentId",
            "in": "path",
            "description": "Logged Establishment Id",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          }
        ],
        "requestBody": {
          "description": "Attendance to create",
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/AttendanceDomainDto" }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Attendance created",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/AttendanceDomain" }
              }
            }
          }
        }
      }
    },
    "/api/attendance/{attendanceId}/service": {
      "get": {
        "tags": ["Attendance Service"],
        "summary": "Return a list of services of an attendance",
        "operationId": "findListAttendanceService",
        "parameters": [
          {
            "name": "attendanceId",
            "in": "path",
            "description": "Attendance Id (Equal)",
            "required": true
          },
          {
            "name": "serviceId",
            "in": "query",
            "description": "Service Id (Equal)"
          },
          {
            "name": "schedulingServiceId",
            "in": "query",
            "description": "Scheduling Service Id (Equal)"
          },
          {
            "name": "situationType",
            "in": "query",
            "description": "Situation Type (In)",
            "schema": { "type": "string", "enum": ["ACTIVE", "CANCELED"] }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Zero-based page index (0..N)",
            "required": false,
            "schema": { "minimum": 0, "type": "integer", "default": 0 }
          },
          {
            "name": "size",
            "in": "query",
            "description": "The size of the page to be returned",
            "required": false,
            "schema": { "minimum": 1, "type": "integer", "default": 20 }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
            "required": false,
            "schema": { "type": "array", "items": { "type": "string" } }
          }
        ],
        "responses": {
          "200": {
            "description": "Found zero or more results",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PageAttendanceServiceDomain"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["Attendance Service"],
        "summary": "Add new service to an attendance",
        "operationId": "insertAttendanceService",
        "parameters": [
          {
            "name": "attendanceId",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AttendanceServiceDomainDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Service added to attendance",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AttendanceServiceDomain"
                }
              }
            }
          }
        }
      }
    },
    "/api/wa/{establishmentId}/account/msg/model": {
      "get": {
        "tags": ["Wa Msg Model Account"],
        "summary": "Return a list of wa msg model account",
        "operationId": "findList_2",
        "parameters": [
          {
            "name": "waMsgModelAccountId",
            "in": "query",
            "description": "Wa Msg Model Account Id (Equal)"
          },
          {
            "name": "waMsgModelId",
            "in": "query",
            "description": "Wa Msg Model Id (Equal)"
          },
          {
            "name": "waAccountId",
            "in": "query",
            "description": "Wa Account Id (Equal)"
          },
          {
            "name": "situationType",
            "in": "query",
            "description": "Situation Type (In)",
            "schema": { "type": "string", "enum": ["ACTIVE", "CANCELLED"] }
          },
          {
            "name": "establishmentId",
            "in": "path",
            "description": "Establishment Id",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Zero-based page index (0..N)",
            "required": false,
            "schema": { "minimum": 0, "type": "integer", "default": 0 }
          },
          {
            "name": "size",
            "in": "query",
            "description": "The size of the page to be returned",
            "required": false,
            "schema": { "minimum": 1, "type": "integer", "default": 20 }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
            "required": false,
            "schema": { "type": "array", "items": { "type": "string" } }
          }
        ],
        "responses": {
          "200": {
            "description": "Found zero or more results",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PageWaMsgModelAccount"
                }
              }
            }
          }
        }
      }
    },
    "/api/wa/{establishmentId}/account/msg/model/{waMsgModelAccountId}": {
      "get": {
        "tags": ["Wa Msg Model Account"],
        "summary": "Return an unique wa msg model account",
        "operationId": "findById_2",
        "parameters": [
          {
            "name": "establishmentId",
            "in": "path",
            "description": "Establishment Id",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          },
          {
            "name": "waMsgModelAccountId",
            "in": "path",
            "description": "Wa Msg Model Account Id",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/WaMsgModelAccount" }
              }
            }
          }
        }
      }
    },
    "/api/wa/{establishmentId}/account/msg/list": {
      "get": {
        "tags": ["Whatsapp Msg List Account"],
        "summary": "Return a list of whatsapp msg list account",
        "operationId": "findList_3",
        "parameters": [
          {
            "name": "waMsgModelAccountId",
            "in": "query",
            "description": "Whatsapp Msg Model Account Id (Equal)"
          },
          {
            "name": "waMsgModelId",
            "in": "query",
            "description": "Whatsapp msg model id (Equal)"
          },
          {
            "name": "waAccountId",
            "in": "query",
            "description": "Whatsapp Account Id (LikeIgnoreCase)"
          },
          {
            "name": "establishmentId",
            "in": "path",
            "description": "Establishment Id",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Zero-based page index (0..N)",
            "required": false,
            "schema": { "minimum": 0, "type": "integer", "default": 0 }
          },
          {
            "name": "size",
            "in": "query",
            "description": "The size of the page to be returned",
            "required": false,
            "schema": { "minimum": 1, "type": "integer", "default": 20 }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
            "required": false,
            "schema": { "type": "array", "items": { "type": "string" } }
          }
        ],
        "responses": {
          "200": {
            "description": "Found zero or more results",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PageWaMsgListAccount"
                }
              }
            }
          }
        }
      }
    },
    "/api/wa/{establishmentId}/account/msg/interactive": {
      "get": {
        "tags": ["Wa Msg Interactive Account"],
        "summary": "Return a list of wa msg interactive account",
        "operationId": "findList_4",
        "parameters": [
          {
            "name": "waMsgInteractiveAccountId",
            "in": "query",
            "description": "Wa Msg Interactive Account Id (Equal)"
          },
          {
            "name": "title",
            "in": "query",
            "description": "Title (LikeIgnoreCase)"
          },
          {
            "name": "waAccountId",
            "in": "query",
            "description": "Wa Account Id (Equal)"
          },
          {
            "name": "situationType",
            "in": "query",
            "description": "Situation Type (In)",
            "schema": { "type": "string", "enum": ["ACTIVE", "CANCELLED"] }
          },
          {
            "name": "isDefaultType",
            "in": "query",
            "description": "Is Default Type (In)",
            "schema": { "type": "string", "enum": ["YES", "NO"] }
          },
          {
            "name": "establishmentId",
            "in": "path",
            "description": "Establishment Id",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Zero-based page index (0..N)",
            "required": false,
            "schema": { "minimum": 0, "type": "integer", "default": 0 }
          },
          {
            "name": "size",
            "in": "query",
            "description": "The size of the page to be returned",
            "required": false,
            "schema": { "minimum": 1, "type": "integer", "default": 20 }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
            "required": false,
            "schema": { "type": "array", "items": { "type": "string" } }
          }
        ],
        "responses": {
          "200": {
            "description": "Found zero or more results",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PageWaMsgInteractiveAccount"
                }
              }
            }
          }
        }
      }
    },
    "/api/wa/{establishmentId}/account/msg/interactive/{waMsgInteractiveAccountId}": {
      "get": {
        "tags": ["Wa Msg Interactive Account"],
        "summary": "Return an unique wa msg interactive account",
        "operationId": "findById_4",
        "parameters": [
          {
            "name": "establishmentId",
            "in": "path",
            "description": "Establishment Id",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          },
          {
            "name": "waMsgInteractiveAccountId",
            "in": "path",
            "description": "Wa Msg Interactive Account Id",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WaMsgInteractiveAccount"
                }
              }
            }
          }
        }
      }
    },
    "/api/wa/{establishmentId}/account/msg/button": {
      "get": {
        "tags": ["Whatsapp Msg Button Account"],
        "summary": "Return a list of whatsapp msg button account",
        "operationId": "findList_5",
        "parameters": [
          {
            "name": "waMsgModelAccountId",
            "in": "query",
            "description": "Whatsapp Msg Model Account Id (Equal)"
          },
          {
            "name": "waMsgModelId",
            "in": "query",
            "description": "Whatsapp msg model id (Equal)"
          },
          {
            "name": "waAccountId",
            "in": "query",
            "description": "Whatsapp Account Id (LikeIgnoreCase)"
          },
          {
            "name": "establishmentId",
            "in": "path",
            "description": "Establishment Id",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Zero-based page index (0..N)",
            "required": false,
            "schema": { "minimum": 0, "type": "integer", "default": 0 }
          },
          {
            "name": "size",
            "in": "query",
            "description": "The size of the page to be returned",
            "required": false,
            "schema": { "minimum": 1, "type": "integer", "default": 20 }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
            "required": false,
            "schema": { "type": "array", "items": { "type": "string" } }
          }
        ],
        "responses": {
          "200": {
            "description": "Found zero or more results",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PageWaMsgButtonAccount"
                }
              }
            }
          }
        }
      }
    },
    "/api/wa/msg/model": {
      "get": {
        "tags": ["Wa Msg Model"],
        "summary": "Return a list of wa msg interactive",
        "operationId": "findList_6",
        "parameters": [
          {
            "name": "waMsgModelId",
            "in": "query",
            "description": "Wa Msg Model Id (Equal)"
          },
          {
            "name": "waAccountId",
            "in": "query",
            "description": "Wa Account Id (Equal)"
          },
          {
            "name": "name",
            "in": "query",
            "description": "Name (LikeIgnoreCase)"
          },
          {
            "name": "finality",
            "in": "query",
            "description": "Finality (In)",
            "schema": {
              "type": "string",
              "enum": [
                "ACCOUNT_CONFIRMATION",
                "SCHEDULING_CONFIRMATION",
                "STARTED_BY_USER"
              ]
            }
          },
          {
            "name": "situationType",
            "in": "query",
            "description": "Situation Type (In)",
            "schema": {
              "type": "string",
              "enum": ["ACTIVE", "BLOCKED", "CANCELED"]
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Zero-based page index (0..N)",
            "required": false,
            "schema": { "minimum": 0, "type": "integer", "default": 0 }
          },
          {
            "name": "size",
            "in": "query",
            "description": "The size of the page to be returned",
            "required": false,
            "schema": { "minimum": 1, "type": "integer", "default": 20 }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
            "required": false,
            "schema": { "type": "array", "items": { "type": "string" } }
          }
        ],
        "responses": {
          "200": {
            "description": "Found zero or more results",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/PageWaMsgModel" }
              }
            }
          }
        }
      }
    },
    "/api/wa/msg/model/{waMsgModelId}": {
      "get": {
        "tags": ["Wa Msg Model"],
        "summary": "Return an unique wa msg interactive",
        "operationId": "findById_6",
        "parameters": [
          {
            "name": "waMsgModelId",
            "in": "path",
            "description": "Wa Msg Model Id",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/WaMsgModel" }
              }
            }
          }
        }
      }
    },
    "/api/wa/msg/list": {
      "get": {
        "tags": ["Whatsapp Msg List"],
        "summary": "Return a list of message list",
        "operationId": "findList_7",
        "parameters": [
          {
            "name": "waMsgListId",
            "in": "query",
            "description": "Whatsapp Msg List Id (Equal)"
          },
          {
            "name": "uniqueId",
            "in": "query",
            "description": "Unique Id (LikeIgnoreCase)"
          },
          {
            "name": "title",
            "in": "query",
            "description": "Title (LikeIgnoreCase)"
          },
          {
            "name": "grouper",
            "in": "query",
            "description": "Grouper (LikeIgnoreCase)"
          },
          {
            "name": "buttonText",
            "in": "query",
            "description": "Button Text (LikeIgnoreCase)"
          },
          {
            "name": "waMsgInteractiveId",
            "in": "query",
            "description": "Wa Msg Interactive Id (Equal)"
          }
        ],
        "responses": {
          "200": {
            "description": "Found zero or more results",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { "$ref": "#/components/schemas/WaMsgList" }
                }
              }
            }
          }
        }
      }
    },
    "/api/wa/msg/list/{waMsgListId}": {
      "get": {
        "tags": ["Whatsapp Msg List"],
        "summary": "Return an unique message list",
        "operationId": "findById_7",
        "parameters": [
          {
            "name": "waMsgListId",
            "in": "path",
            "description": "Whatsapp Msg Button Id",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/WaMsgList" }
              }
            }
          }
        }
      }
    },
    "/api/wa/msg/interactive": {
      "get": {
        "tags": ["Wa Msg Interactive"],
        "summary": "Return a list of wa msg interactive",
        "operationId": "findList_8",
        "parameters": [
          {
            "name": "waMsgInteractiveId",
            "in": "query",
            "description": "Wa Msg Interactive Id (Equal)"
          },
          {
            "name": "defaultTitle",
            "in": "query",
            "description": "Default Title (LikeIgnoreCase)"
          },
          {
            "name": "defaultBody",
            "in": "query",
            "description": "Default Body (LikeIgnoreCase)"
          },
          {
            "name": "defaultFooter",
            "in": "query",
            "description": "Default Footer (LikeIgnoreCase)"
          },
          {
            "name": "queueName",
            "in": "query",
            "description": "Queue Name (LikeIgnoreCase)"
          },
          {
            "name": "interactiveType",
            "in": "query",
            "description": "Interactive Type (In)",
            "schema": {
              "type": "string",
              "enum": ["TEXT", "BUTTON", "LIST", "PRODUCT", "PRODUCT_LIST"]
            }
          },
          {
            "name": "situationType",
            "in": "query",
            "description": "Situation Type (In)",
            "schema": { "type": "string", "enum": ["ACTIVE", "CANCELLED"] }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Zero-based page index (0..N)",
            "required": false,
            "schema": { "minimum": 0, "type": "integer", "default": 0 }
          },
          {
            "name": "size",
            "in": "query",
            "description": "The size of the page to be returned",
            "required": false,
            "schema": { "minimum": 1, "type": "integer", "default": 20 }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
            "required": false,
            "schema": { "type": "array", "items": { "type": "string" } }
          }
        ],
        "responses": {
          "200": {
            "description": "Found zero or more results",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PageWaMsgInteractive"
                }
              }
            }
          }
        }
      }
    },
    "/api/wa/msg/interactive/{waMsgInteractiveId}": {
      "get": {
        "tags": ["Wa Msg Interactive"],
        "summary": "Return an unique wa msg interactive",
        "operationId": "findById_8",
        "parameters": [
          {
            "name": "waMsgInteractiveId",
            "in": "path",
            "description": "Wa Msg Interactive Id",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/WaMsgInteractive" }
              }
            }
          }
        }
      }
    },
    "/api/wa/msg/button": {
      "get": {
        "tags": ["Whatsapp Msg Button"],
        "summary": "Return a list of message button",
        "operationId": "findList_9",
        "parameters": [
          {
            "name": "waMsgButtonId",
            "in": "query",
            "description": "Whatsapp Msg Button Id (Equal)"
          },
          {
            "name": "uniqueId",
            "in": "query",
            "description": "Unique Id (LikeIgnoreCase)"
          },
          {
            "name": "title",
            "in": "query",
            "description": "Title (LikeIgnoreCase)"
          },
          {
            "name": "buttonType",
            "in": "query",
            "description": "Button Type (In)",
            "schema": { "type": "string", "enum": ["REPLY"] }
          },
          {
            "name": "waMsgInteractiveId",
            "in": "query",
            "description": "Wa Msg Interactive Id (Equal)"
          }
        ],
        "responses": {
          "200": {
            "description": "Found zero or more results",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { "$ref": "#/components/schemas/WaMsgButton" }
                }
              }
            }
          }
        }
      }
    },
    "/api/wa/msg/button/{waMsgButtonId}": {
      "get": {
        "tags": ["Whatsapp Msg Button"],
        "summary": "Return an unique message button",
        "operationId": "findById_9",
        "parameters": [
          {
            "name": "waMsgButtonId",
            "in": "path",
            "description": "Whatsapp Msg Button Id",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/WaMsgButton" }
              }
            }
          }
        }
      }
    },
    "/api/user/{userId}/{establishmentId}/workHourSchedException/{workHourSchedExceptionId}": {
      "get": {
        "tags": ["Work Hour Schedule Exception"],
        "summary": "Return an unique Work Hour Schedule Exception",
        "operationId": "findByIdWorkHourSchedException",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "User Id",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          },
          {
            "name": "establishmentId",
            "in": "path",
            "description": "Establishment Id",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          },
          {
            "name": "workHourSchedExceptionId",
            "in": "path",
            "description": "Work Hour Schedule Exception Id",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          }
        ],
        "responses": {
          "200": {
            "description": "Work hour schedule exception found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WorkHourSchedException"
                }
              }
            }
          },
          "404": {
            "description": "Work hour schedule exception not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WorkHourSchedException"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["Work Hour Schedule Exception"],
        "summary": "Delete a work hour schedule exception",
        "operationId": "deleteWorkHourSchedException",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "User Id",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          },
          {
            "name": "establishmentId",
            "in": "path",
            "description": "Establishment Id",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          },
          {
            "name": "workHourSchedExceptionId",
            "in": "path",
            "description": "Work Hour Schedule Exception Id",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          }
        ],
        "responses": {
          "200": { "description": "Work hour schedule exception deleted" }
        }
      }
    },
    "/api/user/{userId}/{establishmentId}/workDay/user": {
      "get": {
        "tags": ["Workday"],
        "summary": "Return a list of user workday by establishment",
        "operationId": "findListUserWorkDay",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "User Id",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          },
          {
            "name": "establishmentId",
            "in": "path",
            "description": "Establishment Id",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          }
        ],
        "responses": {
          "200": {
            "description": "Found zero or more results",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/WorkDayUserProjection"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/user/{userId}/{establishmentId}/userPermission/{userPermissionId}": {
      "get": {
        "tags": ["User Permission"],
        "summary": "Return an unique User Permission",
        "operationId": "findByIdUserPermission",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "User Id",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          },
          {
            "name": "establishmentId",
            "in": "path",
            "description": "Establishment Id",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          },
          {
            "name": "userPermissionId",
            "in": "path",
            "description": "User Permission Id",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          }
        ],
        "responses": {
          "200": {
            "description": "User permission found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/UserPermission" }
              }
            }
          },
          "404": {
            "description": "User permission not found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/UserPermission" }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["User Permission"],
        "summary": "Delete permission from an user",
        "operationId": "deleteUserPermission",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "User Id",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          },
          {
            "name": "establishmentId",
            "in": "path",
            "description": "Establishment Id",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          },
          {
            "name": "userPermissionId",
            "in": "path",
            "description": "User Permission Id",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          }
        ],
        "responses": { "200": { "description": "Permission deleted" } }
      }
    },
    "/api/user/{userId}/{establishmentId}/monthWorkDay/{workDayId}": {
      "get": {
        "tags": ["Month Work Day"],
        "summary": "Return a unique month work day",
        "operationId": "findById_10",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "User Id",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          },
          {
            "name": "establishmentId",
            "in": "path",
            "description": "Establishment Id",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          },
          {
            "name": "workDayId",
            "in": "path",
            "description": "Work Day Id",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          }
        ],
        "responses": {
          "200": {
            "description": "Month work day found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/MonthWorkDay" }
              }
            }
          },
          "404": {
            "description": "Month work day not found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/MonthWorkDay" }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["Month Work Day"],
        "summary": "Delete an existing month work day",
        "operationId": "delete_3",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "User Id",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          },
          {
            "name": "establishmentId",
            "in": "path",
            "description": "Establishment Id",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          },
          {
            "name": "workDayId",
            "in": "path",
            "description": "Work Day Id",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          }
        ],
        "responses": { "200": { "description": "Month work day deleted" } }
      }
    },
    "/api/user/{userId}/userService/{userServiceId}": {
      "get": {
        "tags": ["User Service"],
        "summary": "Return an unique user service",
        "operationId": "findByIdUserServiceDomain",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "User Id",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          },
          {
            "name": "userServiceId",
            "in": "path",
            "description": "User Service Id",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          }
        ],
        "responses": {
          "200": {
            "description": "User service found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/UserServiceDomain" }
              }
            }
          },
          "404": {
            "description": "User service not found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/UserServiceDomain" }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["User Service"],
        "summary": "Delete a service of the user",
        "operationId": "deleteUserServiceDomain",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "User Id",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          },
          {
            "name": "userServiceId",
            "in": "path",
            "description": "User Service Id",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          }
        ],
        "responses": { "201": { "description": "User service deleted" } }
      }
    },
    "/api/user/{establishmentId}/{userId}/telephone/{userTelephoneId}": {
      "get": {
        "tags": ["User Telephone"],
        "summary": "Return an unique user telephone",
        "operationId": "findById_12",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "User Id",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          },
          {
            "name": "establishmentId",
            "in": "path",
            "description": "Establishment Id",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          },
          {
            "name": "userTelephoneId",
            "in": "path",
            "description": "User Telephone Id",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          }
        ],
        "responses": {
          "200": {
            "description": "User telephone found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/UserTelephone" }
              }
            }
          },
          "404": {
            "description": "User telephone not found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/UserTelephone" }
              }
            }
          }
        }
      }
    },
    "/api/user/{establishmentId}/{userId}/lock/{userLockId}": {
      "get": {
        "tags": ["User Lock"],
        "summary": "Return an unique user lock",
        "operationId": "findById_13",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "User Id",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          },
          {
            "name": "establishmentId",
            "in": "path",
            "description": "Establishment Id",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          },
          {
            "name": "userLockId",
            "in": "path",
            "description": "User Lock Id",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          }
        ],
        "responses": {
          "200": {
            "description": "User lock found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/UserLock" }
              }
            }
          },
          "404": {
            "description": "User lock not found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/UserLock" }
              }
            }
          }
        }
      }
    },
    "/api/user/{establishmentId}/workHourSched/{userEmployeeId}/{day}": {
      "get": {
        "tags": ["Work Hour Schedule Info"],
        "summary": "Return a list with user work hour by day",
        "operationId": "workHourSchedList",
        "parameters": [
          {
            "name": "establishmentId",
            "in": "path",
            "description": "Establishment Id",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          },
          {
            "name": "userEmployeeId",
            "in": "path",
            "description": "User Employee Id",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          },
          {
            "name": "day",
            "in": "path",
            "description": "Day",
            "required": true,
            "schema": { "type": "string", "format": "date" }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Zero-based page index (0..N)",
            "required": false,
            "schema": { "minimum": 0, "type": "integer", "default": 0 }
          },
          {
            "name": "size",
            "in": "query",
            "description": "The size of the page to be returned",
            "required": false,
            "schema": { "minimum": 1, "type": "integer", "default": 20 }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
            "required": false,
            "schema": { "type": "array", "items": { "type": "string" } }
          }
        ],
        "responses": {
          "200": {
            "description": "Found zero or more results",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PageWorkHourSchedInfo"
                }
              }
            }
          }
        }
      }
    },
    "/api/user/{establishmentId}/perm/{tpPermissionType}": {
      "get": {
        "tags": ["User"],
        "summary": "Return a list of users linked at establishment by permission type",
        "description": "Can to be use to return, by example, employees or clients of an establishment",
        "operationId": "findListTpPermission",
        "parameters": [
          { "name": "userId", "in": "query", "description": "User Id (Equal)" },
          {
            "name": "name",
            "in": "query",
            "description": "Name (LikeIgnoreCase)"
          },
          {
            "name": "email",
            "in": "query",
            "description": "Email (LikeIgnoreCase)"
          },
          {
            "name": "telephone",
            "in": "query",
            "description": "Telephone (LikeIgnoreCase)"
          },
          {
            "name": "situationType",
            "in": "query",
            "description": "Situation Type (In)",
            "schema": {
              "type": "string",
              "enum": ["IN_REGISTRATION", "ACTIVE", "CANCELED"]
            }
          },
          {
            "name": "establishmentId",
            "in": "path",
            "description": "Establishment Id",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          },
          {
            "name": "tpPermissionType",
            "in": "path",
            "description": "Permission Type",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "ROLE_ADM",
                "ROLE_OWNER",
                "ROLE_EMPLOYEE",
                "ROLE_CLIENT",
                "ROLE_PRE_CLIENT"
              ]
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Zero-based page index (0..N)",
            "required": false,
            "schema": { "minimum": 0, "type": "integer", "default": 0 }
          },
          {
            "name": "size",
            "in": "query",
            "description": "The size of the page to be returned",
            "required": false,
            "schema": { "minimum": 1, "type": "integer", "default": 20 }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
            "required": false,
            "schema": { "type": "array", "items": { "type": "string" } }
          }
        ],
        "responses": {
          "200": {
            "description": "Found zero or more results",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/PageUser" }
              }
            }
          }
        }
      }
    },
    "/api/user/{establishmentId}/establishment": {
      "get": {
        "tags": ["User"],
        "summary": "Return a list of users with establishment linked",
        "operationId": "findAllWithEstablishment",
        "parameters": [
          {
            "name": "establishmentId",
            "in": "path",
            "description": "Establishment Id",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          },
          {
            "name": "name",
            "in": "query",
            "description": "Name",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "name": "email",
            "in": "query",
            "description": "Email",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Zero-based page index (0..N)",
            "required": false,
            "schema": { "minimum": 0, "type": "integer", "default": 0 }
          },
          {
            "name": "size",
            "in": "query",
            "description": "The size of the page to be returned",
            "required": false,
            "schema": { "minimum": 1, "type": "integer", "default": 20 }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
            "required": false,
            "schema": { "type": "array", "items": { "type": "string" } }
          }
        ],
        "responses": {
          "200": {
            "description": "Found zero or more results",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/PageUserProjection" }
              }
            }
          }
        }
      }
    },
    "/api/service/{establishmentId}/withValue": {
      "get": {
        "tags": ["Service"],
        "summary": "Return a list of active services with values",
        "operationId": "findListWithValue",
        "parameters": [
          {
            "name": "establishmentId",
            "in": "path",
            "description": "Establishment Id",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          }
        ],
        "responses": {
          "200": {
            "description": "Found zero or more results",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ServiceDomainProjection"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/service/{establishmentId}/serviceValue/grouped": {
      "get": {
        "tags": ["Service Value"],
        "summary": "Return a list of service with values grouped by establishment",
        "operationId": "findListServiceValueGroupedByEstablishment",
        "parameters": [
          {
            "name": "serviceValueId",
            "in": "query",
            "description": "Service Value Id (Equal)"
          },
          {
            "name": "serviceId",
            "in": "query",
            "description": "Service Id (Equal)"
          },
          {
            "name": "serviceName",
            "in": "query",
            "description": "Service Name (LikeIgnoreCase)"
          },
          {
            "name": "serviceSituationType",
            "in": "query",
            "description": "Service Situation Type (In)",
            "schema": { "type": "string", "enum": ["ACTIVE", "CANCELED"] }
          },
          {
            "name": "situationType",
            "in": "query",
            "description": "Situation Type (In)",
            "schema": { "type": "string", "enum": ["ACTIVE", "CANCELED"] }
          },
          {
            "name": "establishmentId",
            "in": "path",
            "description": "Establishment Id",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          }
        ],
        "responses": {
          "200": {
            "description": "Found zero or more results",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { "$ref": "#/components/schemas/ServiceDomain" }
                }
              }
            }
          }
        }
      }
    },
    "/api/scheduling/{establishmentId}/{beginFilter}/{endFilter}/{justFreeTime}": {
      "get": {
        "tags": ["Scheduling"],
        "summary": "Open times to schedule",
        "description": "Search attendants who have time available for scheduling on the requested dates from the services sent. It is not necessary to be authenticated",
        "operationId": "findSchedulingList",
        "parameters": [
          {
            "name": "establishmentId",
            "in": "path",
            "description": "Establishment Id",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          },
          {
            "name": "beginFilter",
            "in": "path",
            "description": "Begin Date",
            "required": true,
            "schema": { "type": "string", "format": "date" }
          },
          {
            "name": "endFilter",
            "in": "path",
            "description": "End Date",
            "required": true,
            "schema": { "type": "string", "format": "date" }
          },
          {
            "name": "justFreeTime",
            "in": "path",
            "description": "Just Free Time?",
            "required": true,
            "schema": { "type": "string", "enum": ["YES", "NO"] }
          },
          {
            "name": "serviceListId",
            "in": "query",
            "description": "Service Id (In)",
            "required": true,
            "schema": {
              "type": "array",
              "items": { "type": "string", "format": "uuid" }
            }
          },
          {
            "name": "userEmployeeId",
            "in": "query",
            "description": "User Employee Id",
            "required": false,
            "schema": { "type": "string", "format": "uuid" }
          }
        ],
        "responses": {
          "200": {
            "description": "Found zero or more results",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SchedulingResponseDto"
                }
              }
            }
          }
        }
      }
    },
    "/api/scheduling/{establishmentId}/reduced": {
      "get": {
        "tags": ["Scheduling"],
        "summary": "Listing with scheduled and blocked times",
        "operationId": "findListReduced",
        "parameters": [
          {
            "name": "establishmentId",
            "in": "path",
            "description": "Establishment Id",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Zero-based page index (0..N)",
            "required": false,
            "schema": { "minimum": 0, "type": "integer", "default": 0 }
          },
          {
            "name": "size",
            "in": "query",
            "description": "The size of the page to be returned",
            "required": false,
            "schema": { "minimum": 1, "type": "integer", "default": 20 }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
            "required": false,
            "schema": { "type": "array", "items": { "type": "string" } }
          }
        ],
        "responses": {
          "200": {
            "description": "Found zero or more results",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PageSchedulingDomainProjection"
                }
              }
            }
          }
        }
      }
    },
    "/api/public/establishment": {
      "get": {
        "tags": ["Public"],
        "summary": "Return a list of establishments",
        "description": "It is not necessary to be authenticated",
        "operationId": "findListEstablishment",
        "parameters": [
          {
            "name": "establishmentId",
            "in": "query",
            "description": "Establishment Id (Equal)"
          },
          {
            "name": "name",
            "in": "query",
            "description": "Name (LikeIgnoreCase)"
          },
          {
            "name": "publicIdentifier",
            "in": "query",
            "description": "Public Identifier (LikeIgnoreCase)"
          },
          {
            "name": "clientName",
            "in": "query",
            "description": "Client Name (LikeIgnoreCase)"
          },
          {
            "name": "responsibleUserId",
            "in": "query",
            "description": "Responsible User Id (Equal)"
          },
          {
            "name": "responsibleUserName",
            "in": "query",
            "description": "Responsible User Name (LikeIgnoreCase)"
          },
          {
            "name": "situationType",
            "in": "query",
            "description": "Situation Type (In)",
            "schema": { "type": "string", "enum": ["ACTIVE", "CANCELED"] }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Zero-based page index (0..N)",
            "required": false,
            "schema": { "minimum": 0, "type": "integer", "default": 0 }
          },
          {
            "name": "size",
            "in": "query",
            "description": "The size of the page to be returned",
            "required": false,
            "schema": { "minimum": 1, "type": "integer", "default": 20 }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
            "required": false,
            "schema": { "type": "array", "items": { "type": "string" } }
          }
        ],
        "responses": {
          "200": {
            "description": "Found zero or more results",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/PageEstablishment" }
              }
            }
          }
        },
        "security": []
      }
    },
    "/api/public/establishment/{establishmentId}/userEstablishment/employee": {
      "get": {
        "tags": ["Public"],
        "summary": "List attendants of an establishment",
        "operationId": "findListEstablishmentAttendant",
        "parameters": [
          {
            "name": "userEstablishmentId",
            "in": "query",
            "description": "User Establishment Id (Equal)"
          },
          { "name": "userId", "in": "query", "description": "User Id (Equal)" },
          {
            "name": "nickname",
            "in": "query",
            "description": "Nickname (LikeIgnoreCase)"
          },
          {
            "name": "establishmentId",
            "in": "path",
            "description": "Establishment Id",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Zero-based page index (0..N)",
            "required": false,
            "schema": { "minimum": 0, "type": "integer", "default": 0 }
          },
          {
            "name": "size",
            "in": "query",
            "description": "The size of the page to be returned",
            "required": false,
            "schema": { "minimum": 1, "type": "integer", "default": 20 }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
            "required": false,
            "schema": { "type": "array", "items": { "type": "string" } }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PageUserEstablishment"
                }
              }
            }
          }
        },
        "security": []
      }
    },
    "/api/public/establishment/{establishmentId}/service": {
      "get": {
        "tags": ["Public"],
        "summary": "Active services by establishment",
        "operationId": "findListServiceByEstablishment",
        "parameters": [
          {
            "name": "serviceId",
            "in": "query",
            "description": "Service Id (Equal)"
          },
          {
            "name": "name",
            "in": "query",
            "description": "Service Name (LikeIgnoreCase)"
          },
          {
            "name": "situationType",
            "in": "query",
            "description": "Situation Type (In)",
            "schema": { "type": "string", "enum": ["ACTIVE", "CANCELED"] }
          },
          {
            "name": "categoryId",
            "in": "query",
            "description": "Category Id (In)"
          },
          {
            "name": "establishmentId",
            "in": "path",
            "description": "Establishment Id",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Zero-based page index (0..N)",
            "required": false,
            "schema": { "minimum": 0, "type": "integer", "default": 0 }
          },
          {
            "name": "size",
            "in": "query",
            "description": "The size of the page to be returned",
            "required": false,
            "schema": { "minimum": 1, "type": "integer", "default": 20 }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
            "required": false,
            "schema": { "type": "array", "items": { "type": "string" } }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/PageServiceDomain" }
              }
            }
          }
        },
        "security": []
      }
    },
    "/api/public/establishment/{establishmentId}/service/groupedValue": {
      "get": {
        "tags": ["Public"],
        "summary": "Services value grouped by establishment",
        "operationId": "findListGroupedByEstablishment",
        "parameters": [
          {
            "name": "serviceId",
            "in": "query",
            "description": "Service Id (Equal)"
          },
          {
            "name": "name",
            "in": "query",
            "description": "Service Name (LikeIgnoreCase)"
          },
          {
            "name": "situationType",
            "in": "query",
            "description": "Situation Type (In)",
            "schema": { "type": "string", "enum": ["ACTIVE", "CANCELED"] }
          },
          {
            "name": "categoryId",
            "in": "query",
            "description": "Category Id (In)"
          },
          {
            "name": "establishmentId",
            "in": "path",
            "description": "Establishment Id",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { "$ref": "#/components/schemas/ServiceDomain" }
                }
              }
            }
          }
        },
        "security": []
      }
    },
    "/api/public/establishment/scheduling/{schedulingId}": {
      "get": {
        "tags": ["Public"],
        "summary": "Return a scheduling by id",
        "description": "It is not necessary to be authenticated",
        "operationId": "findByIdEstablishmentSchedulingByUser",
        "parameters": [
          {
            "name": "schedulingId",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          }
        ],
        "responses": {
          "200": {
            "description": "Schedule found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/SchedulingDomain" }
              }
            }
          },
          "404": {
            "description": "Schedule not found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/SchedulingDomain" }
              }
            }
          }
        },
        "security": []
      }
    },
    "/api/public/establishment/scheduling/{schedulingId}/service": {
      "get": {
        "tags": ["Public"],
        "summary": "Services of an schedule",
        "operationId": "findListEstablishmentSchedulingServiceByUser",
        "parameters": [
          {
            "name": "schedulingServiceId",
            "in": "query",
            "description": "Scheduling Service Id (Equal)"
          },
          {
            "name": "serviceId",
            "in": "query",
            "description": "Service Id (Equal)"
          },
          {
            "name": "serviceName",
            "in": "query",
            "description": "Service Name (LikeIgnoreCase)"
          },
          {
            "name": "schedulingId",
            "in": "query",
            "description": "Scheduling Id (Equal)"
          },
          {
            "name": "situationType",
            "in": "query",
            "description": "Situation Type (In)",
            "schema": { "type": "string", "enum": ["ACTIVE", "CANCELED"] }
          },
          {
            "name": "schedulingId",
            "in": "path",
            "description": "Schedule Id",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Zero-based page index (0..N)",
            "required": false,
            "schema": { "minimum": 0, "type": "integer", "default": 0 }
          },
          {
            "name": "size",
            "in": "query",
            "description": "The size of the page to be returned",
            "required": false,
            "schema": { "minimum": 1, "type": "integer", "default": 20 }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
            "required": false,
            "schema": { "type": "array", "items": { "type": "string" } }
          }
        ],
        "responses": {
          "200": {
            "description": "Found zero or more results",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PageSchedulingServiceDomain"
                }
              }
            }
          }
        },
        "security": []
      }
    },
    "/api/public/establishment/scheduling/{establishmentId}/{beginFilter}/{endFilter}": {
      "get": {
        "tags": ["Public"],
        "summary": "Open times to schedule",
        "description": "Search attendants who have time available for scheduling on the requested dates from the services sent. It is not necessary to be authenticated",
        "operationId": "findFreeSchedulingList",
        "parameters": [
          {
            "name": "establishmentId",
            "in": "path",
            "description": "Establishment Id",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          },
          {
            "name": "beginFilter",
            "in": "path",
            "description": "Initial Date",
            "required": true,
            "schema": { "type": "string", "format": "date" }
          },
          {
            "name": "endFilter",
            "in": "path",
            "description": "End Date",
            "required": true,
            "schema": { "type": "string", "format": "date" }
          },
          {
            "name": "serviceListId",
            "in": "query",
            "description": "Service to schedule",
            "required": true,
            "schema": {
              "type": "array",
              "items": { "type": "string", "format": "uuid" }
            }
          },
          {
            "name": "userEmployeeId",
            "in": "query",
            "description": "Employee",
            "required": false,
            "schema": { "type": "string", "format": "uuid" }
          }
        ],
        "responses": {
          "200": {
            "description": "Found zero or more results",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SchedulingResponseDto"
                }
              }
            }
          }
        },
        "security": []
      }
    },
    "/api/public/establishment/scheduling/{establishmentId}/user/{phoneNumber}/{publicReference}": {
      "get": {
        "tags": ["Public"],
        "summary": "A user's schedule",
        "description": "A user's schedule for a given establishment based on the telephone number and public reference of the schedule. It is not necessary to be authenticated",
        "operationId": "findListEstablishmentSchedulingByUser",
        "parameters": [
          {
            "name": "establishmentId",
            "in": "path",
            "description": "Establishment Id",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          },
          {
            "name": "phoneNumber",
            "in": "path",
            "description": "Phone Number",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "name": "publicReference",
            "in": "path",
            "description": "Scheduler Public Reference",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Zero-based page index (0..N)",
            "required": false,
            "schema": { "minimum": 0, "type": "integer", "default": 0 }
          },
          {
            "name": "size",
            "in": "query",
            "description": "The size of the page to be returned",
            "required": false,
            "schema": { "minimum": 1, "type": "integer", "default": 20 }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
            "required": false,
            "schema": { "type": "array", "items": { "type": "string" } }
          }
        ],
        "responses": {
          "200": {
            "description": "Found zero or more results",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PageSchedulingDomain"
                }
              }
            }
          }
        },
        "security": []
      }
    },
    "/api/establishment/{establishmentId}/userEstablishment/employee": {
      "get": {
        "tags": ["Establishment Employee"],
        "summary": "Return a list of attendance",
        "operationId": "findListEstablishmentAttendant_1",
        "parameters": [
          { "name": "userId", "in": "query", "description": "User Id (Equal)" },
          {
            "name": "establishmentId",
            "in": "path",
            "description": "Establishment Id (Equal)",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Zero-based page index (0..N)",
            "required": false,
            "schema": { "minimum": 0, "type": "integer", "default": 0 }
          },
          {
            "name": "size",
            "in": "query",
            "description": "The size of the page to be returned",
            "required": false,
            "schema": { "minimum": 1, "type": "integer", "default": 20 }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
            "required": false,
            "schema": { "type": "array", "items": { "type": "string" } }
          }
        ],
        "responses": {
          "200": {
            "description": "Found zero or more results",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PageUserEstablishment"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "UserEstablishmentDto": {
        "type": "object",
        "properties": {
          "establishmentId": { "type": "string", "format": "uuid" },
          "linkedUserId": { "type": "string", "format": "uuid" },
          "isDefaultType": { "type": "string", "enum": ["YES", "NO"] },
          "nickname": { "type": "string" }
        }
      },
      "Address": {
        "type": "object",
        "properties": {
          "addressId": {
            "type": "string",
            "description": "Primary key",
            "format": "uuid"
          },
          "cep": { "type": "string", "description": "CEP" },
          "uf": { "type": "string", "description": "UF" },
          "city": { "type": "string", "description": "City" },
          "district": { "type": "string", "description": "District" },
          "road": { "type": "string", "description": "Road" },
          "number": { "type": "string", "description": "Number" },
          "complement": { "type": "string", "description": "Complement" },
          "situationType": {
            "type": "string",
            "description": "Situation type",
            "enum": ["ACTIVE", "CANCELED"]
          },
          "createdAt": {
            "type": "string",
            "description": "Created at",
            "format": "date-time"
          }
        },
        "description": "User or establishment address"
      },
      "Establishment": {
        "type": "object",
        "properties": {
          "establishmentId": { "type": "string", "format": "uuid" },
          "name": { "type": "string" },
          "publicIdentifier": { "type": "string" },
          "responsibleUser": { "$ref": "#/components/schemas/User" },
          "telephone": { "type": "string" },
          "situationType": { "type": "string", "enum": ["ACTIVE", "CANCELED"] },
          "createdAt": { "type": "string", "format": "date-time" },
          "address": { "$ref": "#/components/schemas/Address" },
          "establishmentConfig": {
            "$ref": "#/components/schemas/EstablishmentConfig"
          }
        },
        "description": "Establishment"
      },
      "EstablishmentConfig": {
        "required": ["defaultInterval"],
        "type": "object",
        "properties": {
          "establishmentConfigId": { "type": "string", "format": "uuid" },
          "defaultInterval": { "type": "integer", "format": "int64" },
          "incrementKey": { "type": "string" },
          "amountMissingToBlock": { "type": "integer", "format": "int32" },
          "establishment": { "$ref": "#/components/schemas/Establishment" }
        },
        "description": "Establishment config"
      },
      "User": {
        "type": "object",
        "properties": {
          "userId": { "type": "string", "format": "uuid" },
          "name": { "type": "string" },
          "email": { "type": "string" },
          "situationType": {
            "type": "string",
            "enum": ["IN_REGISTRATION", "ACTIVE", "CANCELED"]
          },
          "createdAt": { "type": "string", "format": "date-time" },
          "userIsBloqued": { "type": "boolean" },
          "address": { "type": "string", "format": "uuid" }
        },
        "description": "User"
      },
      "UserEstablishment": {
        "required": [
          "createdAt",
          "establishment",
          "isDefaultType",
          "linkedUser",
          "userEstablishmentId"
        ],
        "type": "object",
        "properties": {
          "userEstablishmentId": { "type": "string", "format": "uuid" },
          "establishment": { "$ref": "#/components/schemas/Establishment" },
          "isDefaultType": { "type": "string", "enum": ["YES", "NO"] },
          "linkedUser": { "$ref": "#/components/schemas/User" },
          "createdAt": { "type": "string", "format": "date-time" },
          "nickname": { "type": "string" }
        },
        "description": "Link between user and establishment"
      },
      "WaAccountDto": {
        "type": "object",
        "properties": {
          "waToken": { "type": "string" },
          "wabaId": { "type": "string" },
          "phoneNumberId": { "type": "string" },
          "userTelephoneId": { "type": "string", "format": "uuid" },
          "userId": { "type": "string", "format": "uuid" },
          "telephone": { "type": "string" }
        }
      },
      "UserTelephone": {
        "required": ["situationType"],
        "type": "object",
        "properties": {
          "userTelephoneId": { "type": "string", "format": "uuid" },
          "telephone": { "maxLength": 20, "minLength": 0, "type": "string" },
          "situationType": { "type": "string", "enum": ["ACTIVE", "CANCELED"] },
          "verificationType": {
            "type": "string",
            "enum": ["NOT_VERIFIED", "VERIFIED"]
          },
          "user": { "$ref": "#/components/schemas/User" }
        },
        "description": "User telephone"
      },
      "WaAccount": {
        "required": ["accountType", "phoneNumberId", "situationType", "wabaId"],
        "type": "object",
        "properties": {
          "waAccountId": { "type": "string", "format": "uuid" },
          "waToken": { "maxLength": 255, "minLength": 0, "type": "string" },
          "wabaId": { "maxLength": 50, "minLength": 0, "type": "string" },
          "phoneNumberId": {
            "maxLength": 50,
            "minLength": 0,
            "type": "string"
          },
          "situationType": {
            "type": "string",
            "enum": ["ACTIVE", "BLOCKED", "CANCELED"]
          },
          "establishment": { "type": "string", "format": "uuid" },
          "accountType": { "type": "string", "enum": ["ADM", "CLIENT"] },
          "userTelephone": { "$ref": "#/components/schemas/UserTelephone" },
          "webhookUserToken": {
            "maxLength": 1024,
            "minLength": 0,
            "type": "string"
          }
        },
        "description": "Client whatsApp account"
      },
      "WaMsgListAccountDto": {
        "type": "object",
        "properties": {
          "buttonText": { "type": "string" },
          "title": { "type": "string" },
          "description": { "type": "string" }
        }
      },
      "WaMsgListAccount": {
        "required": ["buttonText", "description", "title", "waMsgList"],
        "type": "object",
        "properties": {
          "waMsgListAccountId": { "type": "string", "format": "uuid" },
          "waMsgList": { "type": "string", "format": "uuid" },
          "waMsgInteractiveAccount": { "type": "string", "format": "uuid" },
          "waMsgModelAccount": { "type": "string", "format": "uuid" },
          "buttonText": { "maxLength": 90, "minLength": 0, "type": "string" },
          "title": { "maxLength": 90, "minLength": 0, "type": "string" },
          "description": { "maxLength": 1024, "minLength": 0, "type": "string" }
        },
        "description": "List of accounts for sending messages in whatsapp"
      },
      "WaMsgButtonAccountDto": {
        "type": "object",
        "properties": { "title": { "type": "string" } }
      },
      "WaMsgButtonAccount": {
        "required": ["waMsgButton"],
        "type": "object",
        "properties": {
          "waMsgButtonAccountId": { "type": "string", "format": "uuid" },
          "waMsgButton": { "type": "string", "format": "uuid" },
          "waMsgInteractiveAccount": { "type": "string", "format": "uuid" },
          "waMsgModelAccount": { "type": "string", "format": "uuid" },
          "title": { "maxLength": 90, "minLength": 0, "type": "string" }
        },
        "description": "From the base buttons, it links with the establishment and allows customization"
      },
      "LocalTime": {
        "type": "object",
        "properties": {
          "hour": { "type": "integer", "format": "int32" },
          "minute": { "type": "integer", "format": "int32" },
          "second": { "type": "integer", "format": "int32" },
          "nano": { "type": "integer", "format": "int32" }
        }
      },
      "WorkDayDto": {
        "type": "object",
        "properties": {
          "dayWeek": {
            "type": "string",
            "enum": [
              "SUNDAY",
              "MONDAY",
              "TUESDAY",
              "WEDNESDAY",
              "THURSDAY",
              "FRIDAY",
              "SATURDAY"
            ]
          },
          "startService": {
            "type": "object",
            "properties": {
              "offset": {
                "type": "object",
                "properties": {
                  "totalSeconds": { "type": "integer", "format": "int32" },
                  "id": { "type": "string" },
                  "rules": {
                    "type": "object",
                    "properties": {
                      "fixedOffset": { "type": "boolean" },
                      "transitions": {
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "instant": {
                              "type": "string",
                              "format": "date-time"
                            },
                            "overlap": { "type": "boolean" },
                            "duration": {
                              "type": "object",
                              "properties": {
                                "seconds": {
                                  "type": "integer",
                                  "format": "int64"
                                },
                                "nano": {
                                  "type": "integer",
                                  "format": "int32"
                                },
                                "negative": { "type": "boolean" },
                                "zero": { "type": "boolean" },
                                "units": {
                                  "type": "array",
                                  "items": {
                                    "type": "object",
                                    "properties": {
                                      "dateBased": { "type": "boolean" },
                                      "timeBased": { "type": "boolean" },
                                      "durationEstimated": { "type": "boolean" }
                                    }
                                  }
                                }
                              }
                            },
                            "gap": { "type": "boolean" },
                            "dateTimeBefore": {
                              "type": "string",
                              "format": "date-time"
                            },
                            "dateTimeAfter": {
                              "type": "string",
                              "format": "date-time"
                            }
                          }
                        }
                      },
                      "transitionRules": {
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "month": {
                              "type": "string",
                              "enum": [
                                "JANUARY",
                                "FEBRUARY",
                                "MARCH",
                                "APRIL",
                                "MAY",
                                "JUNE",
                                "JULY",
                                "AUGUST",
                                "SEPTEMBER",
                                "OCTOBER",
                                "NOVEMBER",
                                "DECEMBER"
                              ]
                            },
                            "timeDefinition": {
                              "type": "string",
                              "enum": ["UTC", "WALL", "STANDARD"]
                            },
                            "dayOfWeek": {
                              "type": "string",
                              "enum": [
                                "MONDAY",
                                "TUESDAY",
                                "WEDNESDAY",
                                "THURSDAY",
                                "FRIDAY",
                                "SATURDAY",
                                "SUNDAY"
                              ]
                            },
                            "dayOfMonthIndicator": {
                              "type": "integer",
                              "format": "int32"
                            },
                            "localTime": {
                              "$ref": "#/components/schemas/LocalTime"
                            },
                            "midnightEndOfDay": { "type": "boolean" }
                          }
                        }
                      }
                    }
                  }
                }
              },
              "hour": { "type": "integer", "format": "int32" },
              "minute": { "type": "integer", "format": "int32" },
              "second": { "type": "integer", "format": "int32" },
              "nano": { "type": "integer", "format": "int32" }
            }
          },
          "startBreak": {
            "type": "object",
            "properties": {
              "offset": {
                "type": "object",
                "properties": {
                  "totalSeconds": { "type": "integer", "format": "int32" },
                  "id": { "type": "string" },
                  "rules": {
                    "type": "object",
                    "properties": {
                      "fixedOffset": { "type": "boolean" },
                      "transitions": {
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "instant": {
                              "type": "string",
                              "format": "date-time"
                            },
                            "overlap": { "type": "boolean" },
                            "duration": {
                              "type": "object",
                              "properties": {
                                "seconds": {
                                  "type": "integer",
                                  "format": "int64"
                                },
                                "nano": {
                                  "type": "integer",
                                  "format": "int32"
                                },
                                "negative": { "type": "boolean" },
                                "zero": { "type": "boolean" },
                                "units": {
                                  "type": "array",
                                  "items": {
                                    "type": "object",
                                    "properties": {
                                      "dateBased": { "type": "boolean" },
                                      "timeBased": { "type": "boolean" },
                                      "durationEstimated": { "type": "boolean" }
                                    }
                                  }
                                }
                              }
                            },
                            "gap": { "type": "boolean" },
                            "dateTimeBefore": {
                              "type": "string",
                              "format": "date-time"
                            },
                            "dateTimeAfter": {
                              "type": "string",
                              "format": "date-time"
                            }
                          }
                        }
                      },
                      "transitionRules": {
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "month": {
                              "type": "string",
                              "enum": [
                                "JANUARY",
                                "FEBRUARY",
                                "MARCH",
                                "APRIL",
                                "MAY",
                                "JUNE",
                                "JULY",
                                "AUGUST",
                                "SEPTEMBER",
                                "OCTOBER",
                                "NOVEMBER",
                                "DECEMBER"
                              ]
                            },
                            "timeDefinition": {
                              "type": "string",
                              "enum": ["UTC", "WALL", "STANDARD"]
                            },
                            "dayOfWeek": {
                              "type": "string",
                              "enum": [
                                "MONDAY",
                                "TUESDAY",
                                "WEDNESDAY",
                                "THURSDAY",
                                "FRIDAY",
                                "SATURDAY",
                                "SUNDAY"
                              ]
                            },
                            "dayOfMonthIndicator": {
                              "type": "integer",
                              "format": "int32"
                            },
                            "localTime": {
                              "$ref": "#/components/schemas/LocalTime"
                            },
                            "midnightEndOfDay": { "type": "boolean" }
                          }
                        }
                      }
                    }
                  }
                }
              },
              "hour": { "type": "integer", "format": "int32" },
              "minute": { "type": "integer", "format": "int32" },
              "second": { "type": "integer", "format": "int32" },
              "nano": { "type": "integer", "format": "int32" }
            }
          },
          "endBreak": {
            "type": "object",
            "properties": {
              "offset": {
                "type": "object",
                "properties": {
                  "totalSeconds": { "type": "integer", "format": "int32" },
                  "id": { "type": "string" },
                  "rules": {
                    "type": "object",
                    "properties": {
                      "fixedOffset": { "type": "boolean" },
                      "transitions": {
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "instant": {
                              "type": "string",
                              "format": "date-time"
                            },
                            "overlap": { "type": "boolean" },
                            "duration": {
                              "type": "object",
                              "properties": {
                                "seconds": {
                                  "type": "integer",
                                  "format": "int64"
                                },
                                "nano": {
                                  "type": "integer",
                                  "format": "int32"
                                },
                                "negative": { "type": "boolean" },
                                "zero": { "type": "boolean" },
                                "units": {
                                  "type": "array",
                                  "items": {
                                    "type": "object",
                                    "properties": {
                                      "dateBased": { "type": "boolean" },
                                      "timeBased": { "type": "boolean" },
                                      "durationEstimated": { "type": "boolean" }
                                    }
                                  }
                                }
                              }
                            },
                            "gap": { "type": "boolean" },
                            "dateTimeBefore": {
                              "type": "string",
                              "format": "date-time"
                            },
                            "dateTimeAfter": {
                              "type": "string",
                              "format": "date-time"
                            }
                          }
                        }
                      },
                      "transitionRules": {
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "month": {
                              "type": "string",
                              "enum": [
                                "JANUARY",
                                "FEBRUARY",
                                "MARCH",
                                "APRIL",
                                "MAY",
                                "JUNE",
                                "JULY",
                                "AUGUST",
                                "SEPTEMBER",
                                "OCTOBER",
                                "NOVEMBER",
                                "DECEMBER"
                              ]
                            },
                            "timeDefinition": {
                              "type": "string",
                              "enum": ["UTC", "WALL", "STANDARD"]
                            },
                            "dayOfWeek": {
                              "type": "string",
                              "enum": [
                                "MONDAY",
                                "TUESDAY",
                                "WEDNESDAY",
                                "THURSDAY",
                                "FRIDAY",
                                "SATURDAY",
                                "SUNDAY"
                              ]
                            },
                            "dayOfMonthIndicator": {
                              "type": "integer",
                              "format": "int32"
                            },
                            "localTime": {
                              "$ref": "#/components/schemas/LocalTime"
                            },
                            "midnightEndOfDay": { "type": "boolean" }
                          }
                        }
                      }
                    }
                  }
                }
              },
              "hour": { "type": "integer", "format": "int32" },
              "minute": { "type": "integer", "format": "int32" },
              "second": { "type": "integer", "format": "int32" },
              "nano": { "type": "integer", "format": "int32" }
            }
          },
          "endService": {
            "type": "object",
            "properties": {
              "offset": {
                "type": "object",
                "properties": {
                  "totalSeconds": { "type": "integer", "format": "int32" },
                  "id": { "type": "string" },
                  "rules": {
                    "type": "object",
                    "properties": {
                      "fixedOffset": { "type": "boolean" },
                      "transitions": {
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "instant": {
                              "type": "string",
                              "format": "date-time"
                            },
                            "overlap": { "type": "boolean" },
                            "duration": {
                              "type": "object",
                              "properties": {
                                "seconds": {
                                  "type": "integer",
                                  "format": "int64"
                                },
                                "nano": {
                                  "type": "integer",
                                  "format": "int32"
                                },
                                "negative": { "type": "boolean" },
                                "zero": { "type": "boolean" },
                                "units": {
                                  "type": "array",
                                  "items": {
                                    "type": "object",
                                    "properties": {
                                      "dateBased": { "type": "boolean" },
                                      "timeBased": { "type": "boolean" },
                                      "durationEstimated": { "type": "boolean" }
                                    }
                                  }
                                }
                              }
                            },
                            "gap": { "type": "boolean" },
                            "dateTimeBefore": {
                              "type": "string",
                              "format": "date-time"
                            },
                            "dateTimeAfter": {
                              "type": "string",
                              "format": "date-time"
                            }
                          }
                        }
                      },
                      "transitionRules": {
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "month": {
                              "type": "string",
                              "enum": [
                                "JANUARY",
                                "FEBRUARY",
                                "MARCH",
                                "APRIL",
                                "MAY",
                                "JUNE",
                                "JULY",
                                "AUGUST",
                                "SEPTEMBER",
                                "OCTOBER",
                                "NOVEMBER",
                                "DECEMBER"
                              ]
                            },
                            "timeDefinition": {
                              "type": "string",
                              "enum": ["UTC", "WALL", "STANDARD"]
                            },
                            "dayOfWeek": {
                              "type": "string",
                              "enum": [
                                "MONDAY",
                                "TUESDAY",
                                "WEDNESDAY",
                                "THURSDAY",
                                "FRIDAY",
                                "SATURDAY",
                                "SUNDAY"
                              ]
                            },
                            "dayOfMonthIndicator": {
                              "type": "integer",
                              "format": "int32"
                            },
                            "localTime": {
                              "$ref": "#/components/schemas/LocalTime"
                            },
                            "midnightEndOfDay": { "type": "boolean" }
                          }
                        }
                      }
                    }
                  }
                }
              },
              "hour": { "type": "integer", "format": "int32" },
              "minute": { "type": "integer", "format": "int32" },
              "second": { "type": "integer", "format": "int32" },
              "nano": { "type": "integer", "format": "int32" }
            }
          },
          "userEmployeeId": { "type": "string", "format": "uuid" }
        }
      },
      "WeekTab": {
        "type": "object",
        "properties": {
          "dayWeek": {
            "type": "string",
            "enum": [
              "SUNDAY",
              "MONDAY",
              "TUESDAY",
              "WEDNESDAY",
              "THURSDAY",
              "FRIDAY",
              "SATURDAY"
            ]
          },
          "orderDay": { "type": "integer", "format": "int32" }
        },
        "description": "Days of week table"
      },
      "WorkDay": {
        "type": "object",
        "properties": {
          "workDayId": {
            "type": "string",
            "description": "Primary key",
            "format": "uuid"
          },
          "dayWeek": { "$ref": "#/components/schemas/WeekTab" },
          "startService": {
            "type": "object",
            "properties": {
              "offset": {
                "type": "object",
                "properties": {
                  "totalSeconds": { "type": "integer", "format": "int32" },
                  "id": { "type": "string" },
                  "rules": {
                    "type": "object",
                    "properties": {
                      "fixedOffset": { "type": "boolean" },
                      "transitions": {
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "instant": {
                              "type": "string",
                              "format": "date-time"
                            },
                            "overlap": { "type": "boolean" },
                            "duration": {
                              "type": "object",
                              "properties": {
                                "seconds": {
                                  "type": "integer",
                                  "format": "int64"
                                },
                                "nano": {
                                  "type": "integer",
                                  "format": "int32"
                                },
                                "negative": { "type": "boolean" },
                                "zero": { "type": "boolean" },
                                "units": {
                                  "type": "array",
                                  "items": {
                                    "type": "object",
                                    "properties": {
                                      "dateBased": { "type": "boolean" },
                                      "timeBased": { "type": "boolean" },
                                      "durationEstimated": { "type": "boolean" }
                                    }
                                  }
                                }
                              }
                            },
                            "gap": { "type": "boolean" },
                            "dateTimeBefore": {
                              "type": "string",
                              "format": "date-time"
                            },
                            "dateTimeAfter": {
                              "type": "string",
                              "format": "date-time"
                            }
                          }
                        }
                      },
                      "transitionRules": {
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "month": {
                              "type": "string",
                              "enum": [
                                "JANUARY",
                                "FEBRUARY",
                                "MARCH",
                                "APRIL",
                                "MAY",
                                "JUNE",
                                "JULY",
                                "AUGUST",
                                "SEPTEMBER",
                                "OCTOBER",
                                "NOVEMBER",
                                "DECEMBER"
                              ]
                            },
                            "timeDefinition": {
                              "type": "string",
                              "enum": ["UTC", "WALL", "STANDARD"]
                            },
                            "dayOfWeek": {
                              "type": "string",
                              "enum": [
                                "MONDAY",
                                "TUESDAY",
                                "WEDNESDAY",
                                "THURSDAY",
                                "FRIDAY",
                                "SATURDAY",
                                "SUNDAY"
                              ]
                            },
                            "dayOfMonthIndicator": {
                              "type": "integer",
                              "format": "int32"
                            },
                            "localTime": {
                              "$ref": "#/components/schemas/LocalTime"
                            },
                            "midnightEndOfDay": { "type": "boolean" }
                          }
                        }
                      }
                    }
                  }
                }
              },
              "hour": { "type": "integer", "format": "int32" },
              "minute": { "type": "integer", "format": "int32" },
              "second": { "type": "integer", "format": "int32" },
              "nano": { "type": "integer", "format": "int32" }
            },
            "description": "Start time of work"
          },
          "endService": {
            "type": "object",
            "properties": {
              "offset": {
                "type": "object",
                "properties": {
                  "totalSeconds": { "type": "integer", "format": "int32" },
                  "id": { "type": "string" },
                  "rules": {
                    "type": "object",
                    "properties": {
                      "fixedOffset": { "type": "boolean" },
                      "transitions": {
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "instant": {
                              "type": "string",
                              "format": "date-time"
                            },
                            "overlap": { "type": "boolean" },
                            "duration": {
                              "type": "object",
                              "properties": {
                                "seconds": {
                                  "type": "integer",
                                  "format": "int64"
                                },
                                "nano": {
                                  "type": "integer",
                                  "format": "int32"
                                },
                                "negative": { "type": "boolean" },
                                "zero": { "type": "boolean" },
                                "units": {
                                  "type": "array",
                                  "items": {
                                    "type": "object",
                                    "properties": {
                                      "dateBased": { "type": "boolean" },
                                      "timeBased": { "type": "boolean" },
                                      "durationEstimated": { "type": "boolean" }
                                    }
                                  }
                                }
                              }
                            },
                            "gap": { "type": "boolean" },
                            "dateTimeBefore": {
                              "type": "string",
                              "format": "date-time"
                            },
                            "dateTimeAfter": {
                              "type": "string",
                              "format": "date-time"
                            }
                          }
                        }
                      },
                      "transitionRules": {
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "month": {
                              "type": "string",
                              "enum": [
                                "JANUARY",
                                "FEBRUARY",
                                "MARCH",
                                "APRIL",
                                "MAY",
                                "JUNE",
                                "JULY",
                                "AUGUST",
                                "SEPTEMBER",
                                "OCTOBER",
                                "NOVEMBER",
                                "DECEMBER"
                              ]
                            },
                            "timeDefinition": {
                              "type": "string",
                              "enum": ["UTC", "WALL", "STANDARD"]
                            },
                            "dayOfWeek": {
                              "type": "string",
                              "enum": [
                                "MONDAY",
                                "TUESDAY",
                                "WEDNESDAY",
                                "THURSDAY",
                                "FRIDAY",
                                "SATURDAY",
                                "SUNDAY"
                              ]
                            },
                            "dayOfMonthIndicator": {
                              "type": "integer",
                              "format": "int32"
                            },
                            "localTime": {
                              "$ref": "#/components/schemas/LocalTime"
                            },
                            "midnightEndOfDay": { "type": "boolean" }
                          }
                        }
                      }
                    }
                  }
                }
              },
              "hour": { "type": "integer", "format": "int32" },
              "minute": { "type": "integer", "format": "int32" },
              "second": { "type": "integer", "format": "int32" },
              "nano": { "type": "integer", "format": "int32" }
            },
            "description": "End time of work"
          },
          "startBreak": {
            "type": "object",
            "properties": {
              "offset": {
                "type": "object",
                "properties": {
                  "totalSeconds": { "type": "integer", "format": "int32" },
                  "id": { "type": "string" },
                  "rules": {
                    "type": "object",
                    "properties": {
                      "fixedOffset": { "type": "boolean" },
                      "transitions": {
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "instant": {
                              "type": "string",
                              "format": "date-time"
                            },
                            "overlap": { "type": "boolean" },
                            "duration": {
                              "type": "object",
                              "properties": {
                                "seconds": {
                                  "type": "integer",
                                  "format": "int64"
                                },
                                "nano": {
                                  "type": "integer",
                                  "format": "int32"
                                },
                                "negative": { "type": "boolean" },
                                "zero": { "type": "boolean" },
                                "units": {
                                  "type": "array",
                                  "items": {
                                    "type": "object",
                                    "properties": {
                                      "dateBased": { "type": "boolean" },
                                      "timeBased": { "type": "boolean" },
                                      "durationEstimated": { "type": "boolean" }
                                    }
                                  }
                                }
                              }
                            },
                            "gap": { "type": "boolean" },
                            "dateTimeBefore": {
                              "type": "string",
                              "format": "date-time"
                            },
                            "dateTimeAfter": {
                              "type": "string",
                              "format": "date-time"
                            }
                          }
                        }
                      },
                      "transitionRules": {
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "month": {
                              "type": "string",
                              "enum": [
                                "JANUARY",
                                "FEBRUARY",
                                "MARCH",
                                "APRIL",
                                "MAY",
                                "JUNE",
                                "JULY",
                                "AUGUST",
                                "SEPTEMBER",
                                "OCTOBER",
                                "NOVEMBER",
                                "DECEMBER"
                              ]
                            },
                            "timeDefinition": {
                              "type": "string",
                              "enum": ["UTC", "WALL", "STANDARD"]
                            },
                            "dayOfWeek": {
                              "type": "string",
                              "enum": [
                                "MONDAY",
                                "TUESDAY",
                                "WEDNESDAY",
                                "THURSDAY",
                                "FRIDAY",
                                "SATURDAY",
                                "SUNDAY"
                              ]
                            },
                            "dayOfMonthIndicator": {
                              "type": "integer",
                              "format": "int32"
                            },
                            "localTime": {
                              "$ref": "#/components/schemas/LocalTime"
                            },
                            "midnightEndOfDay": { "type": "boolean" }
                          }
                        }
                      }
                    }
                  }
                }
              },
              "hour": { "type": "integer", "format": "int32" },
              "minute": { "type": "integer", "format": "int32" },
              "second": { "type": "integer", "format": "int32" },
              "nano": { "type": "integer", "format": "int32" }
            },
            "description": "Start time of break"
          },
          "endBreak": {
            "type": "object",
            "properties": {
              "offset": {
                "type": "object",
                "properties": {
                  "totalSeconds": { "type": "integer", "format": "int32" },
                  "id": { "type": "string" },
                  "rules": {
                    "type": "object",
                    "properties": {
                      "fixedOffset": { "type": "boolean" },
                      "transitions": {
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "instant": {
                              "type": "string",
                              "format": "date-time"
                            },
                            "overlap": { "type": "boolean" },
                            "duration": {
                              "type": "object",
                              "properties": {
                                "seconds": {
                                  "type": "integer",
                                  "format": "int64"
                                },
                                "nano": {
                                  "type": "integer",
                                  "format": "int32"
                                },
                                "negative": { "type": "boolean" },
                                "zero": { "type": "boolean" },
                                "units": {
                                  "type": "array",
                                  "items": {
                                    "type": "object",
                                    "properties": {
                                      "dateBased": { "type": "boolean" },
                                      "timeBased": { "type": "boolean" },
                                      "durationEstimated": { "type": "boolean" }
                                    }
                                  }
                                }
                              }
                            },
                            "gap": { "type": "boolean" },
                            "dateTimeBefore": {
                              "type": "string",
                              "format": "date-time"
                            },
                            "dateTimeAfter": {
                              "type": "string",
                              "format": "date-time"
                            }
                          }
                        }
                      },
                      "transitionRules": {
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "month": {
                              "type": "string",
                              "enum": [
                                "JANUARY",
                                "FEBRUARY",
                                "MARCH",
                                "APRIL",
                                "MAY",
                                "JUNE",
                                "JULY",
                                "AUGUST",
                                "SEPTEMBER",
                                "OCTOBER",
                                "NOVEMBER",
                                "DECEMBER"
                              ]
                            },
                            "timeDefinition": {
                              "type": "string",
                              "enum": ["UTC", "WALL", "STANDARD"]
                            },
                            "dayOfWeek": {
                              "type": "string",
                              "enum": [
                                "MONDAY",
                                "TUESDAY",
                                "WEDNESDAY",
                                "THURSDAY",
                                "FRIDAY",
                                "SATURDAY",
                                "SUNDAY"
                              ]
                            },
                            "dayOfMonthIndicator": {
                              "type": "integer",
                              "format": "int32"
                            },
                            "localTime": {
                              "$ref": "#/components/schemas/LocalTime"
                            },
                            "midnightEndOfDay": { "type": "boolean" }
                          }
                        }
                      }
                    }
                  }
                }
              },
              "hour": { "type": "integer", "format": "int32" },
              "minute": { "type": "integer", "format": "int32" },
              "second": { "type": "integer", "format": "int32" },
              "nano": { "type": "integer", "format": "int32" }
            },
            "description": "End time of break"
          },
          "userEmployee": { "type": "string", "format": "uuid" },
          "establishment": { "type": "string", "format": "uuid" }
        },
        "description": "Employee working time each day of the week"
      },
      "AddressDto": {
        "type": "object",
        "properties": {
          "cep": { "type": "string" },
          "uf": { "type": "string" },
          "city": { "type": "string" },
          "district": { "type": "string" },
          "road": { "type": "string" },
          "number": { "type": "string" },
          "complement": { "type": "string" }
        }
      },
      "UserDto": {
        "type": "object",
        "properties": {
          "name": { "type": "string" },
          "nickname": { "type": "string" },
          "email": { "type": "string" },
          "telephone": {
            "maxLength": 2147483647,
            "minLength": 9,
            "type": "string"
          },
          "userPass": { "type": "string" },
          "address": { "$ref": "#/components/schemas/AddressDto" }
        }
      },
      "UserPasswordDto": {
        "required": ["confirmUserPass", "userPass"],
        "type": "object",
        "properties": {
          "currentPassword": { "type": "string" },
          "userPass": {
            "maxLength": 2147483647,
            "minLength": 6,
            "type": "string"
          },
          "confirmUserPass": {
            "maxLength": 2147483647,
            "minLength": 6,
            "type": "string"
          }
        }
      },
      "UserLock": {
        "type": "object",
        "properties": {
          "userLockId": { "type": "string", "format": "uuid" },
          "establishment": { "$ref": "#/components/schemas/Establishment" },
          "lockedUser": { "$ref": "#/components/schemas/User" },
          "lockedAt": { "type": "string", "format": "date-time" },
          "manualLockUser": { "$ref": "#/components/schemas/User" },
          "situationType": {
            "type": "string",
            "enum": ["BLOCKED", "UNLOCKED"]
          },
          "unlockUser": { "$ref": "#/components/schemas/User" },
          "unlockAt": { "type": "string", "format": "date-time" }
        },
        "description": "Blocking to prevent the user from making new appointments at a given establishment"
      },
      "ServiceValueDto": {
        "type": "object",
        "properties": {
          "value": { "type": "number" },
          "description": { "type": "string" }
        }
      },
      "ServiceValue": {
        "type": "object",
        "properties": {
          "serviceValueId": { "type": "string", "format": "uuid" },
          "service": { "type": "string", "format": "uuid" },
          "description": { "type": "string" },
          "value": { "type": "number" },
          "situationType": { "type": "string", "enum": ["ACTIVE", "CANCELED"] },
          "createdAt": { "type": "string", "format": "date-time" }
        },
        "description": "Values of a service"
      },
      "ServiceLinkDto": {
        "type": "object",
        "properties": {
          "relatedServiceId": { "type": "string", "format": "uuid" },
          "relatedCategoryId": { "type": "string", "format": "uuid" },
          "quantity": { "type": "number" }
        }
      },
      "Category": {
        "type": "object",
        "properties": {
          "categoryId": { "type": "string", "format": "uuid" },
          "name": { "type": "string" },
          "situationType": { "type": "string", "enum": ["ACTIVE", "CANCELED"] },
          "establishment": { "type": "string", "format": "uuid" },
          "createdAt": { "type": "string", "format": "date-time" }
        },
        "description": "Category of the services of an establishment"
      },
      "ServiceDomain": {
        "type": "object",
        "properties": {
          "serviceId": { "type": "string", "format": "uuid" },
          "establishment": { "type": "string", "format": "uuid" },
          "category": { "type": "string", "format": "uuid" },
          "name": { "type": "string" },
          "amountTime": { "type": "integer", "format": "int64" },
          "situationType": { "type": "string", "enum": ["ACTIVE", "CANCELED"] },
          "createdAt": { "type": "string", "format": "date-time" },
          "value": { "type": "number" },
          "serviceValueList": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/ServiceValue" }
          }
        },
        "description": "Services of an establishment"
      },
      "ServiceLink": {
        "type": "object",
        "properties": {
          "serviceLinkId": { "type": "string", "format": "uuid" },
          "linkedService": { "$ref": "#/components/schemas/ServiceDomain" },
          "relatedService": { "$ref": "#/components/schemas/ServiceDomain" },
          "relatedCategory": { "$ref": "#/components/schemas/Category" },
          "quantity": { "type": "number" },
          "createdAt": { "type": "string", "format": "date-time" }
        },
        "description": "Links between services"
      },
      "ServiceDomainDto": {
        "type": "object",
        "properties": {
          "categoryId": { "type": "string", "format": "uuid" },
          "name": { "type": "string" },
          "amountTime": { "type": "integer", "format": "int64" }
        }
      },
      "CategoryDto": {
        "type": "object",
        "properties": { "name": { "type": "string" } }
      },
      "SchedulingServiceDomainDto": {
        "type": "object",
        "properties": {
          "serviceValueId": { "type": "string", "format": "uuid" },
          "serviceId": { "type": "string", "format": "uuid" },
          "value": { "type": "number" }
        }
      },
      "SchedulingServiceDomain": {
        "type": "object",
        "properties": {
          "schedulingServiceId": { "type": "string", "format": "uuid" },
          "scheduling": { "type": "string", "format": "uuid" },
          "service": { "$ref": "#/components/schemas/ServiceDomain" },
          "createdAt": { "type": "string", "format": "date-time" },
          "value": { "type": "number" },
          "situationType": { "type": "string", "enum": ["ACTIVE", "CANCELED"] },
          "attendanceService": { "type": "string", "format": "uuid" },
          "serviceValue": { "$ref": "#/components/schemas/ServiceValue" }
        },
        "description": "Services of an appointment"
      },
      "SchedulingDomainDto": {
        "type": "object",
        "properties": {
          "schedulingDate": { "type": "string", "format": "date-time" },
          "attendantUserId": { "type": "string", "format": "uuid" },
          "clientUserId": { "type": "string", "format": "uuid" },
          "observation": { "type": "string" },
          "serviceList": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SchedulingServiceDomainDto"
            }
          }
        }
      },
      "SchedulingDomain": {
        "type": "object",
        "properties": {
          "schedulingId": { "type": "string", "format": "uuid" },
          "establishment": { "type": "string", "format": "uuid" },
          "createdAt": { "type": "string", "format": "date-time" },
          "beginIn": { "type": "string", "format": "date-time" },
          "endIn": { "type": "string", "format": "date-time" },
          "attendantUser": { "$ref": "#/components/schemas/User" },
          "clientUser": { "$ref": "#/components/schemas/User" },
          "situationType": {
            "type": "string",
            "enum": ["PRE_SCHEDULED", "SCHEDULED", "REFUSED", "CANCELED"]
          },
          "observation": { "type": "string" },
          "publicReference": { "type": "string" },
          "totalServiceValue": { "type": "number" },
          "attendance": { "type": "string", "format": "uuid" }
        },
        "description": "Scheduling of services of an establishment"
      },
      "EstablishmentConfigDto": {
        "type": "object",
        "properties": {
          "defaultInterval": { "type": "integer", "format": "int64" },
          "amountMissingToBlock": { "type": "integer", "format": "int32" }
        }
      },
      "EstablishmentDto": {
        "type": "object",
        "properties": {
          "name": { "type": "string" },
          "responsibleUserId": { "type": "string", "format": "uuid" },
          "telephone": { "type": "string" },
          "publicIdentifier": { "type": "string" },
          "establishmentConfig": {
            "$ref": "#/components/schemas/EstablishmentConfigDto"
          },
          "address": { "$ref": "#/components/schemas/AddressDto" }
        }
      },
      "WorkDayDefaultDto": {
        "type": "object",
        "properties": {
          "dayWeek": {
            "type": "string",
            "enum": [
              "SUNDAY",
              "MONDAY",
              "TUESDAY",
              "WEDNESDAY",
              "THURSDAY",
              "FRIDAY",
              "SATURDAY"
            ]
          },
          "startService": {
            "type": "object",
            "properties": {
              "offset": {
                "type": "object",
                "properties": {
                  "totalSeconds": { "type": "integer", "format": "int32" },
                  "id": { "type": "string" },
                  "rules": {
                    "type": "object",
                    "properties": {
                      "fixedOffset": { "type": "boolean" },
                      "transitions": {
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "instant": {
                              "type": "string",
                              "format": "date-time"
                            },
                            "overlap": { "type": "boolean" },
                            "duration": {
                              "type": "object",
                              "properties": {
                                "seconds": {
                                  "type": "integer",
                                  "format": "int64"
                                },
                                "nano": {
                                  "type": "integer",
                                  "format": "int32"
                                },
                                "negative": { "type": "boolean" },
                                "zero": { "type": "boolean" },
                                "units": {
                                  "type": "array",
                                  "items": {
                                    "type": "object",
                                    "properties": {
                                      "dateBased": { "type": "boolean" },
                                      "timeBased": { "type": "boolean" },
                                      "durationEstimated": { "type": "boolean" }
                                    }
                                  }
                                }
                              }
                            },
                            "gap": { "type": "boolean" },
                            "dateTimeBefore": {
                              "type": "string",
                              "format": "date-time"
                            },
                            "dateTimeAfter": {
                              "type": "string",
                              "format": "date-time"
                            }
                          }
                        }
                      },
                      "transitionRules": {
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "month": {
                              "type": "string",
                              "enum": [
                                "JANUARY",
                                "FEBRUARY",
                                "MARCH",
                                "APRIL",
                                "MAY",
                                "JUNE",
                                "JULY",
                                "AUGUST",
                                "SEPTEMBER",
                                "OCTOBER",
                                "NOVEMBER",
                                "DECEMBER"
                              ]
                            },
                            "timeDefinition": {
                              "type": "string",
                              "enum": ["UTC", "WALL", "STANDARD"]
                            },
                            "dayOfWeek": {
                              "type": "string",
                              "enum": [
                                "MONDAY",
                                "TUESDAY",
                                "WEDNESDAY",
                                "THURSDAY",
                                "FRIDAY",
                                "SATURDAY",
                                "SUNDAY"
                              ]
                            },
                            "dayOfMonthIndicator": {
                              "type": "integer",
                              "format": "int32"
                            },
                            "localTime": {
                              "$ref": "#/components/schemas/LocalTime"
                            },
                            "midnightEndOfDay": { "type": "boolean" }
                          }
                        }
                      }
                    }
                  }
                }
              },
              "hour": { "type": "integer", "format": "int32" },
              "minute": { "type": "integer", "format": "int32" },
              "second": { "type": "integer", "format": "int32" },
              "nano": { "type": "integer", "format": "int32" }
            }
          },
          "startBreak": {
            "type": "object",
            "properties": {
              "offset": {
                "type": "object",
                "properties": {
                  "totalSeconds": { "type": "integer", "format": "int32" },
                  "id": { "type": "string" },
                  "rules": {
                    "type": "object",
                    "properties": {
                      "fixedOffset": { "type": "boolean" },
                      "transitions": {
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "instant": {
                              "type": "string",
                              "format": "date-time"
                            },
                            "overlap": { "type": "boolean" },
                            "duration": {
                              "type": "object",
                              "properties": {
                                "seconds": {
                                  "type": "integer",
                                  "format": "int64"
                                },
                                "nano": {
                                  "type": "integer",
                                  "format": "int32"
                                },
                                "negative": { "type": "boolean" },
                                "zero": { "type": "boolean" },
                                "units": {
                                  "type": "array",
                                  "items": {
                                    "type": "object",
                                    "properties": {
                                      "dateBased": { "type": "boolean" },
                                      "timeBased": { "type": "boolean" },
                                      "durationEstimated": { "type": "boolean" }
                                    }
                                  }
                                }
                              }
                            },
                            "gap": { "type": "boolean" },
                            "dateTimeBefore": {
                              "type": "string",
                              "format": "date-time"
                            },
                            "dateTimeAfter": {
                              "type": "string",
                              "format": "date-time"
                            }
                          }
                        }
                      },
                      "transitionRules": {
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "month": {
                              "type": "string",
                              "enum": [
                                "JANUARY",
                                "FEBRUARY",
                                "MARCH",
                                "APRIL",
                                "MAY",
                                "JUNE",
                                "JULY",
                                "AUGUST",
                                "SEPTEMBER",
                                "OCTOBER",
                                "NOVEMBER",
                                "DECEMBER"
                              ]
                            },
                            "timeDefinition": {
                              "type": "string",
                              "enum": ["UTC", "WALL", "STANDARD"]
                            },
                            "dayOfWeek": {
                              "type": "string",
                              "enum": [
                                "MONDAY",
                                "TUESDAY",
                                "WEDNESDAY",
                                "THURSDAY",
                                "FRIDAY",
                                "SATURDAY",
                                "SUNDAY"
                              ]
                            },
                            "dayOfMonthIndicator": {
                              "type": "integer",
                              "format": "int32"
                            },
                            "localTime": {
                              "$ref": "#/components/schemas/LocalTime"
                            },
                            "midnightEndOfDay": { "type": "boolean" }
                          }
                        }
                      }
                    }
                  }
                }
              },
              "hour": { "type": "integer", "format": "int32" },
              "minute": { "type": "integer", "format": "int32" },
              "second": { "type": "integer", "format": "int32" },
              "nano": { "type": "integer", "format": "int32" }
            }
          },
          "endBreak": {
            "type": "object",
            "properties": {
              "offset": {
                "type": "object",
                "properties": {
                  "totalSeconds": { "type": "integer", "format": "int32" },
                  "id": { "type": "string" },
                  "rules": {
                    "type": "object",
                    "properties": {
                      "fixedOffset": { "type": "boolean" },
                      "transitions": {
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "instant": {
                              "type": "string",
                              "format": "date-time"
                            },
                            "overlap": { "type": "boolean" },
                            "duration": {
                              "type": "object",
                              "properties": {
                                "seconds": {
                                  "type": "integer",
                                  "format": "int64"
                                },
                                "nano": {
                                  "type": "integer",
                                  "format": "int32"
                                },
                                "negative": { "type": "boolean" },
                                "zero": { "type": "boolean" },
                                "units": {
                                  "type": "array",
                                  "items": {
                                    "type": "object",
                                    "properties": {
                                      "dateBased": { "type": "boolean" },
                                      "timeBased": { "type": "boolean" },
                                      "durationEstimated": { "type": "boolean" }
                                    }
                                  }
                                }
                              }
                            },
                            "gap": { "type": "boolean" },
                            "dateTimeBefore": {
                              "type": "string",
                              "format": "date-time"
                            },
                            "dateTimeAfter": {
                              "type": "string",
                              "format": "date-time"
                            }
                          }
                        }
                      },
                      "transitionRules": {
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "month": {
                              "type": "string",
                              "enum": [
                                "JANUARY",
                                "FEBRUARY",
                                "MARCH",
                                "APRIL",
                                "MAY",
                                "JUNE",
                                "JULY",
                                "AUGUST",
                                "SEPTEMBER",
                                "OCTOBER",
                                "NOVEMBER",
                                "DECEMBER"
                              ]
                            },
                            "timeDefinition": {
                              "type": "string",
                              "enum": ["UTC", "WALL", "STANDARD"]
                            },
                            "dayOfWeek": {
                              "type": "string",
                              "enum": [
                                "MONDAY",
                                "TUESDAY",
                                "WEDNESDAY",
                                "THURSDAY",
                                "FRIDAY",
                                "SATURDAY",
                                "SUNDAY"
                              ]
                            },
                            "dayOfMonthIndicator": {
                              "type": "integer",
                              "format": "int32"
                            },
                            "localTime": {
                              "$ref": "#/components/schemas/LocalTime"
                            },
                            "midnightEndOfDay": { "type": "boolean" }
                          }
                        }
                      }
                    }
                  }
                }
              },
              "hour": { "type": "integer", "format": "int32" },
              "minute": { "type": "integer", "format": "int32" },
              "second": { "type": "integer", "format": "int32" },
              "nano": { "type": "integer", "format": "int32" }
            }
          },
          "endService": {
            "type": "object",
            "properties": {
              "offset": {
                "type": "object",
                "properties": {
                  "totalSeconds": { "type": "integer", "format": "int32" },
                  "id": { "type": "string" },
                  "rules": {
                    "type": "object",
                    "properties": {
                      "fixedOffset": { "type": "boolean" },
                      "transitions": {
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "instant": {
                              "type": "string",
                              "format": "date-time"
                            },
                            "overlap": { "type": "boolean" },
                            "duration": {
                              "type": "object",
                              "properties": {
                                "seconds": {
                                  "type": "integer",
                                  "format": "int64"
                                },
                                "nano": {
                                  "type": "integer",
                                  "format": "int32"
                                },
                                "negative": { "type": "boolean" },
                                "zero": { "type": "boolean" },
                                "units": {
                                  "type": "array",
                                  "items": {
                                    "type": "object",
                                    "properties": {
                                      "dateBased": { "type": "boolean" },
                                      "timeBased": { "type": "boolean" },
                                      "durationEstimated": { "type": "boolean" }
                                    }
                                  }
                                }
                              }
                            },
                            "gap": { "type": "boolean" },
                            "dateTimeBefore": {
                              "type": "string",
                              "format": "date-time"
                            },
                            "dateTimeAfter": {
                              "type": "string",
                              "format": "date-time"
                            }
                          }
                        }
                      },
                      "transitionRules": {
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "month": {
                              "type": "string",
                              "enum": [
                                "JANUARY",
                                "FEBRUARY",
                                "MARCH",
                                "APRIL",
                                "MAY",
                                "JUNE",
                                "JULY",
                                "AUGUST",
                                "SEPTEMBER",
                                "OCTOBER",
                                "NOVEMBER",
                                "DECEMBER"
                              ]
                            },
                            "timeDefinition": {
                              "type": "string",
                              "enum": ["UTC", "WALL", "STANDARD"]
                            },
                            "dayOfWeek": {
                              "type": "string",
                              "enum": [
                                "MONDAY",
                                "TUESDAY",
                                "WEDNESDAY",
                                "THURSDAY",
                                "FRIDAY",
                                "SATURDAY",
                                "SUNDAY"
                              ]
                            },
                            "dayOfMonthIndicator": {
                              "type": "integer",
                              "format": "int32"
                            },
                            "localTime": {
                              "$ref": "#/components/schemas/LocalTime"
                            },
                            "midnightEndOfDay": { "type": "boolean" }
                          }
                        }
                      }
                    }
                  }
                }
              },
              "hour": { "type": "integer", "format": "int32" },
              "minute": { "type": "integer", "format": "int32" },
              "second": { "type": "integer", "format": "int32" },
              "nano": { "type": "integer", "format": "int32" }
            }
          }
        }
      },
      "WorkDayDefault": {
        "type": "object",
        "properties": {
          "workDayDefaultId": {
            "type": "string",
            "description": "Primary key",
            "format": "uuid"
          },
          "dayWeek": { "$ref": "#/components/schemas/WeekTab" },
          "startService": {
            "type": "object",
            "properties": {
              "offset": {
                "type": "object",
                "properties": {
                  "totalSeconds": { "type": "integer", "format": "int32" },
                  "id": { "type": "string" },
                  "rules": {
                    "type": "object",
                    "properties": {
                      "fixedOffset": { "type": "boolean" },
                      "transitions": {
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "instant": {
                              "type": "string",
                              "format": "date-time"
                            },
                            "overlap": { "type": "boolean" },
                            "duration": {
                              "type": "object",
                              "properties": {
                                "seconds": {
                                  "type": "integer",
                                  "format": "int64"
                                },
                                "nano": {
                                  "type": "integer",
                                  "format": "int32"
                                },
                                "negative": { "type": "boolean" },
                                "zero": { "type": "boolean" },
                                "units": {
                                  "type": "array",
                                  "items": {
                                    "type": "object",
                                    "properties": {
                                      "dateBased": { "type": "boolean" },
                                      "timeBased": { "type": "boolean" },
                                      "durationEstimated": { "type": "boolean" }
                                    }
                                  }
                                }
                              }
                            },
                            "gap": { "type": "boolean" },
                            "dateTimeBefore": {
                              "type": "string",
                              "format": "date-time"
                            },
                            "dateTimeAfter": {
                              "type": "string",
                              "format": "date-time"
                            }
                          }
                        }
                      },
                      "transitionRules": {
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "month": {
                              "type": "string",
                              "enum": [
                                "JANUARY",
                                "FEBRUARY",
                                "MARCH",
                                "APRIL",
                                "MAY",
                                "JUNE",
                                "JULY",
                                "AUGUST",
                                "SEPTEMBER",
                                "OCTOBER",
                                "NOVEMBER",
                                "DECEMBER"
                              ]
                            },
                            "timeDefinition": {
                              "type": "string",
                              "enum": ["UTC", "WALL", "STANDARD"]
                            },
                            "dayOfWeek": {
                              "type": "string",
                              "enum": [
                                "MONDAY",
                                "TUESDAY",
                                "WEDNESDAY",
                                "THURSDAY",
                                "FRIDAY",
                                "SATURDAY",
                                "SUNDAY"
                              ]
                            },
                            "dayOfMonthIndicator": {
                              "type": "integer",
                              "format": "int32"
                            },
                            "localTime": {
                              "$ref": "#/components/schemas/LocalTime"
                            },
                            "midnightEndOfDay": { "type": "boolean" }
                          }
                        }
                      }
                    }
                  }
                }
              },
              "hour": { "type": "integer", "format": "int32" },
              "minute": { "type": "integer", "format": "int32" },
              "second": { "type": "integer", "format": "int32" },
              "nano": { "type": "integer", "format": "int32" }
            },
            "description": "Start time of work"
          },
          "endService": {
            "type": "object",
            "properties": {
              "offset": {
                "type": "object",
                "properties": {
                  "totalSeconds": { "type": "integer", "format": "int32" },
                  "id": { "type": "string" },
                  "rules": {
                    "type": "object",
                    "properties": {
                      "fixedOffset": { "type": "boolean" },
                      "transitions": {
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "instant": {
                              "type": "string",
                              "format": "date-time"
                            },
                            "overlap": { "type": "boolean" },
                            "duration": {
                              "type": "object",
                              "properties": {
                                "seconds": {
                                  "type": "integer",
                                  "format": "int64"
                                },
                                "nano": {
                                  "type": "integer",
                                  "format": "int32"
                                },
                                "negative": { "type": "boolean" },
                                "zero": { "type": "boolean" },
                                "units": {
                                  "type": "array",
                                  "items": {
                                    "type": "object",
                                    "properties": {
                                      "dateBased": { "type": "boolean" },
                                      "timeBased": { "type": "boolean" },
                                      "durationEstimated": { "type": "boolean" }
                                    }
                                  }
                                }
                              }
                            },
                            "gap": { "type": "boolean" },
                            "dateTimeBefore": {
                              "type": "string",
                              "format": "date-time"
                            },
                            "dateTimeAfter": {
                              "type": "string",
                              "format": "date-time"
                            }
                          }
                        }
                      },
                      "transitionRules": {
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "month": {
                              "type": "string",
                              "enum": [
                                "JANUARY",
                                "FEBRUARY",
                                "MARCH",
                                "APRIL",
                                "MAY",
                                "JUNE",
                                "JULY",
                                "AUGUST",
                                "SEPTEMBER",
                                "OCTOBER",
                                "NOVEMBER",
                                "DECEMBER"
                              ]
                            },
                            "timeDefinition": {
                              "type": "string",
                              "enum": ["UTC", "WALL", "STANDARD"]
                            },
                            "dayOfWeek": {
                              "type": "string",
                              "enum": [
                                "MONDAY",
                                "TUESDAY",
                                "WEDNESDAY",
                                "THURSDAY",
                                "FRIDAY",
                                "SATURDAY",
                                "SUNDAY"
                              ]
                            },
                            "dayOfMonthIndicator": {
                              "type": "integer",
                              "format": "int32"
                            },
                            "localTime": {
                              "$ref": "#/components/schemas/LocalTime"
                            },
                            "midnightEndOfDay": { "type": "boolean" }
                          }
                        }
                      }
                    }
                  }
                }
              },
              "hour": { "type": "integer", "format": "int32" },
              "minute": { "type": "integer", "format": "int32" },
              "second": { "type": "integer", "format": "int32" },
              "nano": { "type": "integer", "format": "int32" }
            },
            "description": "End time of work"
          },
          "startBreak": {
            "type": "object",
            "properties": {
              "offset": {
                "type": "object",
                "properties": {
                  "totalSeconds": { "type": "integer", "format": "int32" },
                  "id": { "type": "string" },
                  "rules": {
                    "type": "object",
                    "properties": {
                      "fixedOffset": { "type": "boolean" },
                      "transitions": {
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "instant": {
                              "type": "string",
                              "format": "date-time"
                            },
                            "overlap": { "type": "boolean" },
                            "duration": {
                              "type": "object",
                              "properties": {
                                "seconds": {
                                  "type": "integer",
                                  "format": "int64"
                                },
                                "nano": {
                                  "type": "integer",
                                  "format": "int32"
                                },
                                "negative": { "type": "boolean" },
                                "zero": { "type": "boolean" },
                                "units": {
                                  "type": "array",
                                  "items": {
                                    "type": "object",
                                    "properties": {
                                      "dateBased": { "type": "boolean" },
                                      "timeBased": { "type": "boolean" },
                                      "durationEstimated": { "type": "boolean" }
                                    }
                                  }
                                }
                              }
                            },
                            "gap": { "type": "boolean" },
                            "dateTimeBefore": {
                              "type": "string",
                              "format": "date-time"
                            },
                            "dateTimeAfter": {
                              "type": "string",
                              "format": "date-time"
                            }
                          }
                        }
                      },
                      "transitionRules": {
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "month": {
                              "type": "string",
                              "enum": [
                                "JANUARY",
                                "FEBRUARY",
                                "MARCH",
                                "APRIL",
                                "MAY",
                                "JUNE",
                                "JULY",
                                "AUGUST",
                                "SEPTEMBER",
                                "OCTOBER",
                                "NOVEMBER",
                                "DECEMBER"
                              ]
                            },
                            "timeDefinition": {
                              "type": "string",
                              "enum": ["UTC", "WALL", "STANDARD"]
                            },
                            "dayOfWeek": {
                              "type": "string",
                              "enum": [
                                "MONDAY",
                                "TUESDAY",
                                "WEDNESDAY",
                                "THURSDAY",
                                "FRIDAY",
                                "SATURDAY",
                                "SUNDAY"
                              ]
                            },
                            "dayOfMonthIndicator": {
                              "type": "integer",
                              "format": "int32"
                            },
                            "localTime": {
                              "$ref": "#/components/schemas/LocalTime"
                            },
                            "midnightEndOfDay": { "type": "boolean" }
                          }
                        }
                      }
                    }
                  }
                }
              },
              "hour": { "type": "integer", "format": "int32" },
              "minute": { "type": "integer", "format": "int32" },
              "second": { "type": "integer", "format": "int32" },
              "nano": { "type": "integer", "format": "int32" }
            },
            "description": "Start time of break"
          },
          "endBreak": {
            "type": "object",
            "properties": {
              "offset": {
                "type": "object",
                "properties": {
                  "totalSeconds": { "type": "integer", "format": "int32" },
                  "id": { "type": "string" },
                  "rules": {
                    "type": "object",
                    "properties": {
                      "fixedOffset": { "type": "boolean" },
                      "transitions": {
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "instant": {
                              "type": "string",
                              "format": "date-time"
                            },
                            "overlap": { "type": "boolean" },
                            "duration": {
                              "type": "object",
                              "properties": {
                                "seconds": {
                                  "type": "integer",
                                  "format": "int64"
                                },
                                "nano": {
                                  "type": "integer",
                                  "format": "int32"
                                },
                                "negative": { "type": "boolean" },
                                "zero": { "type": "boolean" },
                                "units": {
                                  "type": "array",
                                  "items": {
                                    "type": "object",
                                    "properties": {
                                      "dateBased": { "type": "boolean" },
                                      "timeBased": { "type": "boolean" },
                                      "durationEstimated": { "type": "boolean" }
                                    }
                                  }
                                }
                              }
                            },
                            "gap": { "type": "boolean" },
                            "dateTimeBefore": {
                              "type": "string",
                              "format": "date-time"
                            },
                            "dateTimeAfter": {
                              "type": "string",
                              "format": "date-time"
                            }
                          }
                        }
                      },
                      "transitionRules": {
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "month": {
                              "type": "string",
                              "enum": [
                                "JANUARY",
                                "FEBRUARY",
                                "MARCH",
                                "APRIL",
                                "MAY",
                                "JUNE",
                                "JULY",
                                "AUGUST",
                                "SEPTEMBER",
                                "OCTOBER",
                                "NOVEMBER",
                                "DECEMBER"
                              ]
                            },
                            "timeDefinition": {
                              "type": "string",
                              "enum": ["UTC", "WALL", "STANDARD"]
                            },
                            "dayOfWeek": {
                              "type": "string",
                              "enum": [
                                "MONDAY",
                                "TUESDAY",
                                "WEDNESDAY",
                                "THURSDAY",
                                "FRIDAY",
                                "SATURDAY",
                                "SUNDAY"
                              ]
                            },
                            "dayOfMonthIndicator": {
                              "type": "integer",
                              "format": "int32"
                            },
                            "localTime": {
                              "$ref": "#/components/schemas/LocalTime"
                            },
                            "midnightEndOfDay": { "type": "boolean" }
                          }
                        }
                      }
                    }
                  }
                }
              },
              "hour": { "type": "integer", "format": "int32" },
              "minute": { "type": "integer", "format": "int32" },
              "second": { "type": "integer", "format": "int32" },
              "nano": { "type": "integer", "format": "int32" }
            },
            "description": "End time of break"
          },
          "establishment": { "type": "string", "format": "uuid" }
        },
        "description": "Standard working hours by establishment to facilitate employee registration"
      },
      "AttendanceDomainDto": {
        "required": ["paymentType"],
        "type": "object",
        "properties": {
          "attendantUserId": { "type": "string", "format": "uuid" },
          "clientUserId": { "type": "string", "format": "uuid" },
          "paymentType": {
            "type": "string",
            "enum": ["MONEY", "CREDIT_CARD", "DEBIT_CARD", "PIX", "PIC_PAY"]
          },
          "observation": { "type": "string" }
        }
      },
      "AttendanceDomain": {
        "type": "object",
        "properties": {
          "attendanceId": { "type": "string", "format": "uuid" },
          "establishment": { "type": "string", "format": "uuid" },
          "attendantUser": { "$ref": "#/components/schemas/User" },
          "clientUser": { "$ref": "#/components/schemas/User" },
          "createdAt": { "type": "string", "format": "date-time" },
          "paymentType": {
            "type": "string",
            "enum": ["MONEY", "CREDIT_CARD", "DEBIT_CARD", "PIX", "PIC_PAY"]
          },
          "situationType": {
            "type": "string",
            "enum": [
              "ACTIVE",
              "PARTIALLY_ANSWERED",
              "CONCLUDED",
              "ABSENT",
              "CANCELED"
            ]
          },
          "observation": { "type": "string" }
        },
        "description": "Attendance of services that can be generated from one or more scheduling"
      },
      "AttendanceFinishDto": {
        "type": "object",
        "properties": {
          "observation": { "maxLength": 255, "minLength": 10, "type": "string" }
        }
      },
      "AttendanceServiceDomainDto": {
        "type": "object",
        "properties": {
          "serviceId": { "type": "string", "format": "uuid" },
          "quantity": { "type": "number" },
          "value": { "type": "number" }
        }
      },
      "AttendanceServiceDomain": {
        "type": "object",
        "properties": {
          "attendanceServiceId": { "type": "string", "format": "uuid" },
          "attendance": { "type": "string", "format": "uuid" },
          "service": { "$ref": "#/components/schemas/ServiceDomain" },
          "createdAt": { "type": "string", "format": "date-time" },
          "quantity": { "type": "number" },
          "value": { "type": "number" },
          "situationType": { "type": "string", "enum": ["ACTIVE", "CANCELED"] }
        },
        "description": "Services of an attendance generated from a scheduling service"
      },
      "WhatsappWebhookValidationDto": {
        "required": ["awsRequestId", "challenge", "hubMode", "token"],
        "type": "object",
        "properties": {
          "hubMode": { "type": "string" },
          "token": { "type": "string" },
          "challenge": { "type": "string" },
          "awsRequestId": { "type": "string" }
        }
      },
      "WaMsgModelAccount": {
        "required": ["situationType", "waAccount", "waMsgModel"],
        "type": "object",
        "properties": {
          "waMsgModelAccountId": { "type": "string", "format": "uuid" },
          "waMsgModel": { "type": "string", "format": "uuid" },
          "waAccount": { "type": "string", "format": "uuid" },
          "situationType": { "type": "string", "enum": ["ACTIVE", "CANCELLED"] }
        },
        "description": "Message template link with establishment"
      },
      "WaMsgInteractiveAccount": {
        "required": [
          "body",
          "isDefaultType",
          "situationType",
          "waAccount",
          "waMsgInteractive"
        ],
        "type": "object",
        "properties": {
          "waMsgInteractiveAccountId": { "type": "string", "format": "uuid" },
          "title": { "maxLength": 90, "minLength": 0, "type": "string" },
          "body": { "maxLength": 1024, "minLength": 0, "type": "string" },
          "footer": { "maxLength": 90, "minLength": 0, "type": "string" },
          "waMsgInteractive": { "type": "string", "format": "uuid" },
          "waAccount": { "type": "string", "format": "uuid" },
          "situationType": {
            "type": "string",
            "enum": ["ACTIVE", "CANCELLED"]
          },
          "isDefaultType": { "type": "string", "enum": ["YES", "NO"] }
        },
        "description": "Linking interactive messages with establishment, allowing customizations"
      },
      "WorkHourSchedExceptionDto": {
        "type": "object",
        "properties": {
          "dayException": { "type": "string", "format": "date" },
          "workHourId": { "type": "string", "format": "uuid" },
          "startTime": {
            "type": "object",
            "properties": {
              "offset": {
                "type": "object",
                "properties": {
                  "totalSeconds": { "type": "integer", "format": "int32" },
                  "id": { "type": "string" },
                  "rules": {
                    "type": "object",
                    "properties": {
                      "fixedOffset": { "type": "boolean" },
                      "transitions": {
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "instant": {
                              "type": "string",
                              "format": "date-time"
                            },
                            "overlap": { "type": "boolean" },
                            "duration": {
                              "type": "object",
                              "properties": {
                                "seconds": {
                                  "type": "integer",
                                  "format": "int64"
                                },
                                "nano": {
                                  "type": "integer",
                                  "format": "int32"
                                },
                                "negative": { "type": "boolean" },
                                "zero": { "type": "boolean" },
                                "units": {
                                  "type": "array",
                                  "items": {
                                    "type": "object",
                                    "properties": {
                                      "dateBased": { "type": "boolean" },
                                      "timeBased": { "type": "boolean" },
                                      "durationEstimated": { "type": "boolean" }
                                    }
                                  }
                                }
                              }
                            },
                            "gap": { "type": "boolean" },
                            "dateTimeBefore": {
                              "type": "string",
                              "format": "date-time"
                            },
                            "dateTimeAfter": {
                              "type": "string",
                              "format": "date-time"
                            }
                          }
                        }
                      },
                      "transitionRules": {
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "month": {
                              "type": "string",
                              "enum": [
                                "JANUARY",
                                "FEBRUARY",
                                "MARCH",
                                "APRIL",
                                "MAY",
                                "JUNE",
                                "JULY",
                                "AUGUST",
                                "SEPTEMBER",
                                "OCTOBER",
                                "NOVEMBER",
                                "DECEMBER"
                              ]
                            },
                            "timeDefinition": {
                              "type": "string",
                              "enum": ["UTC", "WALL", "STANDARD"]
                            },
                            "dayOfWeek": {
                              "type": "string",
                              "enum": [
                                "MONDAY",
                                "TUESDAY",
                                "WEDNESDAY",
                                "THURSDAY",
                                "FRIDAY",
                                "SATURDAY",
                                "SUNDAY"
                              ]
                            },
                            "dayOfMonthIndicator": {
                              "type": "integer",
                              "format": "int32"
                            },
                            "localTime": {
                              "$ref": "#/components/schemas/LocalTime"
                            },
                            "midnightEndOfDay": { "type": "boolean" }
                          }
                        }
                      }
                    }
                  }
                }
              },
              "hour": { "type": "integer", "format": "int32" },
              "minute": { "type": "integer", "format": "int32" },
              "second": { "type": "integer", "format": "int32" },
              "nano": { "type": "integer", "format": "int32" }
            }
          },
          "endTime": {
            "type": "object",
            "properties": {
              "offset": {
                "type": "object",
                "properties": {
                  "totalSeconds": { "type": "integer", "format": "int32" },
                  "id": { "type": "string" },
                  "rules": {
                    "type": "object",
                    "properties": {
                      "fixedOffset": { "type": "boolean" },
                      "transitions": {
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "instant": {
                              "type": "string",
                              "format": "date-time"
                            },
                            "overlap": { "type": "boolean" },
                            "duration": {
                              "type": "object",
                              "properties": {
                                "seconds": {
                                  "type": "integer",
                                  "format": "int64"
                                },
                                "nano": {
                                  "type": "integer",
                                  "format": "int32"
                                },
                                "negative": { "type": "boolean" },
                                "zero": { "type": "boolean" },
                                "units": {
                                  "type": "array",
                                  "items": {
                                    "type": "object",
                                    "properties": {
                                      "dateBased": { "type": "boolean" },
                                      "timeBased": { "type": "boolean" },
                                      "durationEstimated": { "type": "boolean" }
                                    }
                                  }
                                }
                              }
                            },
                            "gap": { "type": "boolean" },
                            "dateTimeBefore": {
                              "type": "string",
                              "format": "date-time"
                            },
                            "dateTimeAfter": {
                              "type": "string",
                              "format": "date-time"
                            }
                          }
                        }
                      },
                      "transitionRules": {
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "month": {
                              "type": "string",
                              "enum": [
                                "JANUARY",
                                "FEBRUARY",
                                "MARCH",
                                "APRIL",
                                "MAY",
                                "JUNE",
                                "JULY",
                                "AUGUST",
                                "SEPTEMBER",
                                "OCTOBER",
                                "NOVEMBER",
                                "DECEMBER"
                              ]
                            },
                            "timeDefinition": {
                              "type": "string",
                              "enum": ["UTC", "WALL", "STANDARD"]
                            },
                            "dayOfWeek": {
                              "type": "string",
                              "enum": [
                                "MONDAY",
                                "TUESDAY",
                                "WEDNESDAY",
                                "THURSDAY",
                                "FRIDAY",
                                "SATURDAY",
                                "SUNDAY"
                              ]
                            },
                            "dayOfMonthIndicator": {
                              "type": "integer",
                              "format": "int32"
                            },
                            "localTime": {
                              "$ref": "#/components/schemas/LocalTime"
                            },
                            "midnightEndOfDay": { "type": "boolean" }
                          }
                        }
                      }
                    }
                  }
                }
              },
              "hour": { "type": "integer", "format": "int32" },
              "minute": { "type": "integer", "format": "int32" },
              "second": { "type": "integer", "format": "int32" },
              "nano": { "type": "integer", "format": "int32" }
            }
          }
        }
      },
      "WorkHourSched": {
        "type": "object",
        "properties": {
          "workHourId": { "type": "string", "format": "uuid" },
          "dayWeek": {
            "type": "string",
            "enum": [
              "SUNDAY",
              "MONDAY",
              "TUESDAY",
              "WEDNESDAY",
              "THURSDAY",
              "FRIDAY",
              "SATURDAY"
            ]
          },
          "hour": {
            "type": "object",
            "properties": {
              "offset": {
                "type": "object",
                "properties": {
                  "totalSeconds": { "type": "integer", "format": "int32" },
                  "id": { "type": "string" },
                  "rules": {
                    "type": "object",
                    "properties": {
                      "fixedOffset": { "type": "boolean" },
                      "transitions": {
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "instant": {
                              "type": "string",
                              "format": "date-time"
                            },
                            "overlap": { "type": "boolean" },
                            "duration": {
                              "type": "object",
                              "properties": {
                                "seconds": {
                                  "type": "integer",
                                  "format": "int64"
                                },
                                "nano": {
                                  "type": "integer",
                                  "format": "int32"
                                },
                                "negative": { "type": "boolean" },
                                "zero": { "type": "boolean" },
                                "units": {
                                  "type": "array",
                                  "items": {
                                    "type": "object",
                                    "properties": {
                                      "dateBased": { "type": "boolean" },
                                      "timeBased": { "type": "boolean" },
                                      "durationEstimated": { "type": "boolean" }
                                    }
                                  }
                                }
                              }
                            },
                            "gap": { "type": "boolean" },
                            "dateTimeBefore": {
                              "type": "string",
                              "format": "date-time"
                            },
                            "dateTimeAfter": {
                              "type": "string",
                              "format": "date-time"
                            }
                          }
                        }
                      },
                      "transitionRules": {
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "month": {
                              "type": "string",
                              "enum": [
                                "JANUARY",
                                "FEBRUARY",
                                "MARCH",
                                "APRIL",
                                "MAY",
                                "JUNE",
                                "JULY",
                                "AUGUST",
                                "SEPTEMBER",
                                "OCTOBER",
                                "NOVEMBER",
                                "DECEMBER"
                              ]
                            },
                            "timeDefinition": {
                              "type": "string",
                              "enum": ["UTC", "WALL", "STANDARD"]
                            },
                            "dayOfWeek": {
                              "type": "string",
                              "enum": [
                                "MONDAY",
                                "TUESDAY",
                                "WEDNESDAY",
                                "THURSDAY",
                                "FRIDAY",
                                "SATURDAY",
                                "SUNDAY"
                              ]
                            },
                            "dayOfMonthIndicator": {
                              "type": "integer",
                              "format": "int32"
                            },
                            "localTime": {
                              "$ref": "#/components/schemas/LocalTime"
                            },
                            "midnightEndOfDay": { "type": "boolean" }
                          }
                        }
                      }
                    }
                  }
                }
              },
              "hour": { "type": "integer", "format": "int32" },
              "minute": { "type": "integer", "format": "int32" },
              "second": { "type": "integer", "format": "int32" },
              "nano": { "type": "integer", "format": "int32" }
            }
          },
          "establishment": { "type": "string", "format": "uuid" },
          "userEmployee": { "type": "string", "format": "uuid" },
          "situationType": { "type": "string", "enum": ["ACTIVE", "CANCELED"] },
          "workHourSchedExceptions": {
            "$ref": "#/components/schemas/WorkHourSchedException"
          }
        },
        "description": "Establishment hours, for an employee, that can be made service scheduling"
      },
      "WorkHourSchedException": {
        "type": "object",
        "properties": {
          "workHourSchedExceptionId": { "type": "string", "format": "uuid" },
          "dayException": { "type": "string", "format": "date" },
          "createdAt": { "type": "string", "format": "date-time" },
          "workHourSched": { "$ref": "#/components/schemas/WorkHourSched" },
          "startTime": {
            "type": "object",
            "properties": {
              "offset": {
                "type": "object",
                "properties": {
                  "totalSeconds": { "type": "integer", "format": "int32" },
                  "id": { "type": "string" },
                  "rules": {
                    "type": "object",
                    "properties": {
                      "fixedOffset": { "type": "boolean" },
                      "transitions": {
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "instant": {
                              "type": "string",
                              "format": "date-time"
                            },
                            "overlap": { "type": "boolean" },
                            "duration": {
                              "type": "object",
                              "properties": {
                                "seconds": {
                                  "type": "integer",
                                  "format": "int64"
                                },
                                "nano": {
                                  "type": "integer",
                                  "format": "int32"
                                },
                                "negative": { "type": "boolean" },
                                "zero": { "type": "boolean" },
                                "units": {
                                  "type": "array",
                                  "items": {
                                    "type": "object",
                                    "properties": {
                                      "dateBased": { "type": "boolean" },
                                      "timeBased": { "type": "boolean" },
                                      "durationEstimated": { "type": "boolean" }
                                    }
                                  }
                                }
                              }
                            },
                            "gap": { "type": "boolean" },
                            "dateTimeBefore": {
                              "type": "string",
                              "format": "date-time"
                            },
                            "dateTimeAfter": {
                              "type": "string",
                              "format": "date-time"
                            }
                          }
                        }
                      },
                      "transitionRules": {
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "month": {
                              "type": "string",
                              "enum": [
                                "JANUARY",
                                "FEBRUARY",
                                "MARCH",
                                "APRIL",
                                "MAY",
                                "JUNE",
                                "JULY",
                                "AUGUST",
                                "SEPTEMBER",
                                "OCTOBER",
                                "NOVEMBER",
                                "DECEMBER"
                              ]
                            },
                            "timeDefinition": {
                              "type": "string",
                              "enum": ["UTC", "WALL", "STANDARD"]
                            },
                            "dayOfWeek": {
                              "type": "string",
                              "enum": [
                                "MONDAY",
                                "TUESDAY",
                                "WEDNESDAY",
                                "THURSDAY",
                                "FRIDAY",
                                "SATURDAY",
                                "SUNDAY"
                              ]
                            },
                            "dayOfMonthIndicator": {
                              "type": "integer",
                              "format": "int32"
                            },
                            "localTime": {
                              "$ref": "#/components/schemas/LocalTime"
                            },
                            "midnightEndOfDay": { "type": "boolean" }
                          }
                        }
                      }
                    }
                  }
                }
              },
              "hour": { "type": "integer", "format": "int32" },
              "minute": { "type": "integer", "format": "int32" },
              "second": { "type": "integer", "format": "int32" },
              "nano": { "type": "integer", "format": "int32" }
            }
          },
          "endTime": {
            "type": "object",
            "properties": {
              "offset": {
                "type": "object",
                "properties": {
                  "totalSeconds": { "type": "integer", "format": "int32" },
                  "id": { "type": "string" },
                  "rules": {
                    "type": "object",
                    "properties": {
                      "fixedOffset": { "type": "boolean" },
                      "transitions": {
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "instant": {
                              "type": "string",
                              "format": "date-time"
                            },
                            "overlap": { "type": "boolean" },
                            "duration": {
                              "type": "object",
                              "properties": {
                                "seconds": {
                                  "type": "integer",
                                  "format": "int64"
                                },
                                "nano": {
                                  "type": "integer",
                                  "format": "int32"
                                },
                                "negative": { "type": "boolean" },
                                "zero": { "type": "boolean" },
                                "units": {
                                  "type": "array",
                                  "items": {
                                    "type": "object",
                                    "properties": {
                                      "dateBased": { "type": "boolean" },
                                      "timeBased": { "type": "boolean" },
                                      "durationEstimated": { "type": "boolean" }
                                    }
                                  }
                                }
                              }
                            },
                            "gap": { "type": "boolean" },
                            "dateTimeBefore": {
                              "type": "string",
                              "format": "date-time"
                            },
                            "dateTimeAfter": {
                              "type": "string",
                              "format": "date-time"
                            }
                          }
                        }
                      },
                      "transitionRules": {
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "month": {
                              "type": "string",
                              "enum": [
                                "JANUARY",
                                "FEBRUARY",
                                "MARCH",
                                "APRIL",
                                "MAY",
                                "JUNE",
                                "JULY",
                                "AUGUST",
                                "SEPTEMBER",
                                "OCTOBER",
                                "NOVEMBER",
                                "DECEMBER"
                              ]
                            },
                            "timeDefinition": {
                              "type": "string",
                              "enum": ["UTC", "WALL", "STANDARD"]
                            },
                            "dayOfWeek": {
                              "type": "string",
                              "enum": [
                                "MONDAY",
                                "TUESDAY",
                                "WEDNESDAY",
                                "THURSDAY",
                                "FRIDAY",
                                "SATURDAY",
                                "SUNDAY"
                              ]
                            },
                            "dayOfMonthIndicator": {
                              "type": "integer",
                              "format": "int32"
                            },
                            "localTime": {
                              "$ref": "#/components/schemas/LocalTime"
                            },
                            "midnightEndOfDay": { "type": "boolean" }
                          }
                        }
                      }
                    }
                  }
                }
              },
              "hour": { "type": "integer", "format": "int32" },
              "minute": { "type": "integer", "format": "int32" },
              "second": { "type": "integer", "format": "int32" },
              "nano": { "type": "integer", "format": "int32" }
            }
          }
        },
        "description": "Time at an employee's establishment that will be blocked for scheduling"
      },
      "UserPermissionDto": {
        "type": "object",
        "properties": {
          "userId": { "type": "string", "format": "uuid" },
          "tpPermissionType": {
            "type": "string",
            "enum": [
              "ROLE_ADM",
              "ROLE_OWNER",
              "ROLE_EMPLOYEE",
              "ROLE_CLIENT",
              "ROLE_PRE_CLIENT"
            ]
          },
          "establishmentId": { "type": "string", "format": "uuid" }
        }
      },
      "Permission": {
        "type": "object",
        "properties": {
          "permissionKey": {
            "type": "string",
            "enum": [
              "ROLE_ADM",
              "ROLE_OWNER",
              "ROLE_EMPLOYEE",
              "ROLE_CLIENT",
              "ROLE_PRE_CLIENT"
            ]
          },
          "description": { "type": "string" }
        },
        "description": "User permissions"
      },
      "UserPermission": {
        "type": "object",
        "properties": {
          "userPermissionId": { "type": "string", "format": "uuid" },
          "user": { "type": "string", "format": "uuid" },
          "permission": { "$ref": "#/components/schemas/Permission" },
          "establishment": { "type": "string", "format": "uuid" },
          "createdAt": { "type": "string", "format": "date-time" }
        },
        "description": "User permissions on an establishment"
      },
      "MonthWorkDayDto": {
        "type": "object",
        "properties": {
          "day": { "type": "string", "format": "date" },
          "userEmployeeId": { "type": "string", "format": "uuid" }
        }
      },
      "MonthWorkDay": {
        "type": "object",
        "properties": {
          "monthWorkDayId": { "type": "string", "format": "uuid" },
          "day": { "type": "string", "format": "date" }
        },
        "description": "Day of the month that the employee will work"
      },
      "UserServiceDomainDto": {
        "type": "object",
        "properties": {
          "userId": { "type": "string", "format": "uuid" },
          "serviceLinkedId": { "type": "string", "format": "uuid" }
        }
      },
      "UserServiceDomain": {
        "type": "object",
        "properties": {
          "userServiceId": { "type": "string", "format": "uuid" },
          "user": { "$ref": "#/components/schemas/User" },
          "serviceLinked": { "$ref": "#/components/schemas/ServiceDomain" },
          "createdAt": { "type": "string", "format": "date-time" }
        },
        "description": "Services that a user performs in an establishment"
      },
      "UserTelephoneDto": {
        "type": "object",
        "properties": { "telephone": { "type": "string" } }
      },
      "UserLockDto": {
        "type": "object",
        "properties": { "userIdToLock": { "type": "string", "format": "uuid" } }
      },
      "PublicSchedulingDto": {
        "required": ["serviceList", "telephone"],
        "type": "object",
        "properties": {
          "schedulingDate": { "type": "string", "format": "date-time" },
          "attendantUserId": { "type": "string", "format": "uuid" },
          "observation": { "type": "string" },
          "name": { "type": "string" },
          "email": { "type": "string" },
          "telephone": { "type": "string" },
          "serviceList": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SchedulingServiceDomainDto"
            }
          }
        }
      },
      "UserCredentialsDto": {
        "type": "object",
        "properties": {
          "userId": { "type": "string" },
          "email": { "type": "string" },
          "telephone": { "type": "string" },
          "userPass": { "type": "string" },
          "publicIdentifier": { "type": "string" }
        }
      },
      "UserAuthenticatedResponseDto": {
        "type": "object",
        "properties": {
          "userId": { "type": "string", "format": "uuid" },
          "name": { "type": "string" },
          "email": { "type": "string" },
          "authToken": { "type": "string" },
          "userEstablishmentList": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/UserEstablishment" }
          },
          "defaultEstablishment": {
            "$ref": "#/components/schemas/Establishment"
          },
          "waAccount": { "$ref": "#/components/schemas/WaAccount" }
        }
      },
      "PageUserEstablishment": {
        "type": "object",
        "properties": {
          "totalPages": { "type": "integer", "format": "int32" },
          "totalElements": { "type": "integer", "format": "int64" },
          "pageable": { "$ref": "#/components/schemas/PageableObject" },
          "first": { "type": "boolean" },
          "last": { "type": "boolean" },
          "size": { "type": "integer", "format": "int32" },
          "content": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/UserEstablishment" }
          },
          "number": { "type": "integer", "format": "int32" },
          "sort": { "$ref": "#/components/schemas/SortObject" },
          "numberOfElements": { "type": "integer", "format": "int32" },
          "empty": { "type": "boolean" }
        }
      },
      "PageableObject": {
        "type": "object",
        "properties": {
          "pageNumber": { "type": "integer", "format": "int32" },
          "pageSize": { "type": "integer", "format": "int32" },
          "offset": { "type": "integer", "format": "int64" },
          "sort": { "$ref": "#/components/schemas/SortObject" },
          "paged": { "type": "boolean" },
          "unpaged": { "type": "boolean" }
        }
      },
      "SortObject": {
        "type": "object",
        "properties": {
          "sorted": { "type": "boolean" },
          "empty": { "type": "boolean" },
          "unsorted": { "type": "boolean" }
        }
      },
      "PageWaAccount": {
        "type": "object",
        "properties": {
          "totalPages": { "type": "integer", "format": "int32" },
          "totalElements": { "type": "integer", "format": "int64" },
          "pageable": { "$ref": "#/components/schemas/PageableObject" },
          "first": { "type": "boolean" },
          "last": { "type": "boolean" },
          "size": { "type": "integer", "format": "int32" },
          "content": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/WaAccount" }
          },
          "number": { "type": "integer", "format": "int32" },
          "sort": { "$ref": "#/components/schemas/SortObject" },
          "numberOfElements": { "type": "integer", "format": "int32" },
          "empty": { "type": "boolean" }
        }
      },
      "PageWaMsgModelAccount": {
        "type": "object",
        "properties": {
          "totalPages": { "type": "integer", "format": "int32" },
          "totalElements": { "type": "integer", "format": "int64" },
          "pageable": { "$ref": "#/components/schemas/PageableObject" },
          "first": { "type": "boolean" },
          "last": { "type": "boolean" },
          "size": { "type": "integer", "format": "int32" },
          "content": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/WaMsgModelAccount" }
          },
          "number": { "type": "integer", "format": "int32" },
          "sort": { "$ref": "#/components/schemas/SortObject" },
          "numberOfElements": { "type": "integer", "format": "int32" },
          "empty": { "type": "boolean" }
        }
      },
      "PageWaMsgListAccount": {
        "type": "object",
        "properties": {
          "totalPages": { "type": "integer", "format": "int32" },
          "totalElements": { "type": "integer", "format": "int64" },
          "pageable": { "$ref": "#/components/schemas/PageableObject" },
          "first": { "type": "boolean" },
          "last": { "type": "boolean" },
          "size": { "type": "integer", "format": "int32" },
          "content": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/WaMsgListAccount" }
          },
          "number": { "type": "integer", "format": "int32" },
          "sort": { "$ref": "#/components/schemas/SortObject" },
          "numberOfElements": { "type": "integer", "format": "int32" },
          "empty": { "type": "boolean" }
        }
      },
      "PageWaMsgInteractiveAccount": {
        "type": "object",
        "properties": {
          "totalPages": { "type": "integer", "format": "int32" },
          "totalElements": { "type": "integer", "format": "int64" },
          "pageable": { "$ref": "#/components/schemas/PageableObject" },
          "first": { "type": "boolean" },
          "last": { "type": "boolean" },
          "size": { "type": "integer", "format": "int32" },
          "content": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/WaMsgInteractiveAccount" }
          },
          "number": { "type": "integer", "format": "int32" },
          "sort": { "$ref": "#/components/schemas/SortObject" },
          "numberOfElements": { "type": "integer", "format": "int32" },
          "empty": { "type": "boolean" }
        }
      },
      "PageWaMsgButtonAccount": {
        "type": "object",
        "properties": {
          "totalPages": { "type": "integer", "format": "int32" },
          "totalElements": { "type": "integer", "format": "int64" },
          "pageable": { "$ref": "#/components/schemas/PageableObject" },
          "first": { "type": "boolean" },
          "last": { "type": "boolean" },
          "size": { "type": "integer", "format": "int32" },
          "content": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/WaMsgButtonAccount" }
          },
          "number": { "type": "integer", "format": "int32" },
          "sort": { "$ref": "#/components/schemas/SortObject" },
          "numberOfElements": { "type": "integer", "format": "int32" },
          "empty": { "type": "boolean" }
        }
      },
      "PageWaMsgModel": {
        "type": "object",
        "properties": {
          "totalPages": { "type": "integer", "format": "int32" },
          "totalElements": { "type": "integer", "format": "int64" },
          "pageable": { "$ref": "#/components/schemas/PageableObject" },
          "first": { "type": "boolean" },
          "last": { "type": "boolean" },
          "size": { "type": "integer", "format": "int32" },
          "content": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/WaMsgModel" }
          },
          "number": { "type": "integer", "format": "int32" },
          "sort": { "$ref": "#/components/schemas/SortObject" },
          "numberOfElements": { "type": "integer", "format": "int32" },
          "empty": { "type": "boolean" }
        }
      },
      "WaMsgModel": {
        "required": [
          "finality",
          "language",
          "modelId",
          "name",
          "situationType"
        ],
        "type": "object",
        "properties": {
          "waMsgModelId": { "type": "string", "format": "uuid" },
          "modelId": { "maxLength": 255, "minLength": 0, "type": "string" },
          "name": { "maxLength": 50, "minLength": 0, "type": "string" },
          "language": { "maxLength": 50, "minLength": 0, "type": "string" },
          "finality": {
            "type": "string",
            "enum": [
              "ACCOUNT_CONFIRMATION",
              "SCHEDULING_CONFIRMATION",
              "STARTED_BY_USER"
            ]
          },
          "situationType": {
            "type": "string",
            "enum": ["ACTIVE", "BLOCKED", "CANCELED"]
          },
          "waMsgMedia": { "type": "string", "format": "uuid" }
        },
        "description": "Model of whatsapp interactive messages"
      },
      "WaMsgList": {
        "required": ["grouper", "title", "uniqueId"],
        "type": "object",
        "properties": {
          "waMsgListId": { "type": "string", "format": "uuid" },
          "grouper": { "maxLength": 90, "minLength": 0, "type": "string" },
          "uniqueId": { "maxLength": 90, "minLength": 0, "type": "string" },
          "title": { "maxLength": 90, "minLength": 0, "type": "string" },
          "description": { "maxLength": 90, "minLength": 0, "type": "string" },
          "waMsgInteractive": { "type": "string", "format": "uuid" },
          "waMsgModel": { "type": "string", "format": "uuid" },
          "buttonText": { "maxLength": 90, "minLength": 0, "type": "string" }
        },
        "description": "Base list, which will be used for sending messages in whatsapp"
      },
      "PageWaMsgInteractive": {
        "type": "object",
        "properties": {
          "totalPages": { "type": "integer", "format": "int32" },
          "totalElements": { "type": "integer", "format": "int64" },
          "pageable": { "$ref": "#/components/schemas/PageableObject" },
          "first": { "type": "boolean" },
          "last": { "type": "boolean" },
          "size": { "type": "integer", "format": "int32" },
          "content": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/WaMsgInteractive" }
          },
          "number": { "type": "integer", "format": "int32" },
          "sort": { "$ref": "#/components/schemas/SortObject" },
          "numberOfElements": { "type": "integer", "format": "int32" },
          "empty": { "type": "boolean" }
        }
      },
      "WaMsgInteractive": {
        "required": [
          "defaultBody",
          "interactiveType",
          "queueName",
          "situationType"
        ],
        "type": "object",
        "properties": {
          "waMsgInteractiveId": { "type": "string", "format": "uuid" },
          "defaultTitle": { "maxLength": 90, "minLength": 0, "type": "string" },
          "defaultBody": { "maxLength": 90, "minLength": 0, "type": "string" },
          "defaultFooter": {
            "maxLength": 90,
            "minLength": 0,
            "type": "string"
          },
          "interactiveType": {
            "type": "string",
            "enum": ["TEXT", "BUTTON", "LIST", "PRODUCT", "PRODUCT_LIST"]
          },
          "situationType": {
            "type": "string",
            "enum": ["ACTIVE", "CANCELLED"]
          },
          "queueName": { "maxLength": 255, "minLength": 0, "type": "string" }
        },
        "description": "Base interactive messages, which will be used for sending messages in whatsapp"
      },
      "WaMsgButton": {
        "required": ["buttonType", "title", "uniqueId"],
        "type": "object",
        "properties": {
          "waMsgButtonId": { "type": "string", "format": "uuid" },
          "buttonType": { "type": "string", "enum": ["REPLY"] },
          "uniqueId": { "maxLength": 90, "minLength": 0, "type": "string" },
          "title": { "maxLength": 90, "minLength": 0, "type": "string" },
          "waMsgInteractive": { "type": "string", "format": "uuid" },
          "waMsgModel": { "type": "string", "format": "uuid" }
        },
        "description": "Base buttons, which will be used for sending messages in whatsapp"
      },
      "PageWorkHourSchedException": {
        "type": "object",
        "properties": {
          "totalPages": { "type": "integer", "format": "int32" },
          "totalElements": { "type": "integer", "format": "int64" },
          "pageable": { "$ref": "#/components/schemas/PageableObject" },
          "first": { "type": "boolean" },
          "last": { "type": "boolean" },
          "size": { "type": "integer", "format": "int32" },
          "content": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/WorkHourSchedException" }
          },
          "number": { "type": "integer", "format": "int32" },
          "sort": { "$ref": "#/components/schemas/SortObject" },
          "numberOfElements": { "type": "integer", "format": "int32" },
          "empty": { "type": "boolean" }
        }
      },
      "PageWorkDay": {
        "type": "object",
        "properties": {
          "totalPages": { "type": "integer", "format": "int32" },
          "totalElements": { "type": "integer", "format": "int64" },
          "pageable": { "$ref": "#/components/schemas/PageableObject" },
          "first": { "type": "boolean" },
          "last": { "type": "boolean" },
          "size": { "type": "integer", "format": "int32" },
          "content": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/WorkDay" }
          },
          "number": { "type": "integer", "format": "int32" },
          "sort": { "$ref": "#/components/schemas/SortObject" },
          "numberOfElements": { "type": "integer", "format": "int32" },
          "empty": { "type": "boolean" }
        }
      },
      "WorkDayUserProjection": {
        "type": "object",
        "properties": {
          "establishmentId": { "type": "string" },
          "dayWeek": { "type": "string" },
          "userEmployeeId": { "type": "string" },
          "startService": { "type": "string" },
          "endService": { "type": "string" },
          "startBreak": { "type": "string" },
          "endBreak": { "type": "string" },
          "workDayId": { "type": "string" }
        }
      },
      "PageUserPermission": {
        "type": "object",
        "properties": {
          "totalPages": { "type": "integer", "format": "int32" },
          "totalElements": { "type": "integer", "format": "int64" },
          "pageable": { "$ref": "#/components/schemas/PageableObject" },
          "first": { "type": "boolean" },
          "last": { "type": "boolean" },
          "size": { "type": "integer", "format": "int32" },
          "content": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/UserPermission" }
          },
          "number": { "type": "integer", "format": "int32" },
          "sort": { "$ref": "#/components/schemas/SortObject" },
          "numberOfElements": { "type": "integer", "format": "int32" },
          "empty": { "type": "boolean" }
        }
      },
      "PageMonthWorkDay": {
        "type": "object",
        "properties": {
          "totalPages": { "type": "integer", "format": "int32" },
          "totalElements": { "type": "integer", "format": "int64" },
          "pageable": { "$ref": "#/components/schemas/PageableObject" },
          "first": { "type": "boolean" },
          "last": { "type": "boolean" },
          "size": { "type": "integer", "format": "int32" },
          "content": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/MonthWorkDay" }
          },
          "number": { "type": "integer", "format": "int32" },
          "sort": { "$ref": "#/components/schemas/SortObject" },
          "numberOfElements": { "type": "integer", "format": "int32" },
          "empty": { "type": "boolean" }
        }
      },
      "PageUserServiceDomain": {
        "type": "object",
        "properties": {
          "totalPages": { "type": "integer", "format": "int32" },
          "totalElements": { "type": "integer", "format": "int64" },
          "pageable": { "$ref": "#/components/schemas/PageableObject" },
          "first": { "type": "boolean" },
          "last": { "type": "boolean" },
          "size": { "type": "integer", "format": "int32" },
          "content": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/UserServiceDomain" }
          },
          "number": { "type": "integer", "format": "int32" },
          "sort": { "$ref": "#/components/schemas/SortObject" },
          "numberOfElements": { "type": "integer", "format": "int32" },
          "empty": { "type": "boolean" }
        }
      },
      "PageUser": {
        "type": "object",
        "properties": {
          "totalPages": { "type": "integer", "format": "int32" },
          "totalElements": { "type": "integer", "format": "int64" },
          "pageable": { "$ref": "#/components/schemas/PageableObject" },
          "first": { "type": "boolean" },
          "last": { "type": "boolean" },
          "size": { "type": "integer", "format": "int32" },
          "content": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/User" }
          },
          "number": { "type": "integer", "format": "int32" },
          "sort": { "$ref": "#/components/schemas/SortObject" },
          "numberOfElements": { "type": "integer", "format": "int32" },
          "empty": { "type": "boolean" }
        }
      },
      "UserAddressProjection": {
        "type": "object",
        "properties": {
          "number": { "type": "string" },
          "addressId": { "type": "string" },
          "cep": { "type": "string" },
          "uf": { "type": "string" },
          "city": { "type": "string" },
          "district": { "type": "string" },
          "road": { "type": "string" },
          "complement": { "type": "string" }
        }
      },
      "UserEstablishmentProjection": {
        "type": "object",
        "properties": { "nickname": { "type": "string" } }
      },
      "UserProjection": {
        "type": "object",
        "properties": {
          "name": { "type": "string" },
          "address": { "$ref": "#/components/schemas/UserAddressProjection" },
          "situationType": { "type": "string" },
          "email": { "type": "string" },
          "userId": { "type": "string" },
          "userTelephones": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/UserTelephoneProjection" }
          },
          "createdAt": { "type": "string", "format": "date-time" },
          "userEstablishments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserEstablishmentProjection"
            }
          }
        }
      },
      "UserTelephoneProjection": {
        "type": "object",
        "properties": {
          "telephone": { "type": "string" },
          "userTelephoneId": { "type": "string" }
        }
      },
      "PageUserTelephone": {
        "type": "object",
        "properties": {
          "totalPages": { "type": "integer", "format": "int32" },
          "totalElements": { "type": "integer", "format": "int64" },
          "pageable": { "$ref": "#/components/schemas/PageableObject" },
          "first": { "type": "boolean" },
          "last": { "type": "boolean" },
          "size": { "type": "integer", "format": "int32" },
          "content": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/UserTelephone" }
          },
          "number": { "type": "integer", "format": "int32" },
          "sort": { "$ref": "#/components/schemas/SortObject" },
          "numberOfElements": { "type": "integer", "format": "int32" },
          "empty": { "type": "boolean" }
        }
      },
      "PageUserLock": {
        "type": "object",
        "properties": {
          "totalPages": { "type": "integer", "format": "int32" },
          "totalElements": { "type": "integer", "format": "int64" },
          "pageable": { "$ref": "#/components/schemas/PageableObject" },
          "first": { "type": "boolean" },
          "last": { "type": "boolean" },
          "size": { "type": "integer", "format": "int32" },
          "content": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/UserLock" }
          },
          "number": { "type": "integer", "format": "int32" },
          "sort": { "$ref": "#/components/schemas/SortObject" },
          "numberOfElements": { "type": "integer", "format": "int32" },
          "empty": { "type": "boolean" }
        }
      },
      "PageWorkHourSchedInfo": {
        "type": "object",
        "properties": {
          "totalPages": { "type": "integer", "format": "int32" },
          "totalElements": { "type": "integer", "format": "int64" },
          "pageable": { "$ref": "#/components/schemas/PageableObject" },
          "first": { "type": "boolean" },
          "last": { "type": "boolean" },
          "size": { "type": "integer", "format": "int32" },
          "content": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/WorkHourSchedInfo" }
          },
          "number": { "type": "integer", "format": "int32" },
          "sort": { "$ref": "#/components/schemas/SortObject" },
          "numberOfElements": { "type": "integer", "format": "int32" },
          "empty": { "type": "boolean" }
        }
      },
      "WorkHourSchedInfo": {
        "type": "object",
        "properties": {
          "hour": {
            "type": "object",
            "properties": {
              "offset": {
                "type": "object",
                "properties": {
                  "totalSeconds": { "type": "integer", "format": "int32" },
                  "id": { "type": "string" },
                  "rules": {
                    "type": "object",
                    "properties": {
                      "fixedOffset": { "type": "boolean" },
                      "transitions": {
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "instant": {
                              "type": "string",
                              "format": "date-time"
                            },
                            "overlap": { "type": "boolean" },
                            "duration": {
                              "type": "object",
                              "properties": {
                                "seconds": {
                                  "type": "integer",
                                  "format": "int64"
                                },
                                "nano": {
                                  "type": "integer",
                                  "format": "int32"
                                },
                                "negative": { "type": "boolean" },
                                "zero": { "type": "boolean" },
                                "units": {
                                  "type": "array",
                                  "items": {
                                    "type": "object",
                                    "properties": {
                                      "dateBased": { "type": "boolean" },
                                      "timeBased": { "type": "boolean" },
                                      "durationEstimated": { "type": "boolean" }
                                    }
                                  }
                                }
                              }
                            },
                            "gap": { "type": "boolean" },
                            "dateTimeBefore": {
                              "type": "string",
                              "format": "date-time"
                            },
                            "dateTimeAfter": {
                              "type": "string",
                              "format": "date-time"
                            }
                          }
                        }
                      },
                      "transitionRules": {
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "month": {
                              "type": "string",
                              "enum": [
                                "JANUARY",
                                "FEBRUARY",
                                "MARCH",
                                "APRIL",
                                "MAY",
                                "JUNE",
                                "JULY",
                                "AUGUST",
                                "SEPTEMBER",
                                "OCTOBER",
                                "NOVEMBER",
                                "DECEMBER"
                              ]
                            },
                            "timeDefinition": {
                              "type": "string",
                              "enum": ["UTC", "WALL", "STANDARD"]
                            },
                            "dayOfWeek": {
                              "type": "string",
                              "enum": [
                                "MONDAY",
                                "TUESDAY",
                                "WEDNESDAY",
                                "THURSDAY",
                                "FRIDAY",
                                "SATURDAY",
                                "SUNDAY"
                              ]
                            },
                            "dayOfMonthIndicator": {
                              "type": "integer",
                              "format": "int32"
                            },
                            "localTime": {
                              "$ref": "#/components/schemas/LocalTime"
                            },
                            "midnightEndOfDay": { "type": "boolean" }
                          }
                        }
                      }
                    }
                  }
                }
              },
              "hour": { "type": "integer", "format": "int32" },
              "minute": { "type": "integer", "format": "int32" },
              "second": { "type": "integer", "format": "int32" },
              "nano": { "type": "integer", "format": "int32" }
            }
          },
          "situationType": { "type": "string", "enum": ["ACTIVE", "CANCELED"] },
          "dayWeek": { "type": "string" },
          "workHourId": { "type": "string" },
          "workHourSchedExceptionId": { "type": "string" },
          "isException": { "type": "string" }
        }
      },
      "PageUserProjection": {
        "type": "object",
        "properties": {
          "totalPages": { "type": "integer", "format": "int32" },
          "totalElements": { "type": "integer", "format": "int64" },
          "pageable": { "$ref": "#/components/schemas/PageableObject" },
          "first": { "type": "boolean" },
          "last": { "type": "boolean" },
          "size": { "type": "integer", "format": "int32" },
          "content": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/UserProjection" }
          },
          "number": { "type": "integer", "format": "int32" },
          "sort": { "$ref": "#/components/schemas/SortObject" },
          "numberOfElements": { "type": "integer", "format": "int32" },
          "empty": { "type": "boolean" }
        }
      },
      "PageServiceValue": {
        "type": "object",
        "properties": {
          "totalPages": { "type": "integer", "format": "int32" },
          "totalElements": { "type": "integer", "format": "int64" },
          "pageable": { "$ref": "#/components/schemas/PageableObject" },
          "first": { "type": "boolean" },
          "last": { "type": "boolean" },
          "size": { "type": "integer", "format": "int32" },
          "content": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/ServiceValue" }
          },
          "number": { "type": "integer", "format": "int32" },
          "sort": { "$ref": "#/components/schemas/SortObject" },
          "numberOfElements": { "type": "integer", "format": "int32" },
          "empty": { "type": "boolean" }
        }
      },
      "PageServiceLink": {
        "type": "object",
        "properties": {
          "totalPages": { "type": "integer", "format": "int32" },
          "totalElements": { "type": "integer", "format": "int64" },
          "pageable": { "$ref": "#/components/schemas/PageableObject" },
          "first": { "type": "boolean" },
          "last": { "type": "boolean" },
          "size": { "type": "integer", "format": "int32" },
          "content": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/ServiceLink" }
          },
          "number": { "type": "integer", "format": "int32" },
          "sort": { "$ref": "#/components/schemas/SortObject" },
          "numberOfElements": { "type": "integer", "format": "int32" },
          "empty": { "type": "boolean" }
        }
      },
      "PageServiceDomain": {
        "type": "object",
        "properties": {
          "totalPages": { "type": "integer", "format": "int32" },
          "totalElements": { "type": "integer", "format": "int64" },
          "pageable": { "$ref": "#/components/schemas/PageableObject" },
          "first": { "type": "boolean" },
          "last": { "type": "boolean" },
          "size": { "type": "integer", "format": "int32" },
          "content": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/ServiceDomain" }
          },
          "number": { "type": "integer", "format": "int32" },
          "sort": { "$ref": "#/components/schemas/SortObject" },
          "numberOfElements": { "type": "integer", "format": "int32" },
          "empty": { "type": "boolean" }
        }
      },
      "ServiceDomainProjection": {
        "type": "object",
        "properties": {
          "name": { "type": "string" },
          "value": { "type": "number" },
          "serviceId": { "type": "string", "format": "uuid" },
          "amountTime": { "type": "integer", "format": "int64" }
        }
      },
      "PageCategory": {
        "type": "object",
        "properties": {
          "totalPages": { "type": "integer", "format": "int32" },
          "totalElements": { "type": "integer", "format": "int64" },
          "pageable": { "$ref": "#/components/schemas/PageableObject" },
          "first": { "type": "boolean" },
          "last": { "type": "boolean" },
          "size": { "type": "integer", "format": "int32" },
          "content": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/Category" }
          },
          "number": { "type": "integer", "format": "int32" },
          "sort": { "$ref": "#/components/schemas/SortObject" },
          "numberOfElements": { "type": "integer", "format": "int32" },
          "empty": { "type": "boolean" }
        }
      },
      "PageSchedulingServiceDomain": {
        "type": "object",
        "properties": {
          "totalPages": { "type": "integer", "format": "int32" },
          "totalElements": { "type": "integer", "format": "int64" },
          "pageable": { "$ref": "#/components/schemas/PageableObject" },
          "first": { "type": "boolean" },
          "last": { "type": "boolean" },
          "size": { "type": "integer", "format": "int32" },
          "content": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/SchedulingServiceDomain" }
          },
          "number": { "type": "integer", "format": "int32" },
          "sort": { "$ref": "#/components/schemas/SortObject" },
          "numberOfElements": { "type": "integer", "format": "int32" },
          "empty": { "type": "boolean" }
        }
      },
      "PageSchedulingDomain": {
        "type": "object",
        "properties": {
          "totalPages": { "type": "integer", "format": "int32" },
          "totalElements": { "type": "integer", "format": "int64" },
          "pageable": { "$ref": "#/components/schemas/PageableObject" },
          "first": { "type": "boolean" },
          "last": { "type": "boolean" },
          "size": { "type": "integer", "format": "int32" },
          "content": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/SchedulingDomain" }
          },
          "number": { "type": "integer", "format": "int32" },
          "sort": { "$ref": "#/components/schemas/SortObject" },
          "numberOfElements": { "type": "integer", "format": "int32" },
          "empty": { "type": "boolean" }
        }
      },
      "SchedulingAttendanceResponseDto": {
        "type": "object",
        "properties": {
          "attendanceId": { "type": "string" },
          "attendanceName": { "type": "string" },
          "attendanceList": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SchedulingWorkHourResponseDto"
            }
          }
        }
      },
      "SchedulingResponseDto": {
        "type": "object",
        "properties": {
          "attendanceList": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SchedulingAttendanceResponseDto"
            }
          }
        }
      },
      "SchedulingWorkHourResponseDto": {
        "type": "object",
        "properties": {
          "dtaScheduling": { "type": "string", "format": "date" },
          "workHourSchedList": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "offset": {
                  "type": "object",
                  "properties": {
                    "totalSeconds": { "type": "integer", "format": "int32" },
                    "id": { "type": "string" },
                    "rules": {
                      "type": "object",
                      "properties": {
                        "fixedOffset": { "type": "boolean" },
                        "transitions": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "instant": {
                                "type": "string",
                                "format": "date-time"
                              },
                              "overlap": { "type": "boolean" },
                              "duration": {
                                "type": "object",
                                "properties": {
                                  "seconds": {
                                    "type": "integer",
                                    "format": "int64"
                                  },
                                  "nano": {
                                    "type": "integer",
                                    "format": "int32"
                                  },
                                  "negative": { "type": "boolean" },
                                  "zero": { "type": "boolean" },
                                  "units": {
                                    "type": "array",
                                    "items": {
                                      "type": "object",
                                      "properties": {
                                        "dateBased": { "type": "boolean" },
                                        "timeBased": { "type": "boolean" },
                                        "durationEstimated": {
                                          "type": "boolean"
                                        }
                                      }
                                    }
                                  }
                                }
                              },
                              "gap": { "type": "boolean" },
                              "dateTimeBefore": {
                                "type": "string",
                                "format": "date-time"
                              },
                              "dateTimeAfter": {
                                "type": "string",
                                "format": "date-time"
                              }
                            }
                          }
                        },
                        "transitionRules": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "month": {
                                "type": "string",
                                "enum": [
                                  "JANUARY",
                                  "FEBRUARY",
                                  "MARCH",
                                  "APRIL",
                                  "MAY",
                                  "JUNE",
                                  "JULY",
                                  "AUGUST",
                                  "SEPTEMBER",
                                  "OCTOBER",
                                  "NOVEMBER",
                                  "DECEMBER"
                                ]
                              },
                              "timeDefinition": {
                                "type": "string",
                                "enum": ["UTC", "WALL", "STANDARD"]
                              },
                              "dayOfWeek": {
                                "type": "string",
                                "enum": [
                                  "MONDAY",
                                  "TUESDAY",
                                  "WEDNESDAY",
                                  "THURSDAY",
                                  "FRIDAY",
                                  "SATURDAY",
                                  "SUNDAY"
                                ]
                              },
                              "dayOfMonthIndicator": {
                                "type": "integer",
                                "format": "int32"
                              },
                              "localTime": {
                                "$ref": "#/components/schemas/LocalTime"
                              },
                              "midnightEndOfDay": { "type": "boolean" }
                            }
                          }
                        }
                      }
                    }
                  }
                },
                "hour": { "type": "integer", "format": "int32" },
                "minute": { "type": "integer", "format": "int32" },
                "second": { "type": "integer", "format": "int32" },
                "nano": { "type": "integer", "format": "int32" }
              }
            }
          }
        }
      },
      "PageSchedulingDomainProjection": {
        "type": "object",
        "properties": {
          "totalPages": { "type": "integer", "format": "int32" },
          "totalElements": { "type": "integer", "format": "int64" },
          "pageable": { "$ref": "#/components/schemas/PageableObject" },
          "first": { "type": "boolean" },
          "last": { "type": "boolean" },
          "size": { "type": "integer", "format": "int32" },
          "content": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SchedulingDomainProjection"
            }
          },
          "number": { "type": "integer", "format": "int32" },
          "sort": { "$ref": "#/components/schemas/SortObject" },
          "numberOfElements": { "type": "integer", "format": "int32" },
          "empty": { "type": "boolean" }
        }
      },
      "SchedulingDomainProjection": {
        "type": "object",
        "properties": {
          "day": { "type": "string", "format": "date" },
          "eventType": { "type": "string" },
          "situationType": { "type": "string" },
          "beginIn": {
            "type": "object",
            "properties": {
              "offset": {
                "type": "object",
                "properties": {
                  "totalSeconds": { "type": "integer", "format": "int32" },
                  "id": { "type": "string" },
                  "rules": {
                    "type": "object",
                    "properties": {
                      "fixedOffset": { "type": "boolean" },
                      "transitions": {
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "instant": {
                              "type": "string",
                              "format": "date-time"
                            },
                            "overlap": { "type": "boolean" },
                            "duration": {
                              "type": "object",
                              "properties": {
                                "seconds": {
                                  "type": "integer",
                                  "format": "int64"
                                },
                                "nano": {
                                  "type": "integer",
                                  "format": "int32"
                                },
                                "negative": { "type": "boolean" },
                                "zero": { "type": "boolean" },
                                "units": {
                                  "type": "array",
                                  "items": {
                                    "type": "object",
                                    "properties": {
                                      "dateBased": { "type": "boolean" },
                                      "timeBased": { "type": "boolean" },
                                      "durationEstimated": { "type": "boolean" }
                                    }
                                  }
                                }
                              }
                            },
                            "gap": { "type": "boolean" },
                            "dateTimeBefore": {
                              "type": "string",
                              "format": "date-time"
                            },
                            "dateTimeAfter": {
                              "type": "string",
                              "format": "date-time"
                            }
                          }
                        }
                      },
                      "transitionRules": {
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "month": {
                              "type": "string",
                              "enum": [
                                "JANUARY",
                                "FEBRUARY",
                                "MARCH",
                                "APRIL",
                                "MAY",
                                "JUNE",
                                "JULY",
                                "AUGUST",
                                "SEPTEMBER",
                                "OCTOBER",
                                "NOVEMBER",
                                "DECEMBER"
                              ]
                            },
                            "timeDefinition": {
                              "type": "string",
                              "enum": ["UTC", "WALL", "STANDARD"]
                            },
                            "dayOfWeek": {
                              "type": "string",
                              "enum": [
                                "MONDAY",
                                "TUESDAY",
                                "WEDNESDAY",
                                "THURSDAY",
                                "FRIDAY",
                                "SATURDAY",
                                "SUNDAY"
                              ]
                            },
                            "dayOfMonthIndicator": {
                              "type": "integer",
                              "format": "int32"
                            },
                            "localTime": {
                              "$ref": "#/components/schemas/LocalTime"
                            },
                            "midnightEndOfDay": { "type": "boolean" }
                          }
                        }
                      }
                    }
                  }
                }
              },
              "hour": { "type": "integer", "format": "int32" },
              "minute": { "type": "integer", "format": "int32" },
              "second": { "type": "integer", "format": "int32" },
              "nano": { "type": "integer", "format": "int32" }
            }
          },
          "endIn": {
            "type": "object",
            "properties": {
              "offset": {
                "type": "object",
                "properties": {
                  "totalSeconds": { "type": "integer", "format": "int32" },
                  "id": { "type": "string" },
                  "rules": {
                    "type": "object",
                    "properties": {
                      "fixedOffset": { "type": "boolean" },
                      "transitions": {
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "instant": {
                              "type": "string",
                              "format": "date-time"
                            },
                            "overlap": { "type": "boolean" },
                            "duration": {
                              "type": "object",
                              "properties": {
                                "seconds": {
                                  "type": "integer",
                                  "format": "int64"
                                },
                                "nano": {
                                  "type": "integer",
                                  "format": "int32"
                                },
                                "negative": { "type": "boolean" },
                                "zero": { "type": "boolean" },
                                "units": {
                                  "type": "array",
                                  "items": {
                                    "type": "object",
                                    "properties": {
                                      "dateBased": { "type": "boolean" },
                                      "timeBased": { "type": "boolean" },
                                      "durationEstimated": { "type": "boolean" }
                                    }
                                  }
                                }
                              }
                            },
                            "gap": { "type": "boolean" },
                            "dateTimeBefore": {
                              "type": "string",
                              "format": "date-time"
                            },
                            "dateTimeAfter": {
                              "type": "string",
                              "format": "date-time"
                            }
                          }
                        }
                      },
                      "transitionRules": {
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "month": {
                              "type": "string",
                              "enum": [
                                "JANUARY",
                                "FEBRUARY",
                                "MARCH",
                                "APRIL",
                                "MAY",
                                "JUNE",
                                "JULY",
                                "AUGUST",
                                "SEPTEMBER",
                                "OCTOBER",
                                "NOVEMBER",
                                "DECEMBER"
                              ]
                            },
                            "timeDefinition": {
                              "type": "string",
                              "enum": ["UTC", "WALL", "STANDARD"]
                            },
                            "dayOfWeek": {
                              "type": "string",
                              "enum": [
                                "MONDAY",
                                "TUESDAY",
                                "WEDNESDAY",
                                "THURSDAY",
                                "FRIDAY",
                                "SATURDAY",
                                "SUNDAY"
                              ]
                            },
                            "dayOfMonthIndicator": {
                              "type": "integer",
                              "format": "int32"
                            },
                            "localTime": {
                              "$ref": "#/components/schemas/LocalTime"
                            },
                            "midnightEndOfDay": { "type": "boolean" }
                          }
                        }
                      }
                    }
                  }
                }
              },
              "hour": { "type": "integer", "format": "int32" },
              "minute": { "type": "integer", "format": "int32" },
              "second": { "type": "integer", "format": "int32" },
              "nano": { "type": "integer", "format": "int32" }
            }
          },
          "clientId": { "type": "string" },
          "attendantId": { "type": "string" },
          "attendantName": { "type": "string" },
          "clientName": { "type": "string" },
          "eventId": { "type": "string" }
        }
      },
      "PageEstablishment": {
        "type": "object",
        "properties": {
          "totalPages": { "type": "integer", "format": "int32" },
          "totalElements": { "type": "integer", "format": "int64" },
          "pageable": { "$ref": "#/components/schemas/PageableObject" },
          "first": { "type": "boolean" },
          "last": { "type": "boolean" },
          "size": { "type": "integer", "format": "int32" },
          "content": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/Establishment" }
          },
          "number": { "type": "integer", "format": "int32" },
          "sort": { "$ref": "#/components/schemas/SortObject" },
          "numberOfElements": { "type": "integer", "format": "int32" },
          "empty": { "type": "boolean" }
        }
      },
      "WorkDayDefaultProjection": {
        "type": "object",
        "properties": {
          "establishmentId": { "type": "string" },
          "dayWeek": { "type": "string" },
          "startService": {
            "type": "object",
            "properties": {
              "offset": {
                "type": "object",
                "properties": {
                  "totalSeconds": { "type": "integer", "format": "int32" },
                  "id": { "type": "string" },
                  "rules": {
                    "type": "object",
                    "properties": {
                      "fixedOffset": { "type": "boolean" },
                      "transitions": {
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "instant": {
                              "type": "string",
                              "format": "date-time"
                            },
                            "overlap": { "type": "boolean" },
                            "duration": {
                              "type": "object",
                              "properties": {
                                "seconds": {
                                  "type": "integer",
                                  "format": "int64"
                                },
                                "nano": {
                                  "type": "integer",
                                  "format": "int32"
                                },
                                "negative": { "type": "boolean" },
                                "zero": { "type": "boolean" },
                                "units": {
                                  "type": "array",
                                  "items": {
                                    "type": "object",
                                    "properties": {
                                      "dateBased": { "type": "boolean" },
                                      "timeBased": { "type": "boolean" },
                                      "durationEstimated": { "type": "boolean" }
                                    }
                                  }
                                }
                              }
                            },
                            "gap": { "type": "boolean" },
                            "dateTimeBefore": {
                              "type": "string",
                              "format": "date-time"
                            },
                            "dateTimeAfter": {
                              "type": "string",
                              "format": "date-time"
                            }
                          }
                        }
                      },
                      "transitionRules": {
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "month": {
                              "type": "string",
                              "enum": [
                                "JANUARY",
                                "FEBRUARY",
                                "MARCH",
                                "APRIL",
                                "MAY",
                                "JUNE",
                                "JULY",
                                "AUGUST",
                                "SEPTEMBER",
                                "OCTOBER",
                                "NOVEMBER",
                                "DECEMBER"
                              ]
                            },
                            "timeDefinition": {
                              "type": "string",
                              "enum": ["UTC", "WALL", "STANDARD"]
                            },
                            "dayOfWeek": {
                              "type": "string",
                              "enum": [
                                "MONDAY",
                                "TUESDAY",
                                "WEDNESDAY",
                                "THURSDAY",
                                "FRIDAY",
                                "SATURDAY",
                                "SUNDAY"
                              ]
                            },
                            "dayOfMonthIndicator": {
                              "type": "integer",
                              "format": "int32"
                            },
                            "localTime": {
                              "$ref": "#/components/schemas/LocalTime"
                            },
                            "midnightEndOfDay": { "type": "boolean" }
                          }
                        }
                      }
                    }
                  }
                }
              },
              "hour": { "type": "integer", "format": "int32" },
              "minute": { "type": "integer", "format": "int32" },
              "second": { "type": "integer", "format": "int32" },
              "nano": { "type": "integer", "format": "int32" }
            }
          },
          "endService": {
            "type": "object",
            "properties": {
              "offset": {
                "type": "object",
                "properties": {
                  "totalSeconds": { "type": "integer", "format": "int32" },
                  "id": { "type": "string" },
                  "rules": {
                    "type": "object",
                    "properties": {
                      "fixedOffset": { "type": "boolean" },
                      "transitions": {
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "instant": {
                              "type": "string",
                              "format": "date-time"
                            },
                            "overlap": { "type": "boolean" },
                            "duration": {
                              "type": "object",
                              "properties": {
                                "seconds": {
                                  "type": "integer",
                                  "format": "int64"
                                },
                                "nano": {
                                  "type": "integer",
                                  "format": "int32"
                                },
                                "negative": { "type": "boolean" },
                                "zero": { "type": "boolean" },
                                "units": {
                                  "type": "array",
                                  "items": {
                                    "type": "object",
                                    "properties": {
                                      "dateBased": { "type": "boolean" },
                                      "timeBased": { "type": "boolean" },
                                      "durationEstimated": { "type": "boolean" }
                                    }
                                  }
                                }
                              }
                            },
                            "gap": { "type": "boolean" },
                            "dateTimeBefore": {
                              "type": "string",
                              "format": "date-time"
                            },
                            "dateTimeAfter": {
                              "type": "string",
                              "format": "date-time"
                            }
                          }
                        }
                      },
                      "transitionRules": {
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "month": {
                              "type": "string",
                              "enum": [
                                "JANUARY",
                                "FEBRUARY",
                                "MARCH",
                                "APRIL",
                                "MAY",
                                "JUNE",
                                "JULY",
                                "AUGUST",
                                "SEPTEMBER",
                                "OCTOBER",
                                "NOVEMBER",
                                "DECEMBER"
                              ]
                            },
                            "timeDefinition": {
                              "type": "string",
                              "enum": ["UTC", "WALL", "STANDARD"]
                            },
                            "dayOfWeek": {
                              "type": "string",
                              "enum": [
                                "MONDAY",
                                "TUESDAY",
                                "WEDNESDAY",
                                "THURSDAY",
                                "FRIDAY",
                                "SATURDAY",
                                "SUNDAY"
                              ]
                            },
                            "dayOfMonthIndicator": {
                              "type": "integer",
                              "format": "int32"
                            },
                            "localTime": {
                              "$ref": "#/components/schemas/LocalTime"
                            },
                            "midnightEndOfDay": { "type": "boolean" }
                          }
                        }
                      }
                    }
                  }
                }
              },
              "hour": { "type": "integer", "format": "int32" },
              "minute": { "type": "integer", "format": "int32" },
              "second": { "type": "integer", "format": "int32" },
              "nano": { "type": "integer", "format": "int32" }
            }
          },
          "startBreak": {
            "type": "object",
            "properties": {
              "offset": {
                "type": "object",
                "properties": {
                  "totalSeconds": { "type": "integer", "format": "int32" },
                  "id": { "type": "string" },
                  "rules": {
                    "type": "object",
                    "properties": {
                      "fixedOffset": { "type": "boolean" },
                      "transitions": {
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "instant": {
                              "type": "string",
                              "format": "date-time"
                            },
                            "overlap": { "type": "boolean" },
                            "duration": {
                              "type": "object",
                              "properties": {
                                "seconds": {
                                  "type": "integer",
                                  "format": "int64"
                                },
                                "nano": {
                                  "type": "integer",
                                  "format": "int32"
                                },
                                "negative": { "type": "boolean" },
                                "zero": { "type": "boolean" },
                                "units": {
                                  "type": "array",
                                  "items": {
                                    "type": "object",
                                    "properties": {
                                      "dateBased": { "type": "boolean" },
                                      "timeBased": { "type": "boolean" },
                                      "durationEstimated": { "type": "boolean" }
                                    }
                                  }
                                }
                              }
                            },
                            "gap": { "type": "boolean" },
                            "dateTimeBefore": {
                              "type": "string",
                              "format": "date-time"
                            },
                            "dateTimeAfter": {
                              "type": "string",
                              "format": "date-time"
                            }
                          }
                        }
                      },
                      "transitionRules": {
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "month": {
                              "type": "string",
                              "enum": [
                                "JANUARY",
                                "FEBRUARY",
                                "MARCH",
                                "APRIL",
                                "MAY",
                                "JUNE",
                                "JULY",
                                "AUGUST",
                                "SEPTEMBER",
                                "OCTOBER",
                                "NOVEMBER",
                                "DECEMBER"
                              ]
                            },
                            "timeDefinition": {
                              "type": "string",
                              "enum": ["UTC", "WALL", "STANDARD"]
                            },
                            "dayOfWeek": {
                              "type": "string",
                              "enum": [
                                "MONDAY",
                                "TUESDAY",
                                "WEDNESDAY",
                                "THURSDAY",
                                "FRIDAY",
                                "SATURDAY",
                                "SUNDAY"
                              ]
                            },
                            "dayOfMonthIndicator": {
                              "type": "integer",
                              "format": "int32"
                            },
                            "localTime": {
                              "$ref": "#/components/schemas/LocalTime"
                            },
                            "midnightEndOfDay": { "type": "boolean" }
                          }
                        }
                      }
                    }
                  }
                }
              },
              "hour": { "type": "integer", "format": "int32" },
              "minute": { "type": "integer", "format": "int32" },
              "second": { "type": "integer", "format": "int32" },
              "nano": { "type": "integer", "format": "int32" }
            }
          },
          "endBreak": {
            "type": "object",
            "properties": {
              "offset": {
                "type": "object",
                "properties": {
                  "totalSeconds": { "type": "integer", "format": "int32" },
                  "id": { "type": "string" },
                  "rules": {
                    "type": "object",
                    "properties": {
                      "fixedOffset": { "type": "boolean" },
                      "transitions": {
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "instant": {
                              "type": "string",
                              "format": "date-time"
                            },
                            "overlap": { "type": "boolean" },
                            "duration": {
                              "type": "object",
                              "properties": {
                                "seconds": {
                                  "type": "integer",
                                  "format": "int64"
                                },
                                "nano": {
                                  "type": "integer",
                                  "format": "int32"
                                },
                                "negative": { "type": "boolean" },
                                "zero": { "type": "boolean" },
                                "units": {
                                  "type": "array",
                                  "items": {
                                    "type": "object",
                                    "properties": {
                                      "dateBased": { "type": "boolean" },
                                      "timeBased": { "type": "boolean" },
                                      "durationEstimated": { "type": "boolean" }
                                    }
                                  }
                                }
                              }
                            },
                            "gap": { "type": "boolean" },
                            "dateTimeBefore": {
                              "type": "string",
                              "format": "date-time"
                            },
                            "dateTimeAfter": {
                              "type": "string",
                              "format": "date-time"
                            }
                          }
                        }
                      },
                      "transitionRules": {
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "month": {
                              "type": "string",
                              "enum": [
                                "JANUARY",
                                "FEBRUARY",
                                "MARCH",
                                "APRIL",
                                "MAY",
                                "JUNE",
                                "JULY",
                                "AUGUST",
                                "SEPTEMBER",
                                "OCTOBER",
                                "NOVEMBER",
                                "DECEMBER"
                              ]
                            },
                            "timeDefinition": {
                              "type": "string",
                              "enum": ["UTC", "WALL", "STANDARD"]
                            },
                            "dayOfWeek": {
                              "type": "string",
                              "enum": [
                                "MONDAY",
                                "TUESDAY",
                                "WEDNESDAY",
                                "THURSDAY",
                                "FRIDAY",
                                "SATURDAY",
                                "SUNDAY"
                              ]
                            },
                            "dayOfMonthIndicator": {
                              "type": "integer",
                              "format": "int32"
                            },
                            "localTime": {
                              "$ref": "#/components/schemas/LocalTime"
                            },
                            "midnightEndOfDay": { "type": "boolean" }
                          }
                        }
                      }
                    }
                  }
                }
              },
              "hour": { "type": "integer", "format": "int32" },
              "minute": { "type": "integer", "format": "int32" },
              "second": { "type": "integer", "format": "int32" },
              "nano": { "type": "integer", "format": "int32" }
            }
          },
          "workDayDefaultId": { "type": "string" }
        }
      },
      "PageAttendanceDomain": {
        "type": "object",
        "properties": {
          "totalPages": { "type": "integer", "format": "int32" },
          "totalElements": { "type": "integer", "format": "int64" },
          "pageable": { "$ref": "#/components/schemas/PageableObject" },
          "first": { "type": "boolean" },
          "last": { "type": "boolean" },
          "size": { "type": "integer", "format": "int32" },
          "content": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/AttendanceDomain" }
          },
          "number": { "type": "integer", "format": "int32" },
          "sort": { "$ref": "#/components/schemas/SortObject" },
          "numberOfElements": { "type": "integer", "format": "int32" },
          "empty": { "type": "boolean" }
        }
      },
      "PageAttendanceServiceDomain": {
        "type": "object",
        "properties": {
          "totalPages": { "type": "integer", "format": "int32" },
          "totalElements": { "type": "integer", "format": "int64" },
          "pageable": { "$ref": "#/components/schemas/PageableObject" },
          "first": { "type": "boolean" },
          "last": { "type": "boolean" },
          "size": { "type": "integer", "format": "int32" },
          "content": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/AttendanceServiceDomain" }
          },
          "number": { "type": "integer", "format": "int32" },
          "sort": { "$ref": "#/components/schemas/SortObject" },
          "numberOfElements": { "type": "integer", "format": "int32" },
          "empty": { "type": "boolean" }
        }
      }
    },
    "securitySchemes": {
      "bearer-key": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      }
    }
  }
}
